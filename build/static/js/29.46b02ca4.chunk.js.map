{"version":3,"sources":["components/common/inputLabel/InputLabel.js","utils/timeHelper.js","utils/validationHelper.js","components/common/textInput/TextInput.js","components/pageSpecific/zones/linked/soils/form/Form.js","components/pageSpecific/zones/form/Form.js","pages/zones/create/Create.js","components/common/breadcrumb/Breadcrumb.js"],"names":["InputLabel","props","htmlFor","inputId","className","labelText","isRequired","defaultProps","utcToLocalTime","dateTimeString","format","moment","validatorRule","value","validationKeyword","validation","status","message","test","validator","isEmpty","ignore_whitespace","isFloat","isEmail","isAlpha","ignore","isAlphanumeric","isNumeric","valData","split","equals","validate","inputvalue","validationRules","validationResult","forEach","validationRule","runningValidation","trim","TextInput","_validate","validationData","validations","_handleFormValidation","name","useEffect","id","labelClassName","placeholder","type","inputClassName","formValidationData","rows","onChange","onBlur","e","currentTarget","indexOf","SoilForm","formData","_handleOnChange","_handleRemoveBtnClick","onClick","soilType","date","ph","clay","sand","calcium","magnesium","potassium","sodium","aluminum","silt","observation","ZoneForm","_addNewSoil","_removeSoil","latitude","longitude","parseInt","Object","keys","statuses","map","index","soils","ZoneCreate","store","useSelector","selectZone","dispatch","useDispatch","pageName","document","title","process","initFormData","breadCrumbs","link","encType","onSubmit","preventDefault","storeData","customPath","keyName","Array","isArray","length","handleFormDataChange","key","addNewSoil","removeSoil","formValidation","handleFormValidation","disabled","loading","role","Breadcrumb","activeLink","to"],"mappings":"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","file":"static/js/29.46b02ca4.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./InputLabel.scss\";\n\nfunction InputLabel(props) {\n  return (\n    <label htmlFor={props.inputId} className={props.className}>\n      {props.labelText}{\" \"}\n      {props.isRequired && <span className=\"text-danger\">*</span>}\n    </label>\n  );\n}\n\nInputLabel.propTypes = {\n  inputId: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  labelText: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool.isRequired\n};\n\nInputLabel.defaultProps = {\n  className: \"form-label\",\n  isRequired: false,\n  labelText: \"\",\n};\n\nexport default InputLabel;\n","import moment from \"moment\";\n\nexport const utcToLocalTime = (\n  dateTimeString,\n  format = \"MM-DD-YYYY h:mm A\"\n) => {\n  return (dateTimeString ? moment(dateTimeString) : moment()).format(format);\n};\n\nexport const localToUtcTime = (\n  dateTimeString,\n  format = \"MM-DD-YYYY h:mm A\"\n) => {\n  return (dateTimeString ? moment(dateTimeString) : moment()).utc().format(format);\n};\n","import validator from \"validator\";\r\n\r\nconst validatorRule = (value, validationKeyword) => {\r\n  let validation = { status: true, message: \"\" };\r\n  switch (true) {\r\n    case /required/i.test(validationKeyword):\r\n      validation.status = !validator.isEmpty(value, {\r\n        ignore_whitespace: true,\r\n      });\r\n      validation.message =\r\n        validation.status === false ? \"The value is required!\" : \"\";\r\n      break;\r\n    case /float/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isFloat(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be a float!\" : \"\";\r\n      }\r\n      break;\r\n    case /email/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isEmail(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be an Email!\" : \"\";\r\n      }\r\n      break;\r\n    case /alpha/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlpha(value, \"en-US\", { ignore: \" \" });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Alphabetic!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /alphanumeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlphanumeric(value, \"en-US\", {\r\n          ignore: \" \",\r\n        });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be AlphaNumeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /numeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isNumeric(value);\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Numeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /equals:*/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        const valData = validationKeyword.split(\":\");\r\n        validation.status = validator.equals(value, valData[2]);\r\n        validation.message =\r\n          validation.status === false\r\n            ? `The value needs to be same as ${valData[1]}!`\r\n            : \"\";\r\n      }\r\n      break;\r\n    default:\r\n      validation.status = true;\r\n      validation.message = \"\";\r\n      break;\r\n  }\r\n  return validation;\r\n};\r\n\r\nexport const validate = (inputvalue, validationRules = []) => {\r\n  const validationResult = {\r\n    status: true,\r\n    message: \"\",\r\n  };\r\n  validationRules.forEach((validationRule) => {\r\n    const runningValidation = validatorRule(inputvalue, validationRule);\r\n    validationResult.status =\r\n      validationResult.status && runningValidation.status;\r\n    validationResult.message += \" \" + runningValidation.message;\r\n    validationResult.message = validationResult.message.trim();\r\n  });\r\n  return validationResult;\r\n};\r\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./TextInput.scss\";\nimport InputLabel from \"../inputLabel/InputLabel\";\nimport { validate } from \"../../../utils/validationHelper\";\n\nfunction TextInput(props) {\n  const _validate = (value) => {\n    const validationData = validate(value || \"\", props.validations);\n    if (validationData.status === false) {\n      props._handleFormValidation(props.name, validationData);\n    } else {\n      props._handleFormValidation(props.name, null);\n    }\n  };\n\n  // Remove if Validation causes issue\n  useEffect(() => {\n    _validate();\n  }, []);\n\n  return (\n    <div className=\"m-2\">\n      <InputLabel\n        inputId={props.id}\n        className={props.labelClassName}\n        labelText={props.placeholder}\n        isRequired={props.isRequired}\n      />\n      {props.type === \"textarea\" && (\n        <textarea\n          id={props.id}\n          className={`${props.inputClassName} ${\n            props.formValidationData[props.name] &&\n            props.formValidationData[props.name].status === false &&\n            \"is-invalid\"\n          }`}\n          rows=\"3\"\n          placeholder={props.placeholder}\n          name={props.name}\n          value={props.value}\n          onChange={props.onChange}\n          onBlur={(e) => _validate(e.currentTarget.value)}\n        />\n      )}\n\n      {[\"textarea\"].indexOf(props.type) === -1 && (\n        <input\n          id={props.id}\n          className={`${props.inputClassName} ${\n            props.formValidationData[props.name] &&\n            props.formValidationData[props.name].status === false &&\n            \"is-invalid\"\n          }`}\n          type={props.type}\n          placeholder={props.placeholder}\n          name={props.name}\n          value={props.value}\n          onChange={props.onChange}\n          onBlur={(e) => _validate(e.currentTarget.value)}\n        />\n      )}\n\n      {props.formValidationData[props.name] &&\n        props.formValidationData[props.name].status === false && (\n          <div className=\"invalid-feedback\">\n            {props.formValidationData[props.name].message}\n          </div>\n        )}\n    </div>\n  );\n}\n\nTextInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  labelClassName: PropTypes.string.isRequired,\n  inputClassName: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  validations: PropTypes.array,\n  onChange: PropTypes.func.isRequired,\n};\n\nTextInput.defaultProps = {\n  labelClassName: \"form-label\",\n  inputClassName: \"form-control\",\n  isRequired: false,\n  validations: [],\n  value: \"\",\n  onChange: () => {},\n};\n\nexport default TextInput;\n","import React from \"react\";\nimport TextInput from \"../../../../../common/textInput/TextInput\";\nimport { utcToLocalTime } from \"../../../../../../utils/timeHelper\";\n\nfunction SoilForm({\n  formData,\n  _handleOnChange,\n  _handleRemoveBtnClick,\n  formValidationData,\n  _handleFormValidation,\n}) {\n  return (\n    <div className=\"card mb-3\">\n      <div className=\"card-header border-transparent\">\n        <button\n          type=\"button\"\n          className=\"btn btn-sm btn-danger ms-3 float-end\"\n          onClick={_handleRemoveBtnClick}\n        >\n          Remove\n        </button>\n      </div>\n      <div className=\"card-body\">\n        {formData.id ? <input type=\"hidden\" value={formData.id} /> : \"\"}\n        <div className=\"row\">\n          <div className=\"col-3\">\n            <TextInput\n              id=\"sfInput1\"\n              type=\"text\"\n              placeholder=\"Soil Type\"\n              name=\"soilType\"\n              value={formData.soilType}\n              onChange={_handleOnChange}\n              validations={[\"alpha\"]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n          <div className=\"col-3\">\n            <TextInput\n              id=\"sfInput2\"\n              type=\"date\"\n              placeholder=\"Date\"\n              name=\"date\"\n              value={utcToLocalTime(formData.date, \"YYYY-MM-DD\")}\n              onChange={_handleOnChange}\n              validations={[\"alpha\"]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n          <div className=\"col-2\">\n            <TextInput\n              id=\"sfInput3\"\n              type=\"text\"\n              placeholder=\"PH\"\n              name=\"ph\"\n              value={formData.ph}\n              onChange={_handleOnChange}\n              validations={[\"numeric\"]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n          <div className=\"col-2\">\n            <TextInput\n              id=\"sfInput4\"\n              type=\"text\"\n              placeholder=\"Clay\"\n              name=\"clay\"\n              value={formData.clay}\n              onChange={_handleOnChange}\n              validations={[\"numeric\"]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n          <div className=\"col-2\">\n            <TextInput\n              id=\"sfInput5\"\n              type=\"text\"\n              placeholder=\"Sand\"\n              name=\"sand\"\n              value={formData.sand}\n              onChange={_handleOnChange}\n              validations={[\"numeric\"]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-2\">\n            <TextInput\n              id=\"sfInput6\"\n              type=\"text\"\n              placeholder=\"Calcium\"\n              name=\"calcium\"\n              value={formData.calcium}\n              onChange={_handleOnChange}\n              validations={[\"numeric\"]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n          <div className=\"col-2\">\n            <TextInput\n              id=\"sfInput7\"\n              type=\"text\"\n              placeholder=\"Magnesium\"\n              name=\"magnesium\"\n              value={formData.magnesium}\n              onChange={_handleOnChange}\n              validations={[\"numeric\"]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n          <div className=\"col-2\">\n            <TextInput\n              id=\"sfInput8\"\n              type=\"text\"\n              placeholder=\"Potassium\"\n              name=\"potassium\"\n              value={formData.potassium}\n              onChange={_handleOnChange}\n              validations={[\"numeric\"]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n          <div className=\"col-2\">\n            <TextInput\n              id=\"sfInput9\"\n              type=\"text\"\n              placeholder=\"Sodium\"\n              name=\"sodium\"\n              value={formData.sodium}\n              onChange={_handleOnChange}\n              validations={[\"numeric\"]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n          <div className=\"col-2\">\n            <TextInput\n              id=\"sfInput10\"\n              type=\"text\"\n              placeholder=\"Aluminum\"\n              name=\"aluminum\"\n              value={formData.aluminum}\n              onChange={_handleOnChange}\n              validations={[\"numeric\"]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n          <div className=\"col-2\">\n            <TextInput\n              id=\"sfInput11\"\n              type=\"text\"\n              placeholder=\"Silt\"\n              name=\"silt\"\n              value={formData.silt}\n              onChange={_handleOnChange}\n              validations={[\"numeric\"]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <TextInput\n              id=\"sfInput12\"\n              type=\"textarea\"\n              placeholder=\"Observation\"\n              name=\"observation\"\n              value={formData.observation}\n              onChange={_handleOnChange}\n              validations={[\"alphanumeric\"]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SoilForm;\n","import React from \"react\";\nimport { statuses } from \"../../../../utils/appConstants\";\nimport TextInput from \"../../../common/textInput/TextInput\";\nimport SoilForm from \"../linked/soils/form/Form\";\n\nfunction ZoneForm({ formData, _handleOnChange, _addNewSoil, _removeSoil, formValidationData, _handleFormValidation }) {\n  return (\n    <>\n      {formData.id ? <input type=\"hidden\" value={formData.id} /> : \"\"}\n\n      <div className=\"row mb-3\">\n        <div className=\"col-12\">\n          <TextInput\n            id=\"input1\"\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            isRequired={true}\n            value={formData.name}\n            onChange={_handleOnChange}\n            validations={[\"required\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n      </div>\n\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12 col-md-6\">\n          <TextInput\n            id=\"input2\"\n            type=\"text\"\n            placeholder=\"Latitude\"\n            name=\"latitude\"\n            isRequired={true}\n            value={formData.latitude}\n            onChange={_handleOnChange}\n            validations={[\"required\", \"float\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n        <div className=\"col-sm-12 col-md-6\">\n          <TextInput\n            id=\"input3\"\n            type=\"text\"\n            placeholder=\"Longitude\"\n            name=\"longitude\"\n            isRequired={true}\n            value={formData.longitude}\n            onChange={_handleOnChange}\n            validations={[\"required\", \"float\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"input4\" className=\"form-label\">\n          Status <span className=\"text-danger\">*</span>\n        </label>\n        <select\n          id=\"input4\"\n          className=\"form-select\"\n          name=\"status\"\n          onChange={_handleOnChange}\n          value={parseInt(formData.status)}\n        >\n          {Object.keys(statuses).map((status, index) => (\n            <option key={index} value={status}>\n              {statuses[status]}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"mb-3\">\n        <div className=\"card\">\n          <div className=\"card-header border-transparent\">\n            <h4 className=\"m-0\">\n              Soil&nbsp;\n              <button\n                type=\"button\"\n                className=\"btn btn-sm btn-app ms-3\"\n                onClick={_addNewSoil}\n              >\n                Add\n              </button>\n            </h4>\n          </div>\n          <div className=\"card-body\">\n            {formData.soils.map((value, index) => (\n              <SoilForm\n                key={index}\n                formData={value}\n                _handleOnChange={(e) => _handleOnChange(e, [\"soils\", index])}\n                _handleRemoveBtnClick={(e) => _removeSoil(index, e)}\n                formValidationData={formValidationData}\n                _handleFormValidation={_handleFormValidation}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default ZoneForm;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./Create.scss\";\nimport Breadcrumb from \"../../../components/common/breadcrumb/Breadcrumb\";\nimport {\n  addNewSoil,\n  handleFormDataChange,\n  handleFormValidation,\n  initFormData,\n  removeSoil,\n  selectZone,\n  storeData,\n} from \"../../../store/redux/Page/Zone\";\nimport ZoneForm from \"../../../components/pageSpecific/zones/form/Form\";\n\nfunction ZoneCreate() {\n  const store = useSelector(selectZone);\n  const dispatch = useDispatch();\n  const pageName = \"Add zone\";\n  const breadCrumbs = [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n    {\n      name: \"Zones\",\n      link: \"/zones\",\n    },\n    {\n      name: \"Add\",\n      link: \"\",\n    },\n  ];\n\n  const _addNewSoil = (e) => {\n    dispatch(addNewSoil());\n  };\n\n  const _removeSoil = (index, e) => {\n    dispatch(removeSoil(index));\n  };\n\n  const _handleOnChange = (e, customPath) => {\n    let keyName = e.currentTarget.name;\n    if (Array.isArray(customPath) && customPath.length > 0)\n      keyName = [...customPath, e.currentTarget.name];\n\n    dispatch(\n      handleFormDataChange({ key: keyName, value: e.currentTarget.value })\n    );\n  };\n\n  const _handleFormValidation = (key, value) => {\n    dispatch(\n      handleFormValidation({\n        key,\n        value,\n      })\n    );\n  };\n\n  const _handleFormSubmit = (e) => {\n    e.preventDefault();\n    dispatch(storeData(store.formData));\n  };\n\n  useEffect(() => {\n    document.title = `${process.env.REACT_APP_NAME} | ${pageName}`;\n    dispatch(initFormData());\n  }, []);\n\n  return (\n    <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n      <div className=\"col-12 p-0 content-wrapper\">\n        <div className=\"content-header\">\n          <div className=\"container-fluid\">\n            <div className=\"row mb-2\">\n              <div className=\"col-sm-6\">\n                <h1 className=\"m-0\">{pageName}</h1>\n              </div>\n              <div className=\"col-sm-6\">\n                <Breadcrumb breadCrumbs={breadCrumbs} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <section className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n                  <div className=\"card-header border-transparent\">\n                    <div className={\"row\"}>&nbsp;</div>\n                  </div>\n\n                  <form\n                    name={`${pageName}Create`}\n                    encType={`multipart/form-data`}\n                    onSubmit={_handleFormSubmit}\n                  >\n                    <div className=\"card-body\">\n                      <ZoneForm\n                        formData={store.formData}\n                        _handleOnChange={_handleOnChange}\n                        _addNewSoil={_addNewSoil}\n                        _removeSoil={_removeSoil}\n                        formValidationData={store.formValidation}\n                        _handleFormValidation={_handleFormValidation}\n                      />\n                    </div>\n\n                    <div className=\"card-footer clearfix\">\n                      <button\n                        className=\"btn btn-sm btn-app float-end\"\n                        disabled={\n                          Object.keys(store.formValidation).length > 0 ||\n                          store.loading === true\n                        }\n                      >\n                        {store.loading === true && (\n                          <span\n                            className=\"spinner-border spinner-border-sm\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                          ></span>\n                        )}{\" \"}\n                        Save\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default ZoneCreate;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Breadcrumb.scss\";\nimport { Link } from \"react-router-dom\";\n\nfunction Breadcrumb({ breadCrumbs }) {\n  return (\n    <nav className=\"float-sm-end\" aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        {breadCrumbs.map((value, index) => {\n          const activeLink = value.link && value.link !== \"\";\n          return (\n            <li\n              className={`breadcrumb-item ${activeLink ? \"active\" : \"\"}`}\n              key={index}\n            >\n              {activeLink ? (\n                <Link to={value.link}>{value.name}</Link>\n              ) : (\n                value.name\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n}\n\nBreadcrumb.propTypes = {\n  breadCrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      link: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nBreadcrumb.defaultProps = {\n  breadCrumbs: [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n  ],\n};\n\nexport default Breadcrumb;\n"],"sourceRoot":""}