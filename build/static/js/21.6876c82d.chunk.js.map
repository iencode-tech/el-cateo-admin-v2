{"version":3,"sources":["components/common/inputLabel/InputLabel.js","utils/timeHelper.js","utils/validationHelper.js","components/common/table/Table.js","components/common/textInput/TextInput.js","components/pageSpecific/agriculturalPractices/linked/rawMaterial/form/Form.js","components/pageSpecific/agriculturalPractices/form/Form.js","pages/agriculturalPractices/edit/Edit.js","components/common/breadcrumb/Breadcrumb.js"],"names":["InputLabel","props","htmlFor","inputId","className","labelText","isRequired","defaultProps","utcToLocalTime","dateTimeString","format","moment","validatorRule","value","validationKeyword","validation","status","message","test","validator","isEmpty","ignore_whitespace","isFloat","isEmail","isAlpha","ignore","isAlphanumeric","isNumeric","valData","split","equals","validate","inputvalue","validationRules","validationResult","forEach","validationRule","runningValidation","trim","Table","header","data","length","map","element","i","colSpan","Object","keys","subElement","subI","TextInput","_validate","validationData","validations","_handleFormValidation","name","useEffect","id","labelClassName","placeholder","type","inputClassName","formValidationData","rows","onChange","onBlur","e","currentTarget","indexOf","RawMaterialForm","formData","listData","_handleOnChange","_addNewRawMaterial","_handleRemoveBtnClick","_fetchAllRawMaterials","useState","fdDefVal","setFdDefVal","_checkFolialDrenche","parseInt","method","_checkManual","_calculateQtyTree","rawMaterialData","quantity","_getRemaining","remainingTotal","rawMaterials","parseFloat","filter","material","findFlag","fValue","rawMaterialId","index","onClick","rawMaterial","unit","readOnly","disabled","unitMetric","metric","qtyTree","qtyLts","total","delete","icon","faTrash","AgriculturalPracticeForm","rawMaterialList","_removeRawMaterial","defaultFolialDrencheData","formulationName","scheduledDate","daysToDo","methods","observations","statuses","AgriculturalPracticeEdit","firstLoad","setFirstLoad","params","useParams","store","useSelector","selectAgriculturalPractice","dispatch","useDispatch","pageName","keyword","fetchAllRawMaterials","rawMaterialsFormData","document","title","process","initFormData","defaultFolialDrencheId","actionType","readData","breadCrumbs","link","onSubmit","preventDefault","updateData","customPath","keyName","Array","isArray","handleFormDataChange","key","addNewRawMaterial","removeRawMaterial","defaultFolialDrenche","formValidation","handleFormValidation","loading","role","Breadcrumb","activeLink","to"],"mappings":"uGAAA,uBAIA,SAASA,EAAWC,GAClB,OACE,wBAAOC,QAASD,EAAME,QAASC,UAAWH,EAAMG,UAAhD,UACGH,EAAMI,UAAW,IACjBJ,EAAMK,YAAc,sBAAMF,UAAU,cAAhB,kBAY3BJ,EAAWO,aAAe,CACxBH,UAAW,aACXE,YAAY,EACZD,UAAW,IAGEL,O,iCC1Bf,wDAEaQ,EAAiB,SAC5BC,GAEI,IADJC,EACG,uDADM,oBAET,OAAQD,EAAiBE,IAAOF,GAAkBE,OAAUD,OAAOA,K,iCCNrE,wDAEME,EAAgB,SAACC,EAAOC,GAC5B,IAAIC,EAAa,CAAEC,QAAQ,EAAMC,QAAS,IAC1C,QAAQ,GACN,IAAK,YAAYC,KAAKJ,GACpBC,EAAWC,QAAUG,IAAUC,QAAQP,EAAO,CAC5CQ,mBAAmB,IAErBN,EAAWE,SACa,IAAtBF,EAAWC,OAAmB,yBAA2B,GAC3D,MACF,IAAK,SAASE,KAAKJ,GACH,KAAVD,IACFE,EAAWC,OAASG,IAAUG,QAAQT,GACtCE,EAAWE,SACa,IAAtBF,EAAWC,OAAmB,iCAAmC,IAErE,MACF,IAAK,SAASE,KAAKJ,GACH,KAAVD,IACFE,EAAWC,OAASG,IAAUI,QAAQV,GACtCE,EAAWE,SACa,IAAtBF,EAAWC,OAAmB,kCAAoC,IAEtE,MACF,IAAK,SAASE,KAAKJ,GACH,KAAVD,IACFE,EAAWC,OAASG,IAAUK,QAAQX,EAAO,QAAS,CAAEY,OAAQ,MAChEV,EAAWE,SACa,IAAtBF,EAAWC,OACP,yCACA,IAER,MACF,IAAK,gBAAgBE,KAAKJ,GACV,KAAVD,IACFE,EAAWC,OAASG,IAAUO,eAAeb,EAAO,QAAS,CAC3DY,OAAQ,MAEVV,EAAWE,SACa,IAAtBF,EAAWC,OACP,sCACA,IAER,MACF,IAAK,WAAWE,KAAKJ,GACL,KAAVD,IACFE,EAAWC,OAASG,IAAUQ,UAAUd,GACxCE,EAAWE,SACa,IAAtBF,EAAWC,OACP,sCACA,IAER,MACF,IAAK,YAAYE,KAAKJ,GACpB,GAAc,KAAVD,EAAc,CAChB,IAAMe,EAAUd,EAAkBe,MAAM,KACxCd,EAAWC,OAASG,IAAUW,OAAOjB,EAAOe,EAAQ,IACpDb,EAAWE,SACa,IAAtBF,EAAWC,OAAX,wCACqCY,EAAQ,GAD7C,KAEI,GAER,MACF,QACEb,EAAWC,QAAS,EACpBD,EAAWE,QAAU,GAGzB,OAAOF,GAGIgB,EAAW,SAACC,GAAsC,IAA1BC,EAAyB,uDAAP,GAC/CC,EAAmB,CACvBlB,QAAQ,EACRC,QAAS,IASX,OAPAgB,EAAgBE,SAAQ,SAACC,GACvB,IAAMC,EAAoBzB,EAAcoB,EAAYI,GACpDF,EAAiBlB,OACfkB,EAAiBlB,QAAUqB,EAAkBrB,OAC/CkB,EAAiBjB,SAAW,IAAMoB,EAAkBpB,QACpDiB,EAAiBjB,QAAUiB,EAAiBjB,QAAQqB,UAE/CJ,I,uDCrFT,uBA4CeK,IAxCf,YAAkC,IAAjBC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,KACvB,OACE,qBAAKrC,UAAU,mBAAf,SACE,wBAAOA,UAAU,YAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,cAAd,eACCoC,EAAOE,OAAS,EACbF,EAAOG,KAAI,SAACC,EAASC,GAAV,OAAgB,oBAAIzC,UAAU,cAAd,SAAqCwC,GAAJC,MAC5D,QAGR,gCACmB,IAAhBJ,EAAKC,OACJ,6BACE,oBAAII,QAAS,EAAIN,EAAOE,OAAQtC,UAAU,cAA1C,+BAKFqC,EAAKE,KAAI,SAACC,EAASC,GAAV,OACP,+BACE,oBAAIzC,UAAU,cAAd,SAA6ByC,EAAI,IAChCE,OAAOC,KAAKJ,GAASD,KAAI,SAACM,EAAYC,GAAb,OACxB,oBAAI9C,UAAU,cAAd,SAAwCwC,EAAQK,IAAfC,QAH5BL,e,uDCzBvB,6CAMA,SAASM,EAAUlD,GACjB,IAAMmD,EAAY,SAACvC,GACjB,IAAMwC,EAAiBtB,YAASlB,GAAS,GAAIZ,EAAMqD,cACrB,IAA1BD,EAAerC,OACjBf,EAAMsD,sBAAsBtD,EAAMuD,KAAMH,GAExCpD,EAAMsD,sBAAsBtD,EAAMuD,KAAM,OAS5C,OAJAC,qBAAU,WACRL,MACC,IAGD,sBAAKhD,UAAU,MAAf,UACE,cAAC,IAAD,CACED,QAASF,EAAMyD,GACftD,UAAWH,EAAM0D,eACjBtD,UAAWJ,EAAM2D,YACjBtD,WAAYL,EAAMK,aAEJ,aAAfL,EAAM4D,MACL,0BACEH,GAAIzD,EAAMyD,GACVtD,UAAS,UAAKH,EAAM6D,eAAX,YACP7D,EAAM8D,mBAAmB9D,EAAMuD,QACiB,IAAhDvD,EAAM8D,mBAAmB9D,EAAMuD,MAAMxC,QACrC,cAEFgD,KAAK,IACLJ,YAAa3D,EAAM2D,YACnBJ,KAAMvD,EAAMuD,KACZ3C,MAAOZ,EAAMY,MACboD,SAAUhE,EAAMgE,SAChBC,OAAQ,SAACC,GAAD,OAAOf,EAAUe,EAAEC,cAAcvD,WAIN,IAAtC,CAAC,YAAYwD,QAAQpE,EAAM4D,OAC1B,uBACEH,GAAIzD,EAAMyD,GACVtD,UAAS,UAAKH,EAAM6D,eAAX,YACP7D,EAAM8D,mBAAmB9D,EAAMuD,QACiB,IAAhDvD,EAAM8D,mBAAmB9D,EAAMuD,MAAMxC,QACrC,cAEF6C,KAAM5D,EAAM4D,KACZD,YAAa3D,EAAM2D,YACnBJ,KAAMvD,EAAMuD,KACZ3C,MAAOZ,EAAMY,MACboD,SAAUhE,EAAMgE,SAChBC,OAAQ,SAACC,GAAD,OAAOf,EAAUe,EAAEC,cAAcvD,UAI5CZ,EAAM8D,mBAAmB9D,EAAMuD,QACkB,IAAhDvD,EAAM8D,mBAAmB9D,EAAMuD,MAAMxC,QACnC,qBAAKZ,UAAU,mBAAf,SACGH,EAAM8D,mBAAmB9D,EAAMuD,MAAMvC,aAoBlDkC,EAAU5C,aAAe,CACvBoD,eAAgB,aAChBG,eAAgB,eAChBxD,YAAY,EACZgD,YAAa,GACbzC,MAAO,GACPoD,SAAU,cAGGd,O,iIC+GAmB,MAxMf,YAOI,IANFC,EAMC,EANDA,SACAC,EAKC,EALDA,SACAC,EAIC,EAJDA,gBACAC,EAGC,EAHDA,mBACAC,EAEC,EAFDA,sBACAC,EACC,EADDA,sBAEA,EAAgCC,mBAAS,KAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAsB,iBAC1B,CAAC,EAAG,GAAGX,QAAQY,SAASV,EAASW,UAAY,GAEzCC,EAAe,kBAAoC,IAA9BF,SAASV,EAASW,SAEvCE,EAAoB,SAACC,GACzB,OAAOA,EAAgBC,UAAY,GAG/BC,EAAgB,WACpB,IAAIC,EAAiB,EACrB,GAAIjB,EAASkB,cAAgBlB,EAASkB,aAAa/C,OAAS,EAC1D,IAAK,IAAIG,EAAI,EAAGA,EAAI0B,EAASkB,aAAa/C,OAAQG,IAChD2C,GAAkBE,WAAWnB,EAASkB,aAAa5C,GAAGyC,WAAa,EAGvE,OAAOE,GAaT,OAVA/B,qBAAU,WACR,GAAIuB,KAAyBT,EAASkB,cAAgBlB,EAASkB,aAAa/C,OAAS,EAAG,CAEtF,IADA,IAAI8C,EAAiB,EACZ3C,EAAI,EAAGA,EAAI0B,EAASkB,aAAa/C,OAAQG,IAChD2C,GAAkBE,WAAWnB,EAASkB,aAAa5C,GAAGyC,WAAa,EAErEP,EAAYS,OAKd,qBAAKpF,UAAU,OAAf,SACE,sBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,gCAAf,UACE,oBAAIA,UAAS,cAAb,2BACA,qBAAIA,UAAU,aAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,uBACEA,UAAU,eACVyD,KAAK,OACLI,SAAU,SAACE,GAAD,OAAOS,EAAsBT,EAAEC,cAAcvD,YAG1D2D,EACEmB,QAAO,SAACC,GACP,IAAIC,GAAW,EAOf,OANAtB,EAASkB,cACPlB,EAASkB,aAAatD,SAAQ,SAAC2D,GACzBA,EAAOC,gBAAkBH,EAASlC,KACpCmC,GAAW,OAGTA,KAETlD,KAAI,SAACiD,EAAUI,GAAX,OACH,oBAEEC,QAAS,SAAC9B,GAAD,OAAOO,EAAmB,CAAEkB,YAAYzB,IACjD/D,UAAU,yCAHZ,SAKGwF,EAASpC,MAJLwC,YASf,sBAAK5F,UAAU,iCAAf,UACE,oBAAIA,UAAS,cAAb,4BACA,cAACmC,EAAA,EAAD,CACEE,KACE8B,EAASkB,cACTlB,EAASkB,aAAa9C,KAAI,SAACuD,EAAaF,GAAd,mBAAC,yBACzBxC,KACE,qCACE,uBACEK,KAAK,SACLL,KAAK,cACL3C,MAAOqF,EAAYxC,GACnBO,SAAU,SAACE,GAAD,OACRM,EAAgBN,EAAG,CAAC,eAAgB6B,OAGvCE,EAAYA,YAAY1C,QAG7B8B,SACE,uBACEzB,KAAK,SACLL,KAAK,WACL3C,MACEmE,KAAmC,IAAVgB,EACrBlB,EACAoB,EAAYZ,SAElBrB,SAAU,SAACE,GACLa,KAAmC,IAAVgB,GAC3BjB,EAAYW,WAAWvB,EAAEC,cAAcvD,QACvC4D,EACE,CACEL,cAAe,CACbZ,KAAM,WACN3C,MACE6E,WAAWvB,EAAEC,cAAcvD,OAC3B0E,MAGN,CAAC,eAAgBS,KAEVhB,KAAyBgB,EAAQ,GAC1CvB,EAAgBN,EAAG,CAAC,eAAgB6B,IACpCvB,EACE,CACEL,cAAe,CACbZ,KAAM,WACN3C,MACE6E,WAAWZ,IACVY,WAAWH,KACVG,WAAWQ,EAAYZ,UAAY,GACnCI,WAAWvB,EAAEC,cAAcvD,OAAS,MAG5C,CAAC,eAAgB,KAGnB4D,EAAgBN,EAAG,CAAC,eAAgB6B,OAK5CG,KACE,wBACE3C,KAAK,OACL3C,MAAOqF,EAAYC,KACnBlC,SAAU,SAACE,GAAD,OACRM,EAAgBN,EAAG,CAAC,eAAgB6B,KAEtCI,UAAU,EACVC,UAAU,EAPZ,SASGtD,OAAOC,KAAKsD,KAAY3D,KAAI,SAAC4D,EAAQP,GAAT,OAC3B,wBAAoBnF,MAAO0F,EAA3B,SACGD,IAAWC,IADDP,SAMfb,IACA,CACEqB,QAAQ,GAAD,OAAKpB,EAAkBc,GAAvB,YACLI,IAAWJ,EAAYC,QAG3B,IACAnB,IACA,CACEyB,OACY,IAAVT,EAAA,UACOZ,EAAkBc,GADzB,YAEMI,IAAWJ,EAAYC,OAEzB,GACNO,MACY,IAAVV,GAAA,UACGE,EAAYZ,SADf,YAEEgB,IAAWJ,EAAYC,QAG7B,IAhGoB,IAiGxBQ,QAAU3B,KAAmC,IAAVgB,GACjCb,MACA,cAAC,IAAD,CACEyB,KAAMC,IACNZ,QAAS,SAAC9B,GAAD,OAAOQ,EAAsBqB,EAAO7B,WAKrD3B,OAAM,CACJ,WACA,WACA,QAHI,mBAIA2C,IAAiB,CAAC,cAAgB,IAJlC,YAKAH,IAAwB,CAAC,aAAc,SAAW,IALlD,CAMJ,gB,kBCzCC8B,IAtJf,YAUI,IATFvC,EASC,EATDA,SACAwC,EAQC,EARDA,gBACAtC,EAOC,EAPDA,gBACAC,EAMC,EANDA,mBACAsC,EAKC,EALDA,mBACApC,EAIC,EAJDA,sBACAqC,EAGC,EAHDA,yBACAlD,EAEC,EAFDA,mBACFR,EACG,EADHA,sBAEE,OACE,qCACGgB,EAASb,GAAK,uBAAOG,KAAK,SAAShD,MAAO0D,EAASb,KAAS,GAC7D,sBAAKtD,UAAU,WAAf,UACE,qBAAKA,UAAU,WAAf,SACA,cAAC+C,EAAA,EAAD,CACIO,GAAG,SACHG,KAAK,OACLD,YAAY,mBACZJ,KAAK,kBACLlD,YAAY,EACZO,MAAO0D,EAAS2C,gBAChBjD,SAAUQ,EACVnB,YAAa,CAAC,WAAY,SAC1BS,mBAAoBA,EACpBR,sBAAuBA,MAI3B,qBAAKnD,UAAU,WAAf,SACA,cAAC+C,EAAA,EAAD,CACIO,GAAG,SACHG,KAAK,OACLD,YAAY,gBACZJ,KAAK,gBACLlD,YAAY,EACZO,MAAOL,YAAe+D,EAAS4C,cAAe,cAC9ClD,SAAUQ,EACVnB,YAAa,CAAC,YACdS,mBAAoBA,EACpBR,sBAAuBA,MAI3B,qBAAKnD,UAAU,WAAf,SACA,cAAC+C,EAAA,EAAD,CACIO,GAAG,SACHG,KAAK,OACLD,YAAY,aACZJ,KAAK,WACLlD,YAAY,EACZO,MAAO0D,EAAS6C,SAChBnD,SAAUQ,EACVnB,YAAa,CAAC,WAAY,WAC1BS,mBAAoBA,EACpBR,sBAAuBA,SAK7B,qBAAKnD,UAAU,WAAf,SACE,sBAAKA,UAAU,WAAf,UACE,wBAAOF,QAAQ,SAASE,UAAU,aAAlC,oBACS,sBAAMA,UAAU,cAAhB,kBAET,wBACEsD,GAAG,SACHtD,UAAU,cACVoD,KAAK,SACLS,SAAU,SAACE,GACTM,EAAgBN,GAChBM,EAAgB,CACdL,cAAe,CAAEZ,KAAM,eAAgB3C,MAAO,MAEhD,IAAIsF,EAAO,IACP,CAAC,EAAG,GAAG9B,QAAQY,SAASd,EAAEC,cAAcvD,SAAW,IACrDsF,EAAO,KACPzB,EACE,CAAEkB,SAAUqB,EAA0B3B,SAAU,KAChD,OAGJV,EAAsB,GAAIuB,IAE5BtF,MAAOoE,SAASV,EAASW,QAnB3B,SAqBGnC,OAAOC,KAAKqE,KAAS1E,KAAI,SAACuC,EAAQc,GAAT,OACxB,wBAAoBnF,MAAOqE,EAA3B,SACGmC,IAAQnC,IADEc,aAQrB,qBAAK5F,UAAU,OAAf,SACE,cAAC+C,EAAA,EAAD,CACIO,GAAG,UACHG,KAAK,WACLD,YAAY,eACZJ,KAAK,eACLlD,YAAY,EACZO,MAAO0D,EAAS+C,aAChBrD,SAAUQ,EACVV,mBAAoBA,EACpBR,sBAAuBA,MAI7B,sBAAKnD,UAAU,OAAf,UACE,wBAAOF,QAAQ,SAASE,UAAU,aAAlC,oBACS,sBAAMA,UAAU,cAAhB,kBAET,wBACEsD,GAAG,SACHtD,UAAU,cACVoD,KAAK,SACLS,SAAUQ,EACV5D,MAAOoE,SAASV,EAASvD,QAL3B,SAOG+B,OAAOC,KAAKuE,KAAU5E,KAAI,SAAC3B,EAAQgF,GAAT,OACzB,wBAAoBnF,MAAOG,EAA3B,SACGuG,IAASvG,IADCgF,WAOnB,qBAAK5F,UAAU,OAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,iCAAf,SACE,oBAAIA,UAAU,MAAd,4BAEF,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,CACEmE,SAAUA,EACVC,SAAUuC,EACVtC,gBAAiBA,EACjBC,mBAAoBA,EACpBC,sBAAuBqC,EACvBpC,sBAAuBA,gB,iKCsBtB4C,UAtJf,WACE,MAAkC3C,oBAAS,GAA3C,mBAAO4C,EAAP,KAAkBC,EAAlB,KACMC,EAASC,cACTC,EAAQC,YAAYC,KACpBC,EAAWC,cACXC,EAAW,6BAwBXtD,EAAwB,WAAgC,IAA/BuD,EAA8B,uDAApB,GAAIhC,EAAgB,uDAAT,KAClD6B,EACEI,YAAqB,2BAAKP,EAAMQ,sBAAZ,IAAkCF,UAAShC,YAkDnE,OAtBA1C,qBAAU,WACR6E,SAASC,MAAT,UAAoBC,iBAApB,cAAoDN,GACpDF,EACES,YAAa,CACX/E,GAAIgF,IACJC,WAAY,8BAGhB/D,IACAoD,EAASY,YAAS,CAAElF,GAAIiE,EAAOjE,QAC9B,IAEHD,qBAAU,WAC+B,KAAnCoE,EAAMtD,SAAS2C,iBAA0BO,IAC3C7C,EACE,GACoC,IAApCK,SAAS4C,EAAMtD,SAASW,QAAgB,IAAM,MAEhDwC,GAAa,OAKf,qBAAKtH,UAAU,0GAAf,SACE,sBAAKA,UAAU,6BAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,WAAf,SACE,oBAAIA,UAAU,MAAd,SAAqB8H,MAEvB,qBAAK9H,UAAU,WAAf,SACE,cAAC,IAAD,CAAYyI,YArFN,CAClB,CACErF,KAAM,YACNsF,KAAM,cAER,CACEtF,KAAM,yBACNsF,KAAM,2BAER,CACEtF,KAAM,OACNsF,KAAM,gBAgFJ,yBAAS1I,UAAU,UAAnB,SACE,qBAAKA,UAAU,kBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,iCAAf,SACE,qBAAKA,UAAW,MAAhB,oBAGF,uBAAMoD,KAAI,UAAK0E,EAAL,UAAuBa,SApDvB,SAAC5E,GACzBA,EAAE6E,iBACFhB,EAASiB,YAAW,aAAEvF,GAAIiE,EAAOjE,IAAOmE,EAAMtD,aAkDhC,UACE,qBAAKnE,UAAU,YAAf,SACE,cAAC,IAAD,CACEmE,SAAUsD,EAAMtD,SAChBwC,gBAAiBc,EAAMpC,aACvBhB,gBA5EE,SAACN,EAAG+E,GAC1B,IAAIC,EAAUhF,EAAEC,cAAcZ,KAC1B4F,MAAMC,QAAQH,IAAeA,EAAWxG,OAAS,IACnDyG,EAAO,sBAAOD,GAAP,CAAmB/E,EAAEC,cAAcZ,QAE5CwE,EACEsB,YAAqB,CAAEC,IAAKJ,EAAStI,MAAOsD,EAAEC,cAAcvD,UAuE1C6D,mBA3FK,SAACkB,EAAUzB,GACpC6D,EAASwB,YAAkB5D,KA2FPoB,mBAxFK,SAAChB,EAAO7B,GACjC6D,EAASyB,YAAkBzD,KAwFPpB,sBAAuBA,EACvBqC,yBAA0BY,EAAM6B,qBAChC3F,mBAAoB8D,EAAM8B,eAC1BpG,sBAxEQ,SAACgG,EAAK1I,GAClCmH,EACE4B,YAAqB,CACnBL,MACA1I,gBAwEY,qBAAKT,UAAU,uBAAf,SACE,yBACEA,UAAU,+BACViG,SACEtD,OAAOC,KAAK6E,EAAM8B,gBAAgBjH,OAAS,IACzB,IAAlBmF,EAAMgC,QAJV,WAOqB,IAAlBhC,EAAMgC,SACL,sBACEzJ,UAAU,mCACV0J,KAAK,SACL,cAAY,SAEb,IAbL,iC,gCC7ItB,8BAKA,SAASC,EAAT,GAAsC,IAAhBlB,EAAe,EAAfA,YACpB,OACE,qBAAKzI,UAAU,eAAe,aAAW,aAAzC,SACE,oBAAIA,UAAU,aAAd,SACGyI,EAAYlG,KAAI,SAAC9B,EAAOmF,GACvB,IAAMgE,EAAanJ,EAAMiI,MAAuB,KAAfjI,EAAMiI,KACvC,OACE,oBACE1I,UAAS,0BAAqB4J,EAAa,SAAW,IADxD,SAIGA,EACC,cAAC,IAAD,CAAMC,GAAIpJ,EAAMiI,KAAhB,SAAuBjI,EAAM2C,OAE7B3C,EAAM2C,MALHwC,UAwBnB+D,EAAWxJ,aAAe,CACxBsI,YAAa,CACX,CACErF,KAAM,YACNsF,KAAM,gBAKGiB,O","file":"static/js/21.6876c82d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./InputLabel.scss\";\n\nfunction InputLabel(props) {\n  return (\n    <label htmlFor={props.inputId} className={props.className}>\n      {props.labelText}{\" \"}\n      {props.isRequired && <span className=\"text-danger\">*</span>}\n    </label>\n  );\n}\n\nInputLabel.propTypes = {\n  inputId: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  labelText: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool.isRequired\n};\n\nInputLabel.defaultProps = {\n  className: \"form-label\",\n  isRequired: false,\n  labelText: \"\",\n};\n\nexport default InputLabel;\n","import moment from \"moment\";\n\nexport const utcToLocalTime = (\n  dateTimeString,\n  format = \"MM-DD-YYYY h:mm A\"\n) => {\n  return (dateTimeString ? moment(dateTimeString) : moment()).format(format);\n};\n\nexport const localToUtcTime = (\n  dateTimeString,\n  format = \"MM-DD-YYYY h:mm A\"\n) => {\n  return (dateTimeString ? moment(dateTimeString) : moment()).utc().format(format);\n};\n","import validator from \"validator\";\r\n\r\nconst validatorRule = (value, validationKeyword) => {\r\n  let validation = { status: true, message: \"\" };\r\n  switch (true) {\r\n    case /required/i.test(validationKeyword):\r\n      validation.status = !validator.isEmpty(value, {\r\n        ignore_whitespace: true,\r\n      });\r\n      validation.message =\r\n        validation.status === false ? \"The value is required!\" : \"\";\r\n      break;\r\n    case /float/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isFloat(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be a float!\" : \"\";\r\n      }\r\n      break;\r\n    case /email/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isEmail(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be an Email!\" : \"\";\r\n      }\r\n      break;\r\n    case /alpha/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlpha(value, \"en-US\", { ignore: \" \" });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Alphabetic!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /alphanumeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlphanumeric(value, \"en-US\", {\r\n          ignore: \" \",\r\n        });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be AlphaNumeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /numeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isNumeric(value);\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Numeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /equals:*/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        const valData = validationKeyword.split(\":\");\r\n        validation.status = validator.equals(value, valData[2]);\r\n        validation.message =\r\n          validation.status === false\r\n            ? `The value needs to be same as ${valData[1]}!`\r\n            : \"\";\r\n      }\r\n      break;\r\n    default:\r\n      validation.status = true;\r\n      validation.message = \"\";\r\n      break;\r\n  }\r\n  return validation;\r\n};\r\n\r\nexport const validate = (inputvalue, validationRules = []) => {\r\n  const validationResult = {\r\n    status: true,\r\n    message: \"\",\r\n  };\r\n  validationRules.forEach((validationRule) => {\r\n    const runningValidation = validatorRule(inputvalue, validationRule);\r\n    validationResult.status =\r\n      validationResult.status && runningValidation.status;\r\n    validationResult.message += \" \" + runningValidation.message;\r\n    validationResult.message = validationResult.message.trim();\r\n  });\r\n  return validationResult;\r\n};\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Table.scss\";\n\nfunction Table({ header, data }) {\n  return (\n    <div className=\"table-responsive\">\n      <table className=\"table m-0\">\n        <thead>\n          <tr>\n            <th className=\"text-center\">#</th>\n            {header.length > 0\n              ? header.map((element, i) => <th className=\"text-center\" key={i}>{element}</th>)\n              : \"\"}\n          </tr>\n        </thead>\n        <tbody>\n          {data.length === 0 ? (\n            <tr>\n              <td colSpan={1 + header.length} className=\"text-center\">\n                No Record found\n              </td>\n            </tr>\n          ) : (\n            data.map((element, i) => (\n              <tr key={i}>\n                <td className=\"text-center\">{i + 1}</td>\n                {Object.keys(element).map((subElement, subI) => (\n                  <td className=\"text-center\" key={subI}>{element[subElement]}</td>\n                ))}\n              </tr>\n            ))\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nTable.propTypes = {\n  header: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n};\n\nexport default Table;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./TextInput.scss\";\nimport InputLabel from \"../inputLabel/InputLabel\";\nimport { validate } from \"../../../utils/validationHelper\";\n\nfunction TextInput(props) {\n  const _validate = (value) => {\n    const validationData = validate(value || \"\", props.validations);\n    if (validationData.status === false) {\n      props._handleFormValidation(props.name, validationData);\n    } else {\n      props._handleFormValidation(props.name, null);\n    }\n  };\n\n  // Remove if Validation causes issue\n  useEffect(() => {\n    _validate();\n  }, []);\n\n  return (\n    <div className=\"m-2\">\n      <InputLabel\n        inputId={props.id}\n        className={props.labelClassName}\n        labelText={props.placeholder}\n        isRequired={props.isRequired}\n      />\n      {props.type === \"textarea\" && (\n        <textarea\n          id={props.id}\n          className={`${props.inputClassName} ${\n            props.formValidationData[props.name] &&\n            props.formValidationData[props.name].status === false &&\n            \"is-invalid\"\n          }`}\n          rows=\"3\"\n          placeholder={props.placeholder}\n          name={props.name}\n          value={props.value}\n          onChange={props.onChange}\n          onBlur={(e) => _validate(e.currentTarget.value)}\n        />\n      )}\n\n      {[\"textarea\"].indexOf(props.type) === -1 && (\n        <input\n          id={props.id}\n          className={`${props.inputClassName} ${\n            props.formValidationData[props.name] &&\n            props.formValidationData[props.name].status === false &&\n            \"is-invalid\"\n          }`}\n          type={props.type}\n          placeholder={props.placeholder}\n          name={props.name}\n          value={props.value}\n          onChange={props.onChange}\n          onBlur={(e) => _validate(e.currentTarget.value)}\n        />\n      )}\n\n      {props.formValidationData[props.name] &&\n        props.formValidationData[props.name].status === false && (\n          <div className=\"invalid-feedback\">\n            {props.formValidationData[props.name].message}\n          </div>\n        )}\n    </div>\n  );\n}\n\nTextInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  labelClassName: PropTypes.string.isRequired,\n  inputClassName: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  validations: PropTypes.array,\n  onChange: PropTypes.func.isRequired,\n};\n\nTextInput.defaultProps = {\n  labelClassName: \"form-label\",\n  inputClassName: \"form-control\",\n  isRequired: false,\n  validations: [],\n  value: \"\",\n  onChange: () => {},\n};\n\nexport default TextInput;\n","import React, { useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { unitMetric } from \"../../../../../../utils/appConstants\";\nimport Table from \"../../../../../common/table/Table\";\n\nfunction RawMaterialForm({\n  formData,\n  listData,\n  _handleOnChange,\n  _addNewRawMaterial,\n  _handleRemoveBtnClick,\n  _fetchAllRawMaterials,\n}) {\n  const [fdDefVal, setFdDefVal] = useState(1000);\n\n  const _checkFolialDrenche = () =>\n    [0, 2].indexOf(parseInt(formData.method)) > -1;\n\n  const _checkManual = () => parseInt(formData.method) === 1;\n\n  const _calculateQtyTree = (rawMaterialData) => {\n    return rawMaterialData.quantity || 0;\n  };\n\n  const _getRemaining = () => {\n    let remainingTotal = 0;\n    if (formData.rawMaterials && formData.rawMaterials.length > 0) {\n      for (let i = 1; i < formData.rawMaterials.length; i++) {\n        remainingTotal += parseFloat(formData.rawMaterials[i].quantity) || 0;\n      }\n    }\n    return remainingTotal;\n  };\n\n  useEffect(() => {\n    if (_checkFolialDrenche() && formData.rawMaterials && formData.rawMaterials.length > 0) {\n      let remainingTotal = 0;\n      for (let i = 0; i < formData.rawMaterials.length; i++) {\n        remainingTotal += parseFloat(formData.rawMaterials[i].quantity) || 0;\n      }\n      setFdDefVal(remainingTotal);\n    }\n  });\n\n  return (\n    <div className=\"mb-3\">\n      <div className=\"row\">\n        <div className=\"col-2 border border-1 rounded\">\n          <h6 className={`text-center`}>Raw Materials</h6>\n          <ul className=\"list-group\">\n            <li className=\"list-group-item\">\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                onChange={(e) => _fetchAllRawMaterials(e.currentTarget.value)}\n              />\n            </li>\n            {listData\n              .filter((material) => {\n                let findFlag = false;\n                formData.rawMaterials &&\n                  formData.rawMaterials.forEach((fValue) => {\n                    if (fValue.rawMaterialId === material.id) {\n                      findFlag = true;\n                    }\n                  });\n                return !findFlag;\n              })\n              .map((material, index) => (\n                <li\n                  key={index}\n                  onClick={(e) => _addNewRawMaterial({ material }, e)}\n                  className=\"list-group-item list-group-item-action\"\n                >\n                  {material.name}\n                </li>\n              ))}\n          </ul>\n        </div>\n        <div className=\"col-10 border border-2 rounded\">\n          <h6 className={`text-center`}>Amount to Dose</h6>\n          <Table\n            data={\n              formData.rawMaterials &&\n              formData.rawMaterials.map((rawMaterial, index) => ({\n                name: (\n                  <>\n                    <input\n                      type=\"hidden\"\n                      name=\"rawMaterial\"\n                      value={rawMaterial.id}\n                      onChange={(e) =>\n                        _handleOnChange(e, [\"rawMaterials\", index])\n                      }\n                    />\n                    {rawMaterial.rawMaterial.name}\n                  </>\n                ),\n                quantity: (\n                  <input\n                    type=\"number\"\n                    name=\"quantity\"\n                    value={\n                      _checkFolialDrenche() && index === 0\n                        ? fdDefVal\n                        : rawMaterial.quantity\n                    }\n                    onChange={(e) => {\n                      if (_checkFolialDrenche() && index === 0) {\n                        setFdDefVal(parseFloat(e.currentTarget.value));\n                        _handleOnChange(\n                          {\n                            currentTarget: {\n                              name: \"quantity\",\n                              value:\n                                parseFloat(e.currentTarget.value) -\n                                _getRemaining(),\n                            },\n                          },\n                          [\"rawMaterials\", index]\n                        );\n                      } else if (_checkFolialDrenche() && index > 0) {\n                        _handleOnChange(e, [\"rawMaterials\", index]);\n                        _handleOnChange(\n                          {\n                            currentTarget: {\n                              name: \"quantity\",\n                              value:\n                                parseFloat(fdDefVal) -\n                                (parseFloat(_getRemaining()) -\n                                  parseFloat(rawMaterial.quantity || 0) +\n                                  parseFloat(e.currentTarget.value || 0)),\n                            },\n                          },\n                          [\"rawMaterials\", 0]\n                        );\n                      } else {\n                        _handleOnChange(e, [\"rawMaterials\", index]);\n                      }\n                    }}\n                  />\n                ),\n                unit: (\n                  <select\n                    name=\"unit\"\n                    value={rawMaterial.unit}\n                    onChange={(e) =>\n                      _handleOnChange(e, [\"rawMaterials\", index])\n                    }\n                    readOnly={true}\n                    disabled={true}\n                  >\n                    {Object.keys(unitMetric).map((metric, index) => (\n                      <option key={index} value={metric}>\n                        {unitMetric[metric]}\n                      </option>\n                    ))}\n                  </select>\n                ),\n                ...(_checkManual()\n                  ? {\n                      qtyTree: `${_calculateQtyTree(rawMaterial)} ${\n                        unitMetric[rawMaterial.unit]\n                      }`,\n                    }\n                  : {}),\n                ...(_checkFolialDrenche()\n                  ? {\n                      qtyLts:\n                        index !== 0\n                          ? `${_calculateQtyTree(rawMaterial)} ${\n                              unitMetric[rawMaterial.unit]\n                            }`\n                          : \"\",\n                      total:\n                        index === 0 &&\n                        `${rawMaterial.quantity} ${\n                          unitMetric[rawMaterial.unit]\n                        }`,\n                    }\n                  : {}),\n                delete: ((_checkFolialDrenche() && index !== 0) ||\n                  _checkManual()) && (\n                  <FontAwesomeIcon\n                    icon={faTrash}\n                    onClick={(e) => _handleRemoveBtnClick(index, e)}\n                  />\n                ),\n              }))\n            }\n            header={[\n              \"Material\",\n              \"Quantity\",\n              \"Unit\",\n              ...(_checkManual() ? [\"Qty x Tree\"] : []),\n              ...(_checkFolialDrenche() ? [\"Qty x Lts.\", \"Total\"] : []),\n              \"\",\n            ]}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RawMaterialForm;\n","import React from \"react\";\nimport { methods, statuses } from \"../../../../utils/appConstants\";\nimport RawMaterialForm from \"../linked/rawMaterial/form/Form\";\nimport { utcToLocalTime } from \"../../../../utils/timeHelper\";\nimport TextInput from \"../../../common/textInput/TextInput\";\n\nfunction AgriculturalPracticeForm({\n  formData,\n  rawMaterialList,\n  _handleOnChange,\n  _addNewRawMaterial,\n  _removeRawMaterial,\n  _fetchAllRawMaterials,\n  defaultFolialDrencheData,\n  formValidationData,\n_handleFormValidation\n}) {\n  return (\n    <>\n      {formData.id ? <input type=\"hidden\" value={formData.id} /> : \"\"}\n      <div className=\"row mb-3\">\n        <div className=\"col-md-6\">\n        <TextInput\n            id=\"input1\"\n            type=\"text\"\n            placeholder=\"Formulation Name\"\n            name=\"formulationName\"\n            isRequired={true}\n            value={formData.formulationName}\n            onChange={_handleOnChange}\n            validations={[\"required\", \"alpha\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n\n        <div className=\"col-md-3\">\n        <TextInput\n            id=\"input2\"\n            type=\"date\"\n            placeholder=\"Schedule Date\"\n            name=\"scheduledDate\"\n            isRequired={true}\n            value={utcToLocalTime(formData.scheduledDate, \"YYYY-MM-DD\")}\n            onChange={_handleOnChange}\n            validations={[\"required\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n\n        <div className=\"col-md-3\">\n        <TextInput\n            id=\"input3\"\n            type=\"text\"\n            placeholder=\"Days to do\"\n            name=\"daysToDo\"\n            isRequired={true}\n            value={formData.daysToDo}\n            onChange={_handleOnChange}\n            validations={[\"required\", \"numeric\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n      </div>\n\n      <div className=\"row mb-3\">\n        <div className=\"col-md-6\">\n          <label htmlFor=\"input8\" className=\"form-label\">\n            Method <span className=\"text-danger\">*</span>\n          </label>\n          <select\n            id=\"input8\"\n            className=\"form-select\"\n            name=\"method\"\n            onChange={(e) => {\n              _handleOnChange(e);\n              _handleOnChange({\n                currentTarget: { name: \"rawMaterials\", value: [] },\n              });\n              let unit = \"g\";\n              if ([0, 2].indexOf(parseInt(e.currentTarget.value)) > -1) {\n                unit = \"cc\";\n                _addNewRawMaterial(\n                  { material: defaultFolialDrencheData, quantity: 1000 },\n                  null\n                );\n              }\n              _fetchAllRawMaterials(\"\", unit);\n            }}\n            value={parseInt(formData.method)}\n          >\n            {Object.keys(methods).map((method, index) => (\n              <option key={index} value={method}>\n                {methods[method]}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      <div className=\"mb-3\">\n        <TextInput\n            id=\"input11\"\n            type=\"textarea\"\n            placeholder=\"Observations\"\n            name=\"observations\"\n            isRequired={true}\n            value={formData.observations}\n            onChange={_handleOnChange}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"input4\" className=\"form-label\">\n          Status <span className=\"text-danger\">*</span>\n        </label>\n        <select\n          id=\"input4\"\n          className=\"form-select\"\n          name=\"status\"\n          onChange={_handleOnChange}\n          value={parseInt(formData.status)}\n        >\n          {Object.keys(statuses).map((status, index) => (\n            <option key={index} value={status}>\n              {statuses[status]}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"mb-3\">\n        <div className=\"card\">\n          <div className=\"card-header border-transparent\">\n            <h4 className=\"m-0\">Raw Material</h4>\n          </div>\n          <div className=\"card-body\">\n            <RawMaterialForm\n              formData={formData}\n              listData={rawMaterialList}\n              _handleOnChange={_handleOnChange}\n              _addNewRawMaterial={_addNewRawMaterial}\n              _handleRemoveBtnClick={_removeRawMaterial}\n              _fetchAllRawMaterials={_fetchAllRawMaterials}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default AgriculturalPracticeForm;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./Edit.scss\";\nimport Breadcrumb from \"../../../components/common/breadcrumb/Breadcrumb\";\nimport {\n  addNewRawMaterial,\n  fetchAllRawMaterials,\n  handleFormDataChange,\n  handleFormValidation,\n  initFormData,\n  readData,\n  removeRawMaterial,\n  selectAgriculturalPractice,\n  updateData,\n} from \"../../../store/redux/Page/AgriculturalPractice\";\nimport AgriculturalPracticeForm from \"../../../components/pageSpecific/agriculturalPractices/form/Form\";\nimport { useParams } from \"react-router-dom\";\nimport { defaultFolialDrencheId } from \"../../../utils/appConstants\";\n\nfunction AgriculturalPracticeEdit() {\n  const [firstLoad, setFirstLoad] = useState(true);\n  const params = useParams();\n  const store = useSelector(selectAgriculturalPractice);\n  const dispatch = useDispatch();\n  const pageName = \"Edit agricultural practice\";\n  const breadCrumbs = [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n    {\n      name: \"Agricultural Practices\",\n      link: \"/agricultural-practices\",\n    },\n    {\n      name: \"Edit\",\n      link: \"\",\n    },\n  ];\n\n  const _addNewRawMaterial = (material, e) => {\n    dispatch(addNewRawMaterial(material));\n  };\n\n  const _removeRawMaterial = (index, e) => {\n    dispatch(removeRawMaterial(index));\n  };\n\n  const _fetchAllRawMaterials = (keyword = \"\", unit = \"cc\") => {\n    dispatch(\n      fetchAllRawMaterials({ ...store.rawMaterialsFormData, keyword, unit })\n    );\n  };\n\n  const _handleOnChange = (e, customPath) => {\n    let keyName = e.currentTarget.name;\n    if (Array.isArray(customPath) && customPath.length > 0)\n      keyName = [...customPath, e.currentTarget.name];\n\n    dispatch(\n      handleFormDataChange({ key: keyName, value: e.currentTarget.value })\n    );\n  };\n\n  const _handleFormValidation = (key, value) => {\n    dispatch(\n      handleFormValidation({\n        key,\n        value,\n      })\n    );\n  };\n\n  const _handleFormSubmit = (e) => {\n    e.preventDefault();\n    dispatch(updateData({ id: params.id, ...store.formData }));\n  };\n\n  useEffect(() => {\n    document.title = `${process.env.REACT_APP_NAME} | ${pageName}`;\n    dispatch(\n      initFormData({\n        id: defaultFolialDrencheId,\n        actionType: \"loadDefaultFolialDrenche\",\n      })\n    );\n    _fetchAllRawMaterials();\n    dispatch(readData({ id: params.id }));\n  }, []);\n\n  useEffect(() => {\n    if (store.formData.formulationName !== \"\" && firstLoad) {\n      _fetchAllRawMaterials(\n        \"\",\n        parseInt(store.formData.method) === 1 ? \"g\" : \"cc\"\n      );\n      setFirstLoad(false);\n    }\n  });\n\n  return (\n    <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n      <div className=\"col-12 p-0 content-wrapper\">\n        <div className=\"content-header\">\n          <div className=\"container-fluid\">\n            <div className=\"row mb-2\">\n              <div className=\"col-sm-6\">\n                <h1 className=\"m-0\">{pageName}</h1>\n              </div>\n              <div className=\"col-sm-6\">\n                <Breadcrumb breadCrumbs={breadCrumbs} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <section className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n                  <div className=\"card-header border-transparent\">\n                    <div className={\"row\"}>&nbsp;</div>\n                  </div>\n\n                  <form name={`${pageName}Create`} onSubmit={_handleFormSubmit}>\n                    <div className=\"card-body\">\n                      <AgriculturalPracticeForm\n                        formData={store.formData}\n                        rawMaterialList={store.rawMaterials}\n                        _handleOnChange={_handleOnChange}\n                        _addNewRawMaterial={_addNewRawMaterial}\n                        _removeRawMaterial={_removeRawMaterial}\n                        _fetchAllRawMaterials={_fetchAllRawMaterials}\n                        defaultFolialDrencheData={store.defaultFolialDrenche}\n                        formValidationData={store.formValidation}\n                        _handleFormValidation={_handleFormValidation}\n                      />\n                    </div>\n\n                    <div className=\"card-footer clearfix\">\n                      <button\n                        className=\"btn btn-sm btn-app float-end\"\n                        disabled={\n                          Object.keys(store.formValidation).length > 0 ||\n                          store.loading === true\n                        }\n                      >\n                        {store.loading === true && (\n                          <span\n                            className=\"spinner-border spinner-border-sm\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                          ></span>\n                        )}{\" \"}\n                        Save\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default AgriculturalPracticeEdit;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Breadcrumb.scss\";\nimport { Link } from \"react-router-dom\";\n\nfunction Breadcrumb({ breadCrumbs }) {\n  return (\n    <nav className=\"float-sm-end\" aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        {breadCrumbs.map((value, index) => {\n          const activeLink = value.link && value.link !== \"\";\n          return (\n            <li\n              className={`breadcrumb-item ${activeLink ? \"active\" : \"\"}`}\n              key={index}\n            >\n              {activeLink ? (\n                <Link to={value.link}>{value.name}</Link>\n              ) : (\n                value.name\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n}\n\nBreadcrumb.propTypes = {\n  breadCrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      link: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nBreadcrumb.defaultProps = {\n  breadCrumbs: [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n  ],\n};\n\nexport default Breadcrumb;\n"],"sourceRoot":""}