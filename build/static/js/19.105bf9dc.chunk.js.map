{"version":3,"sources":["components/common/inputLabel/InputLabel.js","utils/validationHelper.js","components/common/table/Table.js","components/common/select/Select.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","components/pageSpecific/workPlans/linked/rawMaterial/form/Form.js","components/pageSpecific/workPlans/form/Form.js","pages/workPlans/edit/Edit.js","components/common/breadcrumb/Breadcrumb.js"],"names":["InputLabel","props","htmlFor","inputId","className","labelText","isRequired","defaultProps","validatorRule","value","validationKeyword","validation","status","message","test","validator","isEmpty","ignore_whitespace","isFloat","isEmail","isAlpha","ignore","isAlphanumeric","isNumeric","valData","split","equals","validate","inputvalue","validationRules","validationResult","forEach","validationRule","runningValidation","trim","Table","header","data","length","map","element","i","colSpan","Object","keys","subElement","subI","SelectDynamic","useState","selectValue","setSelectValue","_validate","validationData","validations","_handleFormValidation","name","useEffect","hideLabel","id","placeholder","classNamePrefix","styles","control","WebkitAlignItems","WebkitBoxAlign","msFlexAlign","alignItems","backgroundColor","borderColor","formValidationData","borderRadius","borderStyle","borderWidth","cursor","display","WebkitBoxFlexWrap","WebkitFlexWrap","msFlexWrap","flexWrap","WebkitBoxPack","WebkitJustifyContent","justifyContent","minHeight","outline","position","WebkitTransition","transition","boxiSizing","defaultValue","isLoading","isDisabled","disabled","isSearchable","isMulti","isMultiple","options","onInputChange","inputValue","onChange","option","Array","isArray","_","chain","o","currentTarget","onBlur","e","_objectWithoutProperties","source","excluded","key","target","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call","_typeof","obj","Symbol","iterator","constructor","RawMaterialForm","formData","_handleOnChange","_checkFolialDrenche","_checkManual","rawMaterials","rawMaterial","index","quantity","unitMetric","unit","quantityAvailable","totalMethodBased","workPlanMethods","parseInt","methodId","totalunit","totalTree","totalTrees","zone","treeCount","changedQuantity","type","totalQ","parseFloat","Math","floor","_calculateTotalBasedOnMethod","actualName","amountPerTree","WorkPlanForm","collaborators","_fetchAllCollaborators","zones","_fetchAllZones","sectors","_fetchAllSectors","agriculturalPractices","_fetchAllAgriculturalPractices","agriculturalPractice","method","Select","collaborator","label","checked","selectRegion","sector","formulationName","aP","rM","push","rawMaterialId","workPlanMethod","methods","WorkPlanEdit","params","useParams","store","useSelector","selectWorkPlan","dispatch","useDispatch","pageName","keyword","fetchAllCollaborators","collaboratorsFormData","fetchAllZones","zonesFormData","fetchAllSectors","sectorsFormData","fetchAllAgriculturalPractices","agriculturalPracticesFormData","document","title","process","initFormData","readData","breadCrumbs","link","onSubmit","preventDefault","updateData","customPath","keyName","newData","handleFormDataChange","formValidation","handleFormValidation","loading","role","Breadcrumb","activeLink","to"],"mappings":"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","file":"static/js/19.105bf9dc.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./InputLabel.scss\";\n\nfunction InputLabel(props) {\n  return (\n    <label htmlFor={props.inputId} className={props.className}>\n      {props.labelText}{\" \"}\n      {props.isRequired && <span className=\"text-danger\">*</span>}\n    </label>\n  );\n}\n\nInputLabel.propTypes = {\n  inputId: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  labelText: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool.isRequired\n};\n\nInputLabel.defaultProps = {\n  className: \"form-label\",\n  isRequired: false,\n  labelText: \"\",\n};\n\nexport default InputLabel;\n","import validator from \"validator\";\r\n\r\nconst validatorRule = (value, validationKeyword) => {\r\n  let validation = { status: true, message: \"\" };\r\n  switch (true) {\r\n    case /required/i.test(validationKeyword):\r\n      validation.status = !validator.isEmpty(value, {\r\n        ignore_whitespace: true,\r\n      });\r\n      validation.message =\r\n        validation.status === false ? \"The value is required!\" : \"\";\r\n      break;\r\n    case /float/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isFloat(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be a float!\" : \"\";\r\n      }\r\n      break;\r\n    case /email/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isEmail(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be an Email!\" : \"\";\r\n      }\r\n      break;\r\n    case /alpha/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlpha(value, \"en-US\", { ignore: \" \" });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Alphabetic!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /alphanumeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlphanumeric(value, \"en-US\", {\r\n          ignore: \" \",\r\n        });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be AlphaNumeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /numeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isNumeric(value);\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Numeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /equals:*/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        const valData = validationKeyword.split(\":\");\r\n        validation.status = validator.equals(value, valData[2]);\r\n        validation.message =\r\n          validation.status === false\r\n            ? `The value needs to be same as ${valData[1]}!`\r\n            : \"\";\r\n      }\r\n      break;\r\n    default:\r\n      validation.status = true;\r\n      validation.message = \"\";\r\n      break;\r\n  }\r\n  return validation;\r\n};\r\n\r\nexport const validate = (inputvalue, validationRules = []) => {\r\n  const validationResult = {\r\n    status: true,\r\n    message: \"\",\r\n  };\r\n  validationRules.forEach((validationRule) => {\r\n    const runningValidation = validatorRule(inputvalue, validationRule);\r\n    validationResult.status =\r\n      validationResult.status && runningValidation.status;\r\n    validationResult.message += \" \" + runningValidation.message;\r\n    validationResult.message = validationResult.message.trim();\r\n  });\r\n  return validationResult;\r\n};\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Table.scss\";\n\nfunction Table({ header, data }) {\n  return (\n    <div className=\"table-responsive\">\n      <table className=\"table m-0\">\n        <thead>\n          <tr>\n            <th className=\"text-center\">#</th>\n            {header.length > 0\n              ? header.map((element, i) => <th className=\"text-center\" key={i}>{element}</th>)\n              : \"\"}\n          </tr>\n        </thead>\n        <tbody>\n          {data.length === 0 ? (\n            <tr>\n              <td colSpan={1 + header.length} className=\"text-center\">\n                No Record found\n              </td>\n            </tr>\n          ) : (\n            data.map((element, i) => (\n              <tr key={i}>\n                <td className=\"text-center\">{i + 1}</td>\n                {Object.keys(element).map((subElement, subI) => (\n                  <td className=\"text-center\" key={subI}>{element[subElement]}</td>\n                ))}\n              </tr>\n            ))\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nTable.propTypes = {\n  header: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n};\n\nexport default Table;\n","import React, { useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nimport Select from \"react-select\";\nimport PropTypes from \"prop-types\";\nimport \"./Select.scss\";\n\nimport InputLabel from \"../inputLabel/InputLabel\";\nimport { validate } from \"../../../utils/validationHelper\";\n\nfunction SelectDynamic(props) {\n  const [selectValue, setSelectValue] = useState(null);\n\n  const _validate = (value) => {\n    const validationData = validate(value || \"\", props.validations);\n    if (validationData.status === false) {\n      props._handleFormValidation(props.name, validationData);\n    } else {\n      props._handleFormValidation(props.name, null);\n    }\n  };\n\n  // Remove if Validation causes issue\n  useEffect(() => {\n    _validate();\n  }, []);\n\n  useEffect(() => {\n    if (selectValue === null) {\n      setSelectValue(props.value);\n    }\n  }, [props.value]);\n\n  return (\n    <>\n      {!props.hideLabel && (\n        <InputLabel\n          inputId={props.id}\n          labelText={props.placeholder}\n          isRequired={props.isRequired}\n        />\n      )}\n      <Select\n        id={props.id}\n        className={`${props.className || \"\"} basic-single`}\n        classNamePrefix=\"select\"\n        styles={{\n          control: () => ({\n            WebkitAlignItems: \"center\",\n            WebkitBoxAlign: \"center\",\n            msFlexAlign: \"center\",\n            alignItems: \"center\",\n            backgroundColor: \"hsl(0, 0%, 100%)\",\n            borderColor:\n              props.formValidationData[props.name] &&\n              props.formValidationData[props.name].status === false\n                ? \"#dc3545\"\n                : \"hsl(0, 0%, 80%)\",\n            borderRadius: \"4px\",\n            borderStyle: \"solid\",\n            borderWidth: \"1px\",\n            cursor: \"default\",\n            display: [\"-webkit-box\", \"-webkit-flex\", \"-ms-flexbox\", \"flex\"],\n            WebkitBoxFlexWrap: \"wrap\",\n            WebkitFlexWrap: \"wrap\",\n            msFlexWrap: \"wrap\",\n            flexWrap: \"wrap\",\n            WebkitBoxPack: \"justify\",\n            WebkitJustifyContent: \"space-between\",\n            justifyContent: \"space-between\",\n            minHeight: \"38px\",\n            outline: \"0 !important\",\n            position: \"relative\",\n            WebkitTransition: \"all 100ms\",\n            transition: \"all 100ms\",\n            boxiSizing: \"border-box\",\n          }),\n        }}\n        defaultValue={props.defaultValue}\n        value={selectValue}\n        isLoading={false}\n        isDisabled={props.disabled ?? false}\n        isSearchable={true}\n        isMulti={props.isMultiple}\n        name={props.name}\n        options={props.options}\n        onInputChange={(inputValue) => {\n          props.onInputChange(inputValue);\n        }}\n        onChange={(option, element) => {\n          let value = \"\";\n          if (Array.isArray(option) && option.length > 0) {\n            value = _.chain(option)\n              .map((o) => o.value)\n              .value();\n          } else {\n            value = option.value;\n          }\n          setSelectValue(option);\n          return props.onChange({\n            currentTarget: { name: element.name, value },\n          });\n        }}\n        onBlur={(e) => _validate(e.currentTarget.value)}\n      />\n      {props.formValidationData[props.name] &&\n        props.formValidationData[props.name].status === false && (\n          <div className=\"invalid-feedback d-block\">\n            {props.formValidationData[props.name].message}\n          </div>\n        )}\n    </>\n  );\n}\n\nSelectDynamic.propTypes = {\n  id: PropTypes.string,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  isMultiple: PropTypes.bool,\n  isRequired: PropTypes.bool,\n  disabled: PropTypes.bool,\n  hideLabel: PropTypes.bool,\n  defaultValue: PropTypes.object,\n  onInputChange: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  validations: PropTypes.array,\n  formValidationData: PropTypes.object,\n  _handleFormValidation: PropTypes.func,\n};\n\nSelectDynamic.defaultProps = {\n  isMultiple: false,\n  isRequired: false,\n  hideLabel: false,\n  validations: [],\n  formValidationData: {},\n  _handleFormValidation: () => {},\n};\n\nexport default SelectDynamic;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import React from \"react\";\nimport Table from \"../../../../../common/table/Table\";\nimport {\n  workPlanMethods,\n  unitMetric,\n} from \"../../../../../../utils/appConstants\";\n\nfunction RawMaterialForm({\n  formData,\n  _handleOnChange,\n  _checkFolialDrenche,\n  _checkManual,\n}) {\n  const _getAmountPerTree = () => {\n    let amountPerTree = 1;\n    if (formData.amountPerTree && formData.amountPerTree !== 0) {\n      amountPerTree = parseFloat(formData.amountPerTree);\n    }\n    return amountPerTree;\n  };\n\n  const _calculateTotalBasedOnMethod = () => {\n    let totalQ = 0;\n    formData.rawMaterials.forEach((rawMaterial) => {\n      totalQ +=\n        parseFloat(rawMaterial.quantity / 1000) *\n        parseFloat(workPlanMethods[parseInt(formData.methodId)].value / 1000);\n    });\n\n    return totalQ === 0 ? 0 : Math.floor(totalQ);\n  };\n\n  return (\n    <div className=\"card mb-3\">\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"border border-2 rounded\">\n            <Table\n              data={\n                formData.rawMaterials && [\n                  ...formData.rawMaterials.map((rawMaterial, index) => ({\n                    name: rawMaterial.rawMaterial.name,\n                    quantity: `${rawMaterial.quantity} ${\n                      unitMetric[rawMaterial.unit]\n                    }`,\n                    quantityAvailable:\n                      (_checkFolialDrenche() && index !== 0) ||\n                      _checkManual() ? (\n                        <span\n                          className={\n                            rawMaterial.rawMaterial.quantityAvailable <\n                            rawMaterial.quantity\n                              ? \"text-danger\"\n                              : \"\"\n                          }\n                        >{`${rawMaterial.rawMaterial.quantityAvailable} ${\n                          unitMetric[rawMaterial.unit]\n                        }`}</span>\n                      ) : (\n                        \"\"\n                      ),\n                    ...(_checkFolialDrenche()\n                      ? {\n                          totalMethodBased: `${\n                            (rawMaterial.quantity / 1000) *\n                            (workPlanMethods[parseInt(formData.methodId)].value / 1000)\n                          }` + ' ' + workPlanMethods[parseInt(formData.methodId)].totalunit,\n                        }\n                      : {}),\n                    ...(_checkManual()\n                      ? {\n                          totalTree: `${\n                            rawMaterial.quantity *\n                            (formData.id\n                              ? formData.totalTrees\n                              : formData.zone.treeCount)\n                          } ${unitMetric[rawMaterial.unit]}`,\n                        }\n                      : {}),\n                    changedQuantity:\n                      (_checkFolialDrenche() && index !== 0) ||\n                      _checkManual() ? (\n                        <input\n                          type=\"text\"\n                          name=\"changedQuantity\"\n                          value={rawMaterial.changedQuantity || \"\"}\n                          onChange={(e) =>\n                            _handleOnChange(e, [\"rawMaterials\", index])\n                          }\n                        />\n                      ) : (\n                        \"\"\n                      ),\n                  })),\n                  ...(_checkFolialDrenche()\n                    ? [\n                        {\n                          name: \"\",\n                          quantity: \"\",\n                          quantityAvailable: \"Total:\",\n                          totalMethodBased: `${_calculateTotalBasedOnMethod()} ${\n                            unitMetric[\"totalunit\"]\n                          }`,\n                          changedQuantity: \"\",\n                        },\n                      ]\n                    : []),\n                ]\n              }\n              header={[\n                \"Material\",\n                \"Quantity\",\n                \"Quantity Available\",\n                ...(_checkFolialDrenche()\n                  ? [\n                      `Total X ${\n                        workPlanMethods[parseInt(formData.methodId)].actualName\n                      }`,\n                    ]\n                  : []),\n                ...(_checkManual() ? [\"Total\"] : []),\n                \"Change Quantity\",\n              ]}\n            />\n            {_checkFolialDrenche() && (\n              <>\n              <h4 className=\"text-secondary text-center pt-2\">\n                You will need to prepare{\" \"}\n                {(\n                  (formData.totalTrees * formData.amountPerTree) /\n                    (workPlanMethods[parseInt(formData.methodId)].value / 1000)\n                )}{\" \"}\n                {workPlanMethods[parseInt(formData.methodId)].actualName} of{\" \"}\n                {workPlanMethods[parseInt(formData.methodId)].value / 1000} Lts\n                to cover{\" \"}\n                {formData.id ? formData.totalTrees : formData.zone.treeCount}{\" \"}\n                trees\n              </h4>\n\n              <h6 className=\"text-secondary text-center pt-2\">\n                ({formData.totalTrees} trees * {formData.amountPerTree} Lts ) / {workPlanMethods[parseInt(formData.methodId)].value / 1000} Lts  = {(formData.totalTrees * formData.amountPerTree) / (workPlanMethods[parseInt(formData.methodId)].value / 1000)} {workPlanMethods[parseInt(formData.methodId)].actualName}\n              </h6>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RawMaterialForm;\n","import React from \"react\";\nimport { methods, workPlanMethods } from \"../../../../utils/appConstants\";\nimport SelectDynamic from \"../../../common/select/Select\";\nimport RawMaterialForm from \"../linked/rawMaterial/form/Form.js\";\n\nfunction WorkPlanForm({\n  formData,\n  _handleOnChange,\n  collaborators,\n  _fetchAllCollaborators,\n  zones,\n  _fetchAllZones,\n  sectors,\n  _fetchAllSectors,\n  agriculturalPractices,\n  _fetchAllAgriculturalPractices,\n}) {\n  const _checkFolialDrenche = () =>\n    [0, 2].indexOf(parseInt(formData.agriculturalPractice.method)) > -1;\n\n  const _checkManual = () =>\n    parseInt(formData.agriculturalPractice.method) === 1;\n\n  return (\n    <>\n      {formData.id ? <input type=\"hidden\" value={formData.id} /> : \"\"}\n      <div className=\"mb-3\">\n        <label htmlFor=\"input2\" className=\"form-label\">\n          Collaborator <span className=\"text-danger\">*</span>\n        </label>\n        <SelectDynamic\n          id=\"input2\"\n          value={\n            formData.collaborator && formData.collaborator.id\n              ? {\n                  value: formData.collaborator.id,\n                  label: formData.collaborator.name,\n                }\n              : null\n          }\n          name=\"collaboratorId\"\n          options={collaborators.map((collaborator) => ({\n            value: collaborator.id,\n            label: collaborator.name,\n          }))}\n          onInputChange={_fetchAllCollaborators}\n          onChange={(e) => {\n            _handleOnChange(e);\n            _handleOnChange({\n              currentTarget: {\n                name: \"collaborator\",\n                value:\n                  collaborators[\n                    collaborators\n                      .map(function (e) {\n                        return e.id;\n                      })\n                      .indexOf(e.currentTarget.value)\n                  ],\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"\" className=\"form-label\">\n          Choose Zone/Sector <span className=\"text-danger\">*</span>\n        </label>\n        <div className=\"input-group pb-2\">\n          <div className=\"input-group-text\">\n            <input\n              className=\"form-check-input mt-0\"\n              type=\"radio\"\n              name=\"selectRegion\"\n              value=\"Z\"\n              aria-label=\"Zone\"\n              checked={formData.selectRegion === \"Z\"}\n              onChange={_handleOnChange}\n            />{\" \"}\n            &nbsp; Zone\n          </div>\n          <SelectDynamic\n            className=\"form-control\"\n            disabled={formData.selectRegion !== \"Z\"}\n            value={\n              formData.zone && formData.zone.id\n                ? {\n                    value: formData.zone.id,\n                    label: formData.zone.name,\n                  }\n                : null\n            }\n            name=\"zoneId\"\n            aria-label=\"Select a Zone\"\n            options={zones.map((zone) => ({\n              value: zone.id,\n              label: zone.name,\n            }))}\n            onInputChange={_fetchAllZones}\n            onChange={(e) => {\n              _handleOnChange(e);\n              _handleOnChange({\n                currentTarget: {\n                  name: \"zone\",\n                  value:\n                    zones[\n                      zones\n                        .map(function (e) {\n                          return e.id;\n                        })\n                        .indexOf(e.currentTarget.value)\n                    ],\n                },\n              });\n            }}\n          />\n        </div>\n        <div className=\"input-group pt-2\">\n          <div className=\"input-group-text\">\n            <input\n              className=\"form-check-input mt-0\"\n              type=\"radio\"\n              name=\"selectRegion\"\n              value=\"S\"\n              aria-label=\"Sector\"\n              checked={formData.selectRegion === \"S\"}\n              onChange={_handleOnChange}\n            />{\" \"}\n            &nbsp; Sector\n          </div>\n          <SelectDynamic\n            className=\"form-control\"\n            disabled={formData.selectRegion !== \"S\"}\n            value={\n              formData.sector && formData.sector.id\n                ? {\n                    value: formData.sector.id,\n                    label: formData.sector.name,\n                  }\n                : null\n            }\n            name=\"sectorId\"\n            aria-label=\"Select a Sector\"\n            options={sectors.map((sector) => ({\n              value: sector.id,\n              label: sector.name,\n            }))}\n            onInputChange={_fetchAllSectors}\n            onChange={(e) => {\n              _handleOnChange(e);\n              _handleOnChange({\n                currentTarget: {\n                  name: \"sector\",\n                  value:\n                    sectors[\n                      sectors\n                        .map(function (e) {\n                          return e.id;\n                        })\n                        .indexOf(e.currentTarget.value)\n                    ],\n                },\n              });\n            }}\n          />\n        </div>\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"input2\" className=\"form-label\">\n          Agricultural Practice <span className=\"text-danger\">*</span>\n        </label>\n        <SelectDynamic\n          id=\"input2\"\n          value={\n            formData.agriculturalPractice && formData.agriculturalPractice.id\n              ? {\n                  value: formData.agriculturalPractice.id,\n                  label: formData.agriculturalPractice.formulationName,\n                }\n              : null\n          }\n          name=\"agriculturalPracticeId\"\n          options={agriculturalPractices.map((agriculturalPractice) => ({\n            value: agriculturalPractice.id,\n            label: agriculturalPractice.formulationName,\n          }))}\n          onInputChange={_fetchAllAgriculturalPractices}\n          onChange={(e) => {\n            const aP =\n              agriculturalPractices[\n                agriculturalPractices\n                  .map(function (e) {\n                    return e.id;\n                  })\n                  .indexOf(e.currentTarget.value)\n              ];\n            const rM = [];\n            aP.rawMaterials.forEach((element) => {\n              rM.push({\n                rawMaterialId: element.rawMaterialId,\n                quantity: element.quantity,\n                unit: element.unit,\n                rawMaterial: element.rawMaterial,\n                changedQuantity: \"\",\n              });\n            });\n            _handleOnChange(e);\n            _handleOnChange({\n              currentTarget: {\n                name: \"methodId\",\n                value: 0,\n              },\n            });\n            _handleOnChange({\n              currentTarget: {\n                name: \"amountPerTree\",\n                value: 0,\n              },\n            });\n            _handleOnChange({\n              currentTarget: {\n                name: \"agriculturalPractice\",\n                value: aP,\n              },\n            });\n            _handleOnChange({\n              currentTarget: {\n                name: \"rawMaterials\",\n                value: rM,\n              },\n            });\n          }}\n        />\n      </div>\n\n      {_checkFolialDrenche() && (\n        <div className=\"row mb-3\">\n          <div className=\"col\">\n            <label htmlFor=\"input9\" className=\"form-label\">\n              Method <span className=\"text-danger\">*</span>\n            </label>\n            <select\n              id=\"input9\"\n              className=\"form-select\"\n              name=\"methodId\"\n              onChange={_handleOnChange}\n              value={parseInt(formData.methodId)}\n            >\n              {Object.keys(workPlanMethods).map((workPlanMethod, index) => (\n                <option key={index} value={workPlanMethod}>\n                  {workPlanMethods[workPlanMethod].name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"col\">\n            <label htmlFor=\"input10\" className=\"form-label\">\n              Amount Per Tree <span className=\"text-danger\">*</span>\n            </label>\n            <div className=\"input-group\">\n              <input\n                id=\"input10\"\n                className=\"form-control\"\n                name=\"amountPerTree\"\n                onChange={_handleOnChange}\n                value={formData.amountPerTree}\n              />\n              <div className=\"input-group-append\">\n                <span className=\"input-group-text\">Lts.</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {formData.agriculturalPractice &&\n        formData.zone &&\n        Object.keys(formData.agriculturalPractice).length > 0 &&\n        Object.keys(formData.zone).length > 0 && (\n          <div className=\"mb-3 card\">\n            <div className=\"card-header\">\n              <h6 className=\"fw-bold\">\n                DOSAGE :: {formData.agriculturalPractice.formulationName}\n              </h6>\n            </div>\n            <div className=\"card-body\">\n              <div className=\"row mb-3 text-center\">\n                <div className=\"col-3\">\n                  <span className=\"fw-bold\">Total Trees: </span>\n                  {formData.id ? formData.totalTrees : formData.zone.treeCount}\n                </div>\n                <div className=\"col-3\">\n                  <span className=\"fw-bold\">Method: </span>\n                  {methods[parseInt(formData.agriculturalPractice.method)]}\n                </div>\n                {_checkFolialDrenche() && (\n                  <div className=\"col-3\">\n                    <span className=\"fw-bold\">Quantity X Tree: </span>\n                    {formData.amountPerTree}\n                  </div>\n                )}\n                {_checkFolialDrenche() && (\n                  <div className=\"col-3\">\n                    <span className=\"fw-bold\">&nbsp;</span>\n                    {`${workPlanMethods[parseInt(formData.methodId)].name}`}\n                  </div>\n                )}\n              </div>\n\n              <RawMaterialForm\n                formData={formData}\n                _handleOnChange={_handleOnChange}\n                _checkFolialDrenche={_checkFolialDrenche}\n                _checkManual={_checkManual}\n              />\n            </div>\n          </div>\n        )}\n    </>\n  );\n}\n\nexport default WorkPlanForm;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./Edit.scss\";\nimport Breadcrumb from \"../../../components/common/breadcrumb/Breadcrumb\";\nimport {\n  handleFormDataChange,\n  handleFormValidation,\n  initFormData,\n  readData,\n  selectWorkPlan,\n  updateData,\n  fetchAllCollaborators,\n  fetchAllZones,\n  fetchAllSectors,\n  fetchAllAgriculturalPractices,\n} from \"../../../store/redux/Page/WorkPlan\";\nimport WorkPlanForm from \"../../../components/pageSpecific/workPlans/form/Form\";\nimport { useParams } from \"react-router-dom\";\n\nfunction WorkPlanEdit() {\n  const params = useParams();\n  const store = useSelector(selectWorkPlan);\n  const dispatch = useDispatch();\n  const pageName = \"Edit work plan\";\n  const breadCrumbs = [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n    {\n      name: \"Work Plans\",\n      link: \"/work-plans\",\n    },\n    {\n      name: \"Edit\",\n      link: \"\",\n    },\n  ];\n\n  const _handleOnChange = (e, customPath) => {\n    let keyName = e.currentTarget.name;\n    if (Array.isArray(customPath) && customPath.length > 0) {\n      keyName = [...customPath, e.currentTarget.name];\n    } else {\n      if (e.currentTarget.name === \"selectRegion\") {\n        let newData = { key: \"zoneId\", value: \"\" };\n        if (e.currentTarget.value === \"Z\") {\n          newData = { key: \"sectorId\", value: \"\" };\n        }\n        dispatch(handleFormDataChange(newData));\n      }\n    }\n    dispatch(\n      handleFormDataChange({\n        key: keyName,\n        value: e.currentTarget.value,\n      })\n    );\n  };\n\n  const _handleFormValidation = (key, value) => {\n    dispatch(\n      handleFormValidation({\n        key,\n        value,\n      })\n    );\n  };\n\n  const _fetchAllCollaborators = (keyword = \"\") => {\n    dispatch(\n      fetchAllCollaborators({ ...store.collaboratorsFormData, keyword })\n    );\n  };\n\n  const _fetchAllZones = (keyword = \"\") => {\n    dispatch(fetchAllZones({ ...store.zonesFormData, keyword }));\n  };\n\n  const _fetchAllSectors = (keyword = \"\") => {\n    dispatch(fetchAllSectors({ ...store.sectorsFormData, keyword }));\n  };\n\n  const _fetchAllAgriculturalPractices = (keyword = \"\") => {\n    dispatch(\n      fetchAllAgriculturalPractices({\n        ...store.agriculturalPracticesFormData,\n        keyword,\n      })\n    );\n  };\n\n  const _handleFormSubmit = (e) => {\n    e.preventDefault();\n    dispatch(updateData({ id: params.id, ...store.formData }));\n  };\n\n  useEffect(() => {\n    document.title = `${process.env.REACT_APP_NAME} | ${pageName}`;\n    dispatch(initFormData());\n    _fetchAllCollaborators();\n    _fetchAllZones();\n    _fetchAllSectors();\n    _fetchAllAgriculturalPractices();\n    dispatch(readData({ id: params.id }));\n  }, []);\n\n  return (\n    <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n      <div className=\"col-12 p-0 content-wrapper\">\n        <div className=\"content-header\">\n          <div className=\"container-fluid\">\n            <div className=\"row mb-2\">\n              <div className=\"col-sm-6\">\n                <h1 className=\"m-0\">{pageName}</h1>\n              </div>\n              <div className=\"col-sm-6\">\n                <Breadcrumb breadCrumbs={breadCrumbs} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <section className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n                  <div className=\"card-header border-transparent\">\n                    <div className={\"row\"}>&nbsp;</div>\n                  </div>\n\n                  <form name={`${pageName}Create`} onSubmit={_handleFormSubmit}>\n                    <div className=\"card-body\">\n                      <WorkPlanForm\n                        formData={store.formData}\n                        _handleOnChange={_handleOnChange}\n                        collaborators={store.collaborators}\n                        _fetchAllCollaborators={_fetchAllCollaborators}\n                        zones={store.zones}\n                        _fetchAllZones={_fetchAllZones}\n                        sectors={store.sectors}\n                        _fetchAllSectors={_fetchAllSectors}\n                        agriculturalPractices={store.agriculturalPractices}\n                        _fetchAllAgriculturalPractices={\n                          _fetchAllAgriculturalPractices\n                        }\n                        formValidationData={store.formValidation}\n                        _handleFormValidation={_handleFormValidation}\n                      />\n                    </div>\n\n                    <div className=\"card-footer clearfix\">\n                      <button\n                        className=\"btn btn-sm btn-app float-end\"\n                        disabled={\n                          Object.keys(store.formValidation).length > 0 ||\n                          store.loading === true\n                        }\n                      >\n                        {store.loading === true && (\n                          <span\n                            className=\"spinner-border spinner-border-sm\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                          ></span>\n                        )}{\" \"}\n                        Save\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default WorkPlanEdit;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Breadcrumb.scss\";\nimport { Link } from \"react-router-dom\";\n\nfunction Breadcrumb({ breadCrumbs }) {\n  return (\n    <nav className=\"float-sm-end\" aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        {breadCrumbs.map((value, index) => {\n          const activeLink = value.link && value.link !== \"\";\n          return (\n            <li\n              className={`breadcrumb-item ${activeLink ? \"active\" : \"\"}`}\n              key={index}\n            >\n              {activeLink ? (\n                <Link to={value.link}>{value.name}</Link>\n              ) : (\n                value.name\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n}\n\nBreadcrumb.propTypes = {\n  breadCrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      link: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nBreadcrumb.defaultProps = {\n  breadCrumbs: [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n  ],\n};\n\nexport default Breadcrumb;\n"],"sourceRoot":""}