{"version":3,"sources":["components/common/inputLabel/InputLabel.js","components/common/table/Table.js","utils/validationHelper.js","components/common/select/Select.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","components/pageSpecific/workPlans/linked/rawMaterial/form/Form.js","components/pageSpecific/workPlans/form/Form.js","pages/workPlans/edit/Edit.js","components/common/breadcrumb/Breadcrumb.js"],"names":["InputLabel","props","htmlFor","inputId","className","labelText","isRequired","defaultProps","Table","header","data","length","map","element","i","colSpan","Object","keys","subElement","subI","validatorRule","value","validationKeyword","validation","status","message","test","validator","isEmpty","ignore_whitespace","isFloat","isEmail","isAlpha","ignore","isAlphanumeric","isNumeric","valData","split","equals","validate","inputvalue","validationRules","validationResult","forEach","validationRule","runningValidation","trim","SelectDynamic","useState","selectValue","setSelectValue","_validate","validationData","validations","_handleFormValidation","name","useEffect","hideLabel","id","placeholder","classNamePrefix","styles","control","WebkitAlignItems","WebkitBoxAlign","msFlexAlign","alignItems","backgroundColor","borderColor","formValidationData","borderRadius","borderStyle","borderWidth","cursor","display","WebkitBoxFlexWrap","WebkitFlexWrap","msFlexWrap","flexWrap","WebkitBoxPack","WebkitJustifyContent","justifyContent","minHeight","outline","position","WebkitTransition","transition","boxiSizing","defaultValue","isLoading","isDisabled","disabled","isSearchable","isMulti","isMultiple","options","onInputChange","inputValue","onChange","option","Array","isArray","_","chain","o","currentTarget","onBlur","e","_objectWithoutProperties","source","excluded","key","target","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call","_typeof","obj","Symbol","iterator","constructor","RawMaterialForm","formData","_handleOnChange","_checkFolialDrenche","_checkManual","rawMaterials","rawMaterial","index","quantity","unitMetric","unit","quantityAvailable","totalMethodBased","workPlanMethods","parseInt","methodId","totalunit","totalTree","totalTrees","zone","treeCount","changedQuantity","type","totalQ","parseFloat","Math","floor","_calculateTotalBasedOnMethod","actualName","amountPerTree","WorkPlanForm","collaborators","_fetchAllCollaborators","zones","_fetchAllZones","sectors","_fetchAllSectors","agriculturalPractices","_fetchAllAgriculturalPractices","agriculturalPractice","method","Select","collaborator","label","checked","selectRegion","sector","formulationName","aP","rM","push","rawMaterialId","workPlanMethod","methods","WorkPlanEdit","params","useParams","store","useSelector","selectWorkPlan","dispatch","useDispatch","pageName","keyword","fetchAllCollaborators","collaboratorsFormData","fetchAllZones","zonesFormData","fetchAllSectors","sectorsFormData","fetchAllAgriculturalPractices","agriculturalPracticesFormData","document","title","process","initFormData","readData","breadCrumbs","link","onSubmit","preventDefault","updateData","customPath","keyName","newData","handleFormDataChange","formValidation","handleFormValidation","loading","role","Breadcrumb","activeLink","to"],"mappings":"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","file":"static/js/18.b65592e6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./InputLabel.scss\";\r\n\r\nfunction InputLabel(props) {\r\n  return (\r\n    <label htmlFor={props.inputId} className={props.className}>\r\n      {props.labelText}{\" \"}\r\n      {props.isRequired && <span className=\"text-danger\">*</span>}\r\n    </label>\r\n  );\r\n}\r\n\r\nInputLabel.propTypes = {\r\n  inputId: PropTypes.string.isRequired,\r\n  className: PropTypes.string.isRequired,\r\n  labelText: PropTypes.string.isRequired,\r\n  isRequired: PropTypes.bool.isRequired\r\n};\r\n\r\nInputLabel.defaultProps = {\r\n  className: \"form-label\",\r\n  isRequired: false,\r\n  labelText: \"\",\r\n};\r\n\r\nexport default InputLabel;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Table.scss\";\r\n\r\nfunction Table({ header, data }) {\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <table className=\"table m-0\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"text-center\">#</th>\r\n            {header.length > 0\r\n              ? header.map((element, i) => <th className=\"text-center\" key={i}>{element}</th>)\r\n              : \"\"}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.length === 0 ? (\r\n            <tr>\r\n              <td colSpan={1 + header.length} className=\"text-center\">\r\n                No Record found\r\n              </td>\r\n            </tr>\r\n          ) : (\r\n            data.map((element, i) => (\r\n              <tr key={i}>\r\n                <td className=\"text-center\">{i + 1}</td>\r\n                {Object.keys(element).map((subElement, subI) => (\r\n                  <td className=\"text-center\" key={subI}>{element[subElement]}</td>\r\n                ))}\r\n              </tr>\r\n            ))\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nTable.propTypes = {\r\n  header: PropTypes.array.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Table;\r\n","import validator from \"validator\";\r\n\r\nconst validatorRule = (value, validationKeyword) => {\r\n  let validation = { status: true, message: \"\" };\r\n  switch (true) {\r\n    case /required/i.test(validationKeyword):\r\n      validation.status = !validator.isEmpty(value, {\r\n        ignore_whitespace: true,\r\n      });\r\n      validation.message =\r\n        validation.status === false ? \"The value is required!\" : \"\";\r\n      break;\r\n    case /float/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isFloat(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be a float!\" : \"\";\r\n      }\r\n      break;\r\n    case /email/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isEmail(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be an Email!\" : \"\";\r\n      }\r\n      break;\r\n    case /alpha/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlpha(value, \"en-US\", { ignore: \" \" });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Alphabetic!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /alphanumeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlphanumeric(value, \"en-US\", {\r\n          ignore: \" \",\r\n        });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be AlphaNumeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /numeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isNumeric(value);\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Numeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /equals:*/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        const valData = validationKeyword.split(\":\");\r\n        validation.status = validator.equals(value, valData[2]);\r\n        validation.message =\r\n          validation.status === false\r\n            ? `The value needs to be same as ${valData[1]}!`\r\n            : \"\";\r\n      }\r\n      break;\r\n    default:\r\n      validation.status = true;\r\n      validation.message = \"\";\r\n      break;\r\n  }\r\n  return validation;\r\n};\r\n\r\nexport const validate = (inputvalue, validationRules = []) => {\r\n  const validationResult = {\r\n    status: true,\r\n    message: \"\",\r\n  };\r\n  validationRules.forEach((validationRule) => {\r\n    const runningValidation = validatorRule(inputvalue, validationRule);\r\n    validationResult.status =\r\n      validationResult.status && runningValidation.status;\r\n    validationResult.message += \" \" + runningValidation.message;\r\n    validationResult.message = validationResult.message.trim();\r\n  });\r\n  return validationResult;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport Select from \"react-select\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Select.scss\";\r\n\r\nimport InputLabel from \"../inputLabel/InputLabel\";\r\nimport { validate } from \"../../../utils/validationHelper\";\r\n\r\nfunction SelectDynamic(props) {\r\n  const [selectValue, setSelectValue] = useState(null);\r\n\r\n  const _validate = (value) => {\r\n    const validationData = validate(value || \"\", props.validations);\r\n    if (validationData.status === false) {\r\n      props._handleFormValidation(props.name, validationData);\r\n    } else {\r\n      props._handleFormValidation(props.name, null);\r\n    }\r\n  };\r\n\r\n  // Remove if Validation causes issue\r\n  useEffect(() => {\r\n    _validate();\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectValue === null) {\r\n      setSelectValue(props.value);\r\n    }\r\n  }, [props.value,selectValue]);\r\n\r\n  return (\r\n    <>\r\n      {!props.hideLabel && (\r\n        <InputLabel\r\n          inputId={props.id}\r\n          labelText={props.placeholder}\r\n          isRequired={props.isRequired}\r\n        />\r\n      )}\r\n      <Select\r\n        id={props.id}\r\n        className={`${props.className || \"\"} basic-single`}\r\n        classNamePrefix=\"select\"\r\n        styles={{\r\n          control: () => ({\r\n            WebkitAlignItems: \"center\",\r\n            WebkitBoxAlign: \"center\",\r\n            msFlexAlign: \"center\",\r\n            alignItems: \"center\",\r\n            backgroundColor: \"hsl(0, 0%, 100%)\",\r\n            borderColor:\r\n              props.formValidationData[props.name] &&\r\n              props.formValidationData[props.name].status === false\r\n                ? \"#dc3545\"\r\n                : \"hsl(0, 0%, 80%)\",\r\n            borderRadius: \"4px\",\r\n            borderStyle: \"solid\",\r\n            borderWidth: \"1px\",\r\n            cursor: \"default\",\r\n            display: [\"-webkit-box\", \"-webkit-flex\", \"-ms-flexbox\", \"flex\"],\r\n            WebkitBoxFlexWrap: \"wrap\",\r\n            WebkitFlexWrap: \"wrap\",\r\n            msFlexWrap: \"wrap\",\r\n            flexWrap: \"wrap\",\r\n            WebkitBoxPack: \"justify\",\r\n            WebkitJustifyContent: \"space-between\",\r\n            justifyContent: \"space-between\",\r\n            minHeight: \"38px\",\r\n            outline: \"0 !important\",\r\n            position: \"relative\",\r\n            WebkitTransition: \"all 100ms\",\r\n            transition: \"all 100ms\",\r\n            boxiSizing: \"border-box\",\r\n          }),\r\n        }}\r\n        defaultValue={props.defaultValue}\r\n        value={selectValue}\r\n        isLoading={false}\r\n        isDisabled={props.disabled ?? false}\r\n        isSearchable={true}\r\n        isMulti={props.isMultiple}\r\n        name={props.name}\r\n        options={props.options}\r\n        onInputChange={(inputValue) => {\r\n          props.onInputChange(inputValue);\r\n        }}\r\n        onChange={(option, element) => {\r\n          let value = \"\";\r\n          if (Array.isArray(option) && option.length > 0) {\r\n            value = _.chain(option)\r\n              .map((o) => o.value)\r\n              .value();\r\n          } else {\r\n            value = option.value;\r\n          }\r\n          setSelectValue(option);\r\n          return props.onChange({\r\n            currentTarget: { name: element.name, value },\r\n          });\r\n        }}\r\n        onBlur={(e) => _validate(e.currentTarget.value)}\r\n      />\r\n      {props.formValidationData[props.name] &&\r\n        props.formValidationData[props.name].status === false && (\r\n          <div className=\"invalid-feedback d-block\">\r\n            {props.formValidationData[props.name].message}\r\n          </div>\r\n        )}\r\n    </>\r\n  );\r\n}\r\n\r\nSelectDynamic.propTypes = {\r\n  id: PropTypes.string,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  options: PropTypes.array.isRequired,\r\n  isMultiple: PropTypes.bool,\r\n  isRequired: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  hideLabel: PropTypes.bool,\r\n  defaultValue: PropTypes.object,\r\n  onInputChange: PropTypes.func.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  validations: PropTypes.array,\r\n  formValidationData: PropTypes.object,\r\n  _handleFormValidation: PropTypes.func,\r\n};\r\n\r\nSelectDynamic.defaultProps = {\r\n  isMultiple: false,\r\n  isRequired: false,\r\n  hideLabel: false,\r\n  validations: [],\r\n  formValidationData: {},\r\n  _handleFormValidation: () => {},\r\n};\r\n\r\nexport default SelectDynamic;\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import React from \"react\";\r\nimport Table from \"../../../../../common/table/Table\";\r\nimport {\r\n  workPlanMethods,\r\n  unitMetric,\r\n} from \"../../../../../../utils/appConstants\";\r\n\r\nfunction RawMaterialForm({\r\n  formData,\r\n  _handleOnChange,\r\n  _checkFolialDrenche,\r\n  _checkManual,\r\n}) {\r\n  // const _getAmountPerTree = () => {\r\n  //   let amountPerTree = 1;\r\n  //   if (formData.amountPerTree && formData.amountPerTree !== 0) {\r\n  //     amountPerTree = parseFloat(formData.amountPerTree);\r\n  //   }\r\n  //   return amountPerTree;\r\n  // };\r\n\r\n  const _calculateTotalBasedOnMethod = () => {\r\n    let totalQ = 0;\r\n    formData.rawMaterials.forEach((rawMaterial) => {\r\n      totalQ +=\r\n        parseFloat(rawMaterial.quantity / 1000) *\r\n        parseFloat(workPlanMethods[parseInt(formData.methodId)].value / 1000);\r\n    });\r\n\r\n    return totalQ === 0 ? 0 : Math.floor(totalQ);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card mb-3\">\r\n      <div className=\"card-body\">\r\n        <div className=\"row\">\r\n          <div className=\"border border-2 rounded\">\r\n            <Table\r\n              data={\r\n                formData.rawMaterials && [\r\n                  ...formData.rawMaterials.map((rawMaterial, index) => ({\r\n                    name: rawMaterial.rawMaterial.name,\r\n                    quantity: `${rawMaterial.quantity} ${\r\n                      unitMetric[rawMaterial.unit]\r\n                    }`,\r\n                    quantityAvailable:\r\n                      (_checkFolialDrenche() && index !== 0) ||\r\n                      _checkManual() ? (\r\n                        <span\r\n                          className={\r\n                            rawMaterial.rawMaterial.quantityAvailable <\r\n                            rawMaterial.quantity\r\n                              ? \"text-danger\"\r\n                              : \"\"\r\n                          }\r\n                        >{`${rawMaterial.rawMaterial.quantityAvailable} ${\r\n                          unitMetric[rawMaterial.unit]\r\n                        }`}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      ),\r\n                    ...(_checkFolialDrenche()\r\n                      ? {\r\n                          totalMethodBased: `${\r\n                            (rawMaterial.quantity / 1000) *\r\n                            (workPlanMethods[parseInt(formData.methodId)].value / 1000)\r\n                          }` + \" \" + workPlanMethods[parseInt(formData.methodId)].totalunit,\r\n                        }\r\n                      : {}),\r\n                    ...(_checkManual()\r\n                      ? {\r\n                          totalTree: `${\r\n                            rawMaterial.quantity *\r\n                            (formData.id\r\n                              ? formData.totalTrees\r\n                              : formData.zone.treeCount)\r\n                          } ${unitMetric[rawMaterial.unit]}`,\r\n                        }\r\n                      : {}),\r\n                    changedQuantity:\r\n                      (_checkFolialDrenche() && index !== 0) ||\r\n                      _checkManual() ? (\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"changedQuantity\"\r\n                          value={rawMaterial.changedQuantity || \"\"}\r\n                          onChange={(e) =>\r\n                            _handleOnChange(e, [\"rawMaterials\", index])\r\n                          }\r\n                        />\r\n                      ) : (\r\n                        \"\"\r\n                      ),\r\n                  })),\r\n                  ...(_checkFolialDrenche()\r\n                    ? [\r\n                        {\r\n                          name: \"\",\r\n                          quantity: \"\",\r\n                          quantityAvailable: \"Total:\",\r\n                          totalMethodBased: `${_calculateTotalBasedOnMethod()} ${\r\n                            unitMetric[\"totalunit\"]\r\n                          }`,\r\n                          changedQuantity: \"\",\r\n                        },\r\n                      ]\r\n                    : []),\r\n                ]\r\n              }\r\n              header={[\r\n                \"Material\",\r\n                \"Quantity\",\r\n                \"Quantity Available\",\r\n                ...(_checkFolialDrenche()\r\n                  ? [\r\n                      `Total X ${\r\n                        workPlanMethods[parseInt(formData.methodId)].actualName\r\n                      }`,\r\n                    ]\r\n                  : []),\r\n                ...(_checkManual() ? [\"Total\"] : []),\r\n                \"Change Quantity\",\r\n              ]}\r\n            />\r\n            {_checkFolialDrenche() && (\r\n              <>\r\n              <h4 className=\"text-secondary text-center pt-2\">\r\n                You will need to prepare{\" \"}\r\n                {(\r\n                  (formData.totalTrees * formData.amountPerTree) /\r\n                    (workPlanMethods[parseInt(formData.methodId)].value / 1000)\r\n                )}{\" \"}\r\n                {workPlanMethods[parseInt(formData.methodId)].actualName} of{\" \"}\r\n                {workPlanMethods[parseInt(formData.methodId)].value / 1000} Lts\r\n                to cover{\" \"}\r\n                {formData.id ? formData.totalTrees : formData.zone.treeCount}{\" \"}\r\n                trees\r\n              </h4>\r\n\r\n              <h6 className=\"text-secondary text-center pt-2\">\r\n                ({formData.totalTrees} trees * {formData.amountPerTree} Lts ) / {workPlanMethods[parseInt(formData.methodId)].value / 1000} Lts  = {(formData.totalTrees * formData.amountPerTree) / (workPlanMethods[parseInt(formData.methodId)].value / 1000)} {workPlanMethods[parseInt(formData.methodId)].actualName}\r\n              </h6>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RawMaterialForm;\r\n","import React from \"react\";\r\nimport { methods, workPlanMethods } from \"../../../../utils/appConstants\";\r\nimport SelectDynamic from \"../../../common/select/Select\";\r\nimport RawMaterialForm from \"../linked/rawMaterial/form/Form.js\";\r\n\r\nfunction WorkPlanForm({\r\n  formData,\r\n  _handleOnChange,\r\n  collaborators,\r\n  _fetchAllCollaborators,\r\n  zones,\r\n  _fetchAllZones,\r\n  sectors,\r\n  _fetchAllSectors,\r\n  agriculturalPractices,\r\n  _fetchAllAgriculturalPractices,\r\n}) {\r\n  const _checkFolialDrenche = () =>\r\n    [0, 2].indexOf(parseInt(formData.agriculturalPractice.method)) > -1;\r\n\r\n  const _checkManual = () =>\r\n    parseInt(formData.agriculturalPractice.method) === 1;\r\n\r\n  return (\r\n    <>\r\n      {formData.id ? <input type=\"hidden\" value={formData.id} /> : \"\"}\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"input2\" className=\"form-label\">\r\n          Collaborator <span className=\"text-danger\">*</span>\r\n        </label>\r\n        <SelectDynamic\r\n          id=\"input2\"\r\n          value={\r\n            formData.collaborator && formData.collaborator.id\r\n              ? {\r\n                  value: formData.collaborator.id,\r\n                  label: formData.collaborator.name,\r\n                }\r\n              : null\r\n          }\r\n          name=\"collaboratorId\"\r\n          options={collaborators.map((collaborator) => ({\r\n            value: collaborator.id,\r\n            label: collaborator.name,\r\n          }))}\r\n          onInputChange={_fetchAllCollaborators}\r\n          onChange={(e) => {\r\n            _handleOnChange(e);\r\n            _handleOnChange({\r\n              currentTarget: {\r\n                name: \"collaborator\",\r\n                value:\r\n                  collaborators[\r\n                    collaborators\r\n                      .map(function (e) {\r\n                        return e.id;\r\n                      })\r\n                      .indexOf(e.currentTarget.value)\r\n                  ],\r\n              },\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"\" className=\"form-label\">\r\n          Choose Zone/Sector <span className=\"text-danger\">*</span>\r\n        </label>\r\n        <div className=\"input-group pb-2\">\r\n          <div className=\"input-group-text\">\r\n            <input\r\n              className=\"form-check-input mt-0\"\r\n              type=\"radio\"\r\n              name=\"selectRegion\"\r\n              value=\"Z\"\r\n              aria-label=\"Zone\"\r\n              checked={formData.selectRegion === \"Z\"}\r\n              onChange={_handleOnChange}\r\n            />{\" \"}\r\n            &nbsp; Zone\r\n          </div>\r\n          <SelectDynamic\r\n            className=\"form-control\"\r\n            disabled={formData.selectRegion !== \"Z\"}\r\n            value={\r\n              formData.zone && formData.zone.id\r\n                ? {\r\n                    value: formData.zone.id,\r\n                    label: formData.zone.name,\r\n                  }\r\n                : null\r\n            }\r\n            name=\"zoneId\"\r\n            aria-label=\"Select a Zone\"\r\n            options={zones.map((zone) => ({\r\n              value: zone.id,\r\n              label: zone.name,\r\n            }))}\r\n            onInputChange={_fetchAllZones}\r\n            onChange={(e) => {\r\n              _handleOnChange(e);\r\n              _handleOnChange({\r\n                currentTarget: {\r\n                  name: \"zone\",\r\n                  value:\r\n                    zones[\r\n                      zones\r\n                        .map(function (e) {\r\n                          return e.id;\r\n                        })\r\n                        .indexOf(e.currentTarget.value)\r\n                    ],\r\n                },\r\n              });\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"input-group pt-2\">\r\n          <div className=\"input-group-text\">\r\n            <input\r\n              className=\"form-check-input mt-0\"\r\n              type=\"radio\"\r\n              name=\"selectRegion\"\r\n              value=\"S\"\r\n              aria-label=\"Sector\"\r\n              checked={formData.selectRegion === \"S\"}\r\n              onChange={_handleOnChange}\r\n            />{\" \"}\r\n            &nbsp; Sector\r\n          </div>\r\n          <SelectDynamic\r\n            className=\"form-control\"\r\n            disabled={formData.selectRegion !== \"S\"}\r\n            value={\r\n              formData.sector && formData.sector.id\r\n                ? {\r\n                    value: formData.sector.id,\r\n                    label: formData.sector.name,\r\n                  }\r\n                : null\r\n            }\r\n            name=\"sectorId\"\r\n            aria-label=\"Select a Sector\"\r\n            options={sectors.map((sector) => ({\r\n              value: sector.id,\r\n              label: sector.name,\r\n            }))}\r\n            onInputChange={_fetchAllSectors}\r\n            onChange={(e) => {\r\n              _handleOnChange(e);\r\n              _handleOnChange({\r\n                currentTarget: {\r\n                  name: \"sector\",\r\n                  value:\r\n                    sectors[\r\n                      sectors\r\n                        .map(function (e) {\r\n                          return e.id;\r\n                        })\r\n                        .indexOf(e.currentTarget.value)\r\n                    ],\r\n                },\r\n              });\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"input2\" className=\"form-label\">\r\n          Agricultural Practice <span className=\"text-danger\">*</span>\r\n        </label>\r\n        <SelectDynamic\r\n          id=\"input2\"\r\n          value={\r\n            formData.agriculturalPractice && formData.agriculturalPractice.id\r\n              ? {\r\n                  value: formData.agriculturalPractice.id,\r\n                  label: formData.agriculturalPractice.formulationName,\r\n                }\r\n              : null\r\n          }\r\n          name=\"agriculturalPracticeId\"\r\n          options={agriculturalPractices.map((agriculturalPractice) => ({\r\n            value: agriculturalPractice.id,\r\n            label: agriculturalPractice.formulationName,\r\n          }))}\r\n          onInputChange={_fetchAllAgriculturalPractices}\r\n          onChange={(e) => {\r\n            const aP =\r\n              agriculturalPractices[\r\n                agriculturalPractices\r\n                  .map(function (e) {\r\n                    return e.id;\r\n                  })\r\n                  .indexOf(e.currentTarget.value)\r\n              ];\r\n            const rM = [];\r\n            aP.rawMaterials.forEach((element) => {\r\n              rM.push({\r\n                rawMaterialId: element.rawMaterialId,\r\n                quantity: element.quantity,\r\n                unit: element.unit,\r\n                rawMaterial: element.rawMaterial,\r\n                changedQuantity: \"\",\r\n              });\r\n            });\r\n            _handleOnChange(e);\r\n            _handleOnChange({\r\n              currentTarget: {\r\n                name: \"methodId\",\r\n                value: 0,\r\n              },\r\n            });\r\n            _handleOnChange({\r\n              currentTarget: {\r\n                name: \"amountPerTree\",\r\n                value: 0,\r\n              },\r\n            });\r\n            _handleOnChange({\r\n              currentTarget: {\r\n                name: \"agriculturalPractice\",\r\n                value: aP,\r\n              },\r\n            });\r\n            _handleOnChange({\r\n              currentTarget: {\r\n                name: \"rawMaterials\",\r\n                value: rM,\r\n              },\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      {_checkFolialDrenche() && (\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col\">\r\n            <label htmlFor=\"input9\" className=\"form-label\">\r\n              Method <span className=\"text-danger\">*</span>\r\n            </label>\r\n            <select\r\n              id=\"input9\"\r\n              className=\"form-select\"\r\n              name=\"methodId\"\r\n              onChange={_handleOnChange}\r\n              value={parseInt(formData.methodId)}\r\n            >\r\n              {Object.keys(workPlanMethods).map((workPlanMethod, index) => (\r\n                <option key={index} value={workPlanMethod}>\r\n                  {workPlanMethods[workPlanMethod].name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"col\">\r\n            <label htmlFor=\"input10\" className=\"form-label\">\r\n              Amount Per Tree <span className=\"text-danger\">*</span>\r\n            </label>\r\n            <div className=\"input-group\">\r\n              <input\r\n                id=\"input10\"\r\n                className=\"form-control\"\r\n                name=\"amountPerTree\"\r\n                onChange={_handleOnChange}\r\n                value={formData.amountPerTree}\r\n              />\r\n              <div className=\"input-group-append\">\r\n                <span className=\"input-group-text\">Lts.</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {formData.agriculturalPractice &&\r\n        formData.zone &&\r\n        Object.keys(formData.agriculturalPractice).length > 0 &&\r\n        Object.keys(formData.zone).length > 0 && (\r\n          <div className=\"mb-3 card\">\r\n            <div className=\"card-header\">\r\n              <h6 className=\"fw-bold\">\r\n                DOSAGE :: {formData.agriculturalPractice.formulationName}\r\n              </h6>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <div className=\"row mb-3 text-center\">\r\n                <div className=\"col-3\">\r\n                  <span className=\"fw-bold\">Total Trees: </span>\r\n                  {formData.id ? formData.totalTrees : formData.zone.treeCount}\r\n                </div>\r\n                <div className=\"col-3\">\r\n                  <span className=\"fw-bold\">Method: </span>\r\n                  {methods[parseInt(formData.agriculturalPractice.method)]}\r\n                </div>\r\n                {_checkFolialDrenche() && (\r\n                  <div className=\"col-3\">\r\n                    <span className=\"fw-bold\">Quantity X Tree: </span>\r\n                    {formData.amountPerTree}\r\n                  </div>\r\n                )}\r\n                {_checkFolialDrenche() && (\r\n                  <div className=\"col-3\">\r\n                    <span className=\"fw-bold\">&nbsp;</span>\r\n                    {`${workPlanMethods[parseInt(formData.methodId)].name}`}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <RawMaterialForm\r\n                formData={formData}\r\n                _handleOnChange={_handleOnChange}\r\n                _checkFolialDrenche={_checkFolialDrenche}\r\n                _checkManual={_checkManual}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default WorkPlanForm;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./Edit.scss\";\r\nimport Breadcrumb from \"../../../components/common/breadcrumb/Breadcrumb\";\r\nimport {\r\n  handleFormDataChange,\r\n  handleFormValidation,\r\n  initFormData,\r\n  readData,\r\n  selectWorkPlan,\r\n  updateData,\r\n  fetchAllCollaborators,\r\n  fetchAllZones,\r\n  fetchAllSectors,\r\n  fetchAllAgriculturalPractices,\r\n} from \"../../../store/redux/Page/WorkPlan\";\r\nimport WorkPlanForm from \"../../../components/pageSpecific/workPlans/form/Form\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction WorkPlanEdit() {\r\n  const params = useParams();\r\n  const store = useSelector(selectWorkPlan);\r\n  const dispatch = useDispatch();\r\n  const pageName = \"Edit work plan\";\r\n  const breadCrumbs = [\r\n    {\r\n      name: \"Dashboard\",\r\n      link: \"/dashboard\",\r\n    },\r\n    {\r\n      name: \"Work Plans\",\r\n      link: \"/work-plans\",\r\n    },\r\n    {\r\n      name: \"Edit\",\r\n      link: \"\",\r\n    },\r\n  ];\r\n\r\n  const _handleOnChange = (e, customPath) => {\r\n    let keyName = e.currentTarget.name;\r\n    if (Array.isArray(customPath) && customPath.length > 0) {\r\n      keyName = [...customPath, e.currentTarget.name];\r\n    } else {\r\n      if (e.currentTarget.name === \"selectRegion\") {\r\n        let newData = { key: \"zoneId\", value: \"\" };\r\n        if (e.currentTarget.value === \"Z\") {\r\n          newData = { key: \"sectorId\", value: \"\" };\r\n        }\r\n        dispatch(handleFormDataChange(newData));\r\n      }\r\n    }\r\n    dispatch(\r\n      handleFormDataChange({\r\n        key: keyName,\r\n        value: e.currentTarget.value,\r\n      })\r\n    );\r\n  };\r\n\r\n  const _handleFormValidation = (key, value) => {\r\n    dispatch(\r\n      handleFormValidation({\r\n        key,\r\n        value,\r\n      })\r\n    );\r\n  };\r\n\r\n  const _fetchAllCollaborators = (keyword = \"\") => {\r\n    dispatch(\r\n      fetchAllCollaborators({ ...store.collaboratorsFormData, keyword })\r\n    );\r\n  };\r\n\r\n  const _fetchAllZones = (keyword = \"\") => {\r\n    dispatch(fetchAllZones({ ...store.zonesFormData, keyword }));\r\n  };\r\n\r\n  const _fetchAllSectors = (keyword = \"\") => {\r\n    dispatch(fetchAllSectors({ ...store.sectorsFormData, keyword }));\r\n  };\r\n\r\n  const _fetchAllAgriculturalPractices = (keyword = \"\") => {\r\n    dispatch(\r\n      fetchAllAgriculturalPractices({\r\n        ...store.agriculturalPracticesFormData,\r\n        keyword,\r\n      })\r\n    );\r\n  };\r\n\r\n  const _handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updateData({ id: params.id, ...store.formData }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = `${process.env.REACT_APP_NAME} | ${pageName}`;\r\n    dispatch(initFormData());\r\n    _fetchAllCollaborators();\r\n    _fetchAllZones();\r\n    _fetchAllSectors();\r\n    _fetchAllAgriculturalPractices();\r\n    dispatch(readData({ id: params.id }));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n      <div className=\"col-12 p-0 content-wrapper\">\r\n        <div className=\"content-header\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row mb-2\">\r\n              <div className=\"col-sm-6\">\r\n                <h1 className=\"m-0\">{pageName}</h1>\r\n              </div>\r\n              <div className=\"col-sm-6\">\r\n                <Breadcrumb breadCrumbs={breadCrumbs} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <section className=\"content\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <div className=\"card\">\r\n                  <div className=\"card-header border-transparent\">\r\n                    <div className={\"row\"}>&nbsp;</div>\r\n                  </div>\r\n\r\n                  <form name={`${pageName}Create`} onSubmit={_handleFormSubmit}>\r\n                    <div className=\"card-body\">\r\n                      <WorkPlanForm\r\n                        formData={store.formData}\r\n                        _handleOnChange={_handleOnChange}\r\n                        collaborators={store.collaborators}\r\n                        _fetchAllCollaborators={_fetchAllCollaborators}\r\n                        zones={store.zones}\r\n                        _fetchAllZones={_fetchAllZones}\r\n                        sectors={store.sectors}\r\n                        _fetchAllSectors={_fetchAllSectors}\r\n                        agriculturalPractices={store.agriculturalPractices}\r\n                        _fetchAllAgriculturalPractices={\r\n                          _fetchAllAgriculturalPractices\r\n                        }\r\n                        formValidationData={store.formValidation}\r\n                        _handleFormValidation={_handleFormValidation}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"card-footer clearfix\">\r\n                      <button\r\n                        className=\"btn btn-sm btn-app float-end\"\r\n                        disabled={\r\n                          Object.keys(store.formValidation).length > 0 ||\r\n                          store.loading === true\r\n                        }\r\n                      >\r\n                        {store.loading === true && (\r\n                          <span\r\n                            className=\"spinner-border spinner-border-sm\"\r\n                            role=\"status\"\r\n                            aria-hidden=\"true\"\r\n                          ></span>\r\n                        )}{\" \"}\r\n                        Save\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorkPlanEdit;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Breadcrumb.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Breadcrumb({ breadCrumbs }) {\r\n  return (\r\n    <nav className=\"float-sm-end\" aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        {breadCrumbs.map((value, index) => {\r\n          const activeLink = value.link && value.link !== \"\";\r\n          return (\r\n            <li\r\n              className={`breadcrumb-item ${activeLink ? \"active\" : \"\"}`}\r\n              key={index}\r\n            >\r\n              {activeLink ? (\r\n                <Link to={value.link}>{value.name}</Link>\r\n              ) : (\r\n                value.name\r\n              )}\r\n            </li>\r\n          );\r\n        })}\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n\r\nBreadcrumb.propTypes = {\r\n  breadCrumbs: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      link: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n\r\nBreadcrumb.defaultProps = {\r\n  breadCrumbs: [\r\n    {\r\n      name: \"Dashboard\",\r\n      link: \"/dashboard\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport default Breadcrumb;\r\n"],"sourceRoot":""}