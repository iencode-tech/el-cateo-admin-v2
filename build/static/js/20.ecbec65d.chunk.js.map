{"version":3,"sources":["components/common/inputLabel/InputLabel.js","components/common/table/Table.js","utils/validationHelper.js","components/common/textInput/TextInput.js","components/pageSpecific/agriculturalPractices/linked/rawMaterial/form/Form.js","components/pageSpecific/agriculturalPractices/form/Form.js","pages/agriculturalPractices/edit/Edit.js","components/common/breadcrumb/Breadcrumb.js","utils/timeHelper.js"],"names":["InputLabel","props","htmlFor","inputId","className","labelText","isRequired","defaultProps","Table","header","data","length","map","element","i","colSpan","Object","keys","subElement","subI","validatorRule","value","validationKeyword","validation","status","message","test","validator","isEmpty","ignore_whitespace","isFloat","isEmail","isAlpha","ignore","isAlphanumeric","isNumeric","valData","split","equals","validate","inputvalue","validationRules","validationResult","forEach","validationRule","runningValidation","trim","TextInput","_validate","validationData","validations","_handleFormValidation","name","useEffect","id","labelClassName","placeholder","type","inputClassName","formValidationData","rows","onChange","onBlur","e","currentTarget","indexOf","RawMaterialForm","formData","listData","_handleOnChange","_addNewRawMaterial","_handleRemoveBtnClick","_fetchAllRawMaterials","useState","fdDefVal","setFdDefVal","_checkFolialDrenche","parseInt","method","_checkManual","_calculateQtyTree","rawMaterialData","quantity","_getRemaining","remainingTotal","rawMaterials","parseFloat","filter","material","findFlag","fValue","rawMaterialId","index","onClick","rawMaterial","unit","readOnly","disabled","unitMetric","metric","qtyTree","qtyLts","total","delete","icon","faTrash","AgriculturalPracticeForm","rawMaterialList","_removeRawMaterial","defaultFolialDrencheData","formulationName","utcToLocalTime","scheduledDate","daysToDo","methods","observations","statuses","AgriculturalPracticeEdit","firstLoad","setFirstLoad","params","useParams","store","useSelector","selectAgriculturalPractice","dispatch","useDispatch","pageName","keyword","fetchAllRawMaterials","rawMaterialsFormData","document","title","process","initFormData","defaultFolialDrencheId","actionType","readData","breadCrumbs","link","onSubmit","preventDefault","updateData","customPath","keyName","Array","isArray","handleFormDataChange","key","addNewRawMaterial","removeRawMaterial","defaultFolialDrenche","formValidation","handleFormValidation","loading","role","Breadcrumb","activeLink","to","dateTimeString","format","moment"],"mappings":"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","file":"static/js/20.ecbec65d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./InputLabel.scss\";\r\n\r\nfunction InputLabel(props) {\r\n  return (\r\n    <label htmlFor={props.inputId} className={props.className}>\r\n      {props.labelText}{\" \"}\r\n      {props.isRequired && <span className=\"text-danger\">*</span>}\r\n    </label>\r\n  );\r\n}\r\n\r\nInputLabel.propTypes = {\r\n  inputId: PropTypes.string.isRequired,\r\n  className: PropTypes.string.isRequired,\r\n  labelText: PropTypes.string.isRequired,\r\n  isRequired: PropTypes.bool.isRequired\r\n};\r\n\r\nInputLabel.defaultProps = {\r\n  className: \"form-label\",\r\n  isRequired: false,\r\n  labelText: \"\",\r\n};\r\n\r\nexport default InputLabel;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Table.scss\";\r\n\r\nfunction Table({ header, data }) {\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <table className=\"table m-0\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"text-center\">#</th>\r\n            {header.length > 0\r\n              ? header.map((element, i) => <th className=\"text-center\" key={i}>{element}</th>)\r\n              : \"\"}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.length === 0 ? (\r\n            <tr>\r\n              <td colSpan={1 + header.length} className=\"text-center\">\r\n                No Record found\r\n              </td>\r\n            </tr>\r\n          ) : (\r\n            data.map((element, i) => (\r\n              <tr key={i}>\r\n                <td className=\"text-center\">{i + 1}</td>\r\n                {Object.keys(element).map((subElement, subI) => (\r\n                  <td className=\"text-center\" key={subI}>{element[subElement]}</td>\r\n                ))}\r\n              </tr>\r\n            ))\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nTable.propTypes = {\r\n  header: PropTypes.array.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Table;\r\n","import validator from \"validator\";\r\n\r\nconst validatorRule = (value, validationKeyword) => {\r\n  let validation = { status: true, message: \"\" };\r\n  switch (true) {\r\n    case /required/i.test(validationKeyword):\r\n      validation.status = !validator.isEmpty(value, {\r\n        ignore_whitespace: true,\r\n      });\r\n      validation.message =\r\n        validation.status === false ? \"The value is required!\" : \"\";\r\n      break;\r\n    case /float/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isFloat(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be a float!\" : \"\";\r\n      }\r\n      break;\r\n    case /email/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isEmail(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be an Email!\" : \"\";\r\n      }\r\n      break;\r\n    case /alpha/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlpha(value, \"en-US\", { ignore: \" \" });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Alphabetic!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /alphanumeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlphanumeric(value, \"en-US\", {\r\n          ignore: \" \",\r\n        });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be AlphaNumeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /numeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isNumeric(value);\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Numeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /equals:*/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        const valData = validationKeyword.split(\":\");\r\n        validation.status = validator.equals(value, valData[2]);\r\n        validation.message =\r\n          validation.status === false\r\n            ? `The value needs to be same as ${valData[1]}!`\r\n            : \"\";\r\n      }\r\n      break;\r\n    default:\r\n      validation.status = true;\r\n      validation.message = \"\";\r\n      break;\r\n  }\r\n  return validation;\r\n};\r\n\r\nexport const validate = (inputvalue, validationRules = []) => {\r\n  const validationResult = {\r\n    status: true,\r\n    message: \"\",\r\n  };\r\n  validationRules.forEach((validationRule) => {\r\n    const runningValidation = validatorRule(inputvalue, validationRule);\r\n    validationResult.status =\r\n      validationResult.status && runningValidation.status;\r\n    validationResult.message += \" \" + runningValidation.message;\r\n    validationResult.message = validationResult.message.trim();\r\n  });\r\n  return validationResult;\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./TextInput.scss\";\r\nimport InputLabel from \"../inputLabel/InputLabel\";\r\nimport { validate } from \"../../../utils/validationHelper\";\r\n\r\nfunction TextInput(props) {\r\n  const _validate = (value) => {\r\n    const validationData = validate(value || \"\", props.validations);\r\n    if (validationData.status === false) {\r\n      props._handleFormValidation(props.name, validationData);\r\n    } else {\r\n      props._handleFormValidation(props.name, null);\r\n    }\r\n  };\r\n\r\n  // Remove if Validation causes issue\r\n  useEffect(() => {\r\n    _validate();\r\n  });\r\n\r\n  return (\r\n    <div className=\"m-2\">\r\n      <InputLabel\r\n        inputId={props.id}\r\n        className={props.labelClassName}\r\n        labelText={props.placeholder}\r\n        isRequired={props.isRequired}\r\n      />\r\n      {props.type === \"textarea\" && (\r\n        <textarea\r\n          id={props.id}\r\n          className={`${props.inputClassName} ${\r\n            props.formValidationData[props.name] &&\r\n            props.formValidationData[props.name].status === false &&\r\n            \"is-invalid\"\r\n          }`}\r\n          rows=\"3\"\r\n          placeholder={props.placeholder}\r\n          name={props.name}\r\n          value={props.value}\r\n          onChange={props.onChange}\r\n          onBlur={(e) => _validate(e.currentTarget.value)}\r\n        />\r\n      )}\r\n\r\n      {[\"textarea\"].indexOf(props.type) === -1 && (\r\n        <input\r\n          id={props.id}\r\n          className={`${props.inputClassName} ${\r\n            props.formValidationData[props.name] &&\r\n            props.formValidationData[props.name].status === false &&\r\n            \"is-invalid\"\r\n          }`}\r\n          type={props.type}\r\n          placeholder={props.placeholder}\r\n          name={props.name}\r\n          value={props.value}\r\n          onChange={props.onChange}\r\n          onBlur={(e) => _validate(e.currentTarget.value)}\r\n        />\r\n      )}\r\n\r\n      {props.formValidationData[props.name] &&\r\n        props.formValidationData[props.name].status === false && (\r\n          <div className=\"invalid-feedback\">\r\n            {props.formValidationData[props.name].message}\r\n          </div>\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  labelClassName: PropTypes.string.isRequired,\r\n  inputClassName: PropTypes.string.isRequired,\r\n  isRequired: PropTypes.bool.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  value: PropTypes.string,\r\n  validations: PropTypes.array,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nTextInput.defaultProps = {\r\n  labelClassName: \"form-label\",\r\n  inputClassName: \"form-control\",\r\n  isRequired: false,\r\n  validations: [],\r\n  value: \"\",\r\n  onChange: () => {},\r\n};\r\n\r\nexport default TextInput;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { unitMetric } from \"../../../../../../utils/appConstants\";\r\nimport Table from \"../../../../../common/table/Table\";\r\n\r\nfunction RawMaterialForm({\r\n  formData,\r\n  listData,\r\n  _handleOnChange,\r\n  _addNewRawMaterial,\r\n  _handleRemoveBtnClick,\r\n  _fetchAllRawMaterials,\r\n}) {\r\n  const [fdDefVal, setFdDefVal] = useState(1000);\r\n\r\n  const _checkFolialDrenche = () =>\r\n    [0, 2].indexOf(parseInt(formData.method)) > -1;\r\n\r\n  const _checkManual = () => parseInt(formData.method) === 1;\r\n\r\n  const _calculateQtyTree = (rawMaterialData) => {\r\n    return rawMaterialData.quantity || 0;\r\n  };\r\n\r\n  const _getRemaining = () => {\r\n    let remainingTotal = 0;\r\n    if (formData.rawMaterials && formData.rawMaterials.length > 0) {\r\n      for (let i = 1; i < formData.rawMaterials.length; i++) {\r\n        remainingTotal += parseFloat(formData.rawMaterials[i].quantity) || 0;\r\n      }\r\n    }\r\n    return remainingTotal;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (_checkFolialDrenche() && formData.rawMaterials && formData.rawMaterials.length > 0) {\r\n      let remainingTotal = 0;\r\n      for (let i = 0; i < formData.rawMaterials.length; i++) {\r\n        remainingTotal += parseFloat(formData.rawMaterials[i].quantity) || 0;\r\n      }\r\n      setFdDefVal(remainingTotal);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <div className=\"row\">\r\n        <div className=\"col-2 border border-1 rounded\">\r\n          <h6 className={`text-center`}>Raw Materials</h6>\r\n          <ul className=\"list-group\">\r\n            <li className=\"list-group-item\">\r\n              <input\r\n                className=\"form-control\"\r\n                type=\"text\"\r\n                onChange={(e) => _fetchAllRawMaterials(e.currentTarget.value)}\r\n              />\r\n            </li>\r\n            {listData\r\n              .filter((material) => {\r\n                let findFlag = false;\r\n                formData.rawMaterials &&\r\n                  formData.rawMaterials.forEach((fValue) => {\r\n                    if (fValue.rawMaterialId === material.id) {\r\n                      findFlag = true;\r\n                    }\r\n                  });\r\n                return !findFlag;\r\n              })\r\n              .map((material, index) => (\r\n                <li\r\n                  key={index}\r\n                  onClick={(e) => _addNewRawMaterial({ material }, e)}\r\n                  className=\"list-group-item list-group-item-action\"\r\n                >\r\n                  {material.name}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n        <div className=\"col-10 border border-2 rounded\">\r\n          <h6 className={`text-center`}>Amount to Dose</h6>\r\n          <Table\r\n            data={\r\n              formData.rawMaterials &&\r\n              formData.rawMaterials.map((rawMaterial, index) => ({\r\n                name: (\r\n                  <>\r\n                    <input\r\n                      type=\"hidden\"\r\n                      name=\"rawMaterial\"\r\n                      value={rawMaterial.id}\r\n                      onChange={(e) =>\r\n                        _handleOnChange(e, [\"rawMaterials\", index])\r\n                      }\r\n                    />\r\n                    {rawMaterial.rawMaterial.name}\r\n                  </>\r\n                ),\r\n                quantity: (\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"quantity\"\r\n                    value={\r\n                      _checkFolialDrenche() && index === 0\r\n                        ? fdDefVal\r\n                        : rawMaterial.quantity\r\n                    }\r\n                    onChange={(e) => {\r\n                      if (_checkFolialDrenche() && index === 0) {\r\n                        setFdDefVal(parseFloat(e.currentTarget.value));\r\n                        _handleOnChange(\r\n                          {\r\n                            currentTarget: {\r\n                              name: \"quantity\",\r\n                              value:\r\n                                parseFloat(e.currentTarget.value) -\r\n                                _getRemaining(),\r\n                            },\r\n                          },\r\n                          [\"rawMaterials\", index]\r\n                        );\r\n                      } else if (_checkFolialDrenche() && index > 0) {\r\n                        _handleOnChange(e, [\"rawMaterials\", index]);\r\n                        _handleOnChange(\r\n                          {\r\n                            currentTarget: {\r\n                              name: \"quantity\",\r\n                              value:\r\n                                parseFloat(fdDefVal) -\r\n                                (parseFloat(_getRemaining()) -\r\n                                  parseFloat(rawMaterial.quantity || 0) +\r\n                                  parseFloat(e.currentTarget.value || 0)),\r\n                            },\r\n                          },\r\n                          [\"rawMaterials\", 0]\r\n                        );\r\n                      } else {\r\n                        _handleOnChange(e, [\"rawMaterials\", index]);\r\n                      }\r\n                    }}\r\n                  />\r\n                ),\r\n                unit: (\r\n                  <select\r\n                    name=\"unit\"\r\n                    value={rawMaterial.unit}\r\n                    onChange={(e) =>\r\n                      _handleOnChange(e, [\"rawMaterials\", index])\r\n                    }\r\n                    readOnly={true}\r\n                    disabled={true}\r\n                  >\r\n                    {Object.keys(unitMetric).map((metric, index) => (\r\n                      <option key={index} value={metric}>\r\n                        {unitMetric[metric]}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                ),\r\n                ...(_checkManual()\r\n                  ? {\r\n                      qtyTree: `${_calculateQtyTree(rawMaterial)} ${\r\n                        unitMetric[rawMaterial.unit]\r\n                      }`,\r\n                    }\r\n                  : {}),\r\n                ...(_checkFolialDrenche()\r\n                  ? {\r\n                      qtyLts:\r\n                        index !== 0\r\n                          ? `${_calculateQtyTree(rawMaterial)} ${\r\n                              unitMetric[rawMaterial.unit]\r\n                            }`\r\n                          : \"\",\r\n                      total:\r\n                        index === 0 &&\r\n                        `${rawMaterial.quantity} ${\r\n                          unitMetric[rawMaterial.unit]\r\n                        }`,\r\n                    }\r\n                  : {}),\r\n                delete: ((_checkFolialDrenche() && index !== 0) ||\r\n                  _checkManual()) && (\r\n                  <FontAwesomeIcon\r\n                    icon={faTrash}\r\n                    onClick={(e) => _handleRemoveBtnClick(index, e)}\r\n                  />\r\n                ),\r\n              }))\r\n            }\r\n            header={[\r\n              \"Material\",\r\n              \"Quantity\",\r\n              \"Unit\",\r\n              ...(_checkManual() ? [\"Qty x Tree\"] : []),\r\n              ...(_checkFolialDrenche() ? [\"Qty x Lts.\", \"Total\"] : []),\r\n              \"\",\r\n            ]}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RawMaterialForm;\r\n","import React from \"react\";\r\nimport { methods, statuses } from \"../../../../utils/appConstants\";\r\nimport RawMaterialForm from \"../linked/rawMaterial/form/Form\";\r\nimport { utcToLocalTime } from \"../../../../utils/timeHelper\";\r\nimport TextInput from \"../../../common/textInput/TextInput\";\r\n\r\nfunction AgriculturalPracticeForm({\r\n  formData,\r\n  rawMaterialList,\r\n  _handleOnChange,\r\n  _addNewRawMaterial,\r\n  _removeRawMaterial,\r\n  _fetchAllRawMaterials,\r\n  defaultFolialDrencheData,\r\n  formValidationData,\r\n_handleFormValidation\r\n}) {\r\n  return (\r\n    <>\r\n      {formData.id ? <input type=\"hidden\" value={formData.id} /> : \"\"}\r\n      <div className=\"row mb-3\">\r\n        <div className=\"col-md-6\">\r\n        <TextInput\r\n            id=\"input1\"\r\n            type=\"text\"\r\n            placeholder=\"Formulation Name\"\r\n            name=\"formulationName\"\r\n            isRequired={true}\r\n            value={formData.formulationName}\r\n            onChange={_handleOnChange}\r\n            validations={[\"required\", \"alpha\"]}\r\n            formValidationData={formValidationData}\r\n            _handleFormValidation={_handleFormValidation}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-md-3\">\r\n        <TextInput\r\n            id=\"input2\"\r\n            type=\"date\"\r\n            placeholder=\"Schedule Date\"\r\n            name=\"scheduledDate\"\r\n            isRequired={true}\r\n            value={utcToLocalTime(formData.scheduledDate, \"YYYY-MM-DD\")}\r\n            onChange={_handleOnChange}\r\n            validations={[\"required\"]}\r\n            formValidationData={formValidationData}\r\n            _handleFormValidation={_handleFormValidation}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-md-3\">\r\n        <TextInput\r\n            id=\"input3\"\r\n            type=\"text\"\r\n            placeholder=\"Days to do\"\r\n            name=\"daysToDo\"\r\n            isRequired={true}\r\n            value={formData.daysToDo}\r\n            onChange={_handleOnChange}\r\n            validations={[\"required\", \"numeric\"]}\r\n            formValidationData={formValidationData}\r\n            _handleFormValidation={_handleFormValidation}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row mb-3\">\r\n        <div className=\"col-md-6\">\r\n          <label htmlFor=\"input8\" className=\"form-label\">\r\n            Method <span className=\"text-danger\">*</span>\r\n          </label>\r\n          <select\r\n            id=\"input8\"\r\n            className=\"form-select\"\r\n            name=\"method\"\r\n            onChange={(e) => {\r\n              _handleOnChange(e);\r\n              _handleOnChange({\r\n                currentTarget: { name: \"rawMaterials\", value: [] },\r\n              });\r\n              let unit = \"g\";\r\n              if ([0, 2].indexOf(parseInt(e.currentTarget.value)) > -1) {\r\n                unit = \"cc\";\r\n                _addNewRawMaterial(\r\n                  { material: defaultFolialDrencheData, quantity: 1000 },\r\n                  null\r\n                );\r\n              }\r\n              _fetchAllRawMaterials(\"\", unit);\r\n            }}\r\n            value={parseInt(formData.method)}\r\n          >\r\n            {Object.keys(methods).map((method, index) => (\r\n              <option key={index} value={method}>\r\n                {methods[method]}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mb-3\">\r\n        <TextInput\r\n            id=\"input11\"\r\n            type=\"textarea\"\r\n            placeholder=\"Observations\"\r\n            name=\"observations\"\r\n            isRequired={true}\r\n            value={formData.observations}\r\n            onChange={_handleOnChange}\r\n            formValidationData={formValidationData}\r\n            _handleFormValidation={_handleFormValidation}\r\n          />\r\n      </div>\r\n\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"input4\" className=\"form-label\">\r\n          Status <span className=\"text-danger\">*</span>\r\n        </label>\r\n        <select\r\n          id=\"input4\"\r\n          className=\"form-select\"\r\n          name=\"status\"\r\n          onChange={_handleOnChange}\r\n          value={parseInt(formData.status)}\r\n        >\r\n          {Object.keys(statuses).map((status, index) => (\r\n            <option key={index} value={status}>\r\n              {statuses[status]}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"mb-3\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header border-transparent\">\r\n            <h4 className=\"m-0\">Raw Material</h4>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <RawMaterialForm\r\n              formData={formData}\r\n              listData={rawMaterialList}\r\n              _handleOnChange={_handleOnChange}\r\n              _addNewRawMaterial={_addNewRawMaterial}\r\n              _handleRemoveBtnClick={_removeRawMaterial}\r\n              _fetchAllRawMaterials={_fetchAllRawMaterials}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AgriculturalPracticeForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./Edit.scss\";\r\nimport Breadcrumb from \"../../../components/common/breadcrumb/Breadcrumb\";\r\nimport {\r\n  addNewRawMaterial,\r\n  fetchAllRawMaterials,\r\n  handleFormDataChange,\r\n  handleFormValidation,\r\n  initFormData,\r\n  readData,\r\n  removeRawMaterial,\r\n  selectAgriculturalPractice,\r\n  updateData,\r\n} from \"../../../store/redux/Page/AgriculturalPractice\";\r\nimport AgriculturalPracticeForm from \"../../../components/pageSpecific/agriculturalPractices/form/Form\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { defaultFolialDrencheId } from \"../../../utils/appConstants\";\r\n\r\nfunction AgriculturalPracticeEdit() {\r\n  const [firstLoad, setFirstLoad] = useState(true);\r\n  const params = useParams();\r\n  const store = useSelector(selectAgriculturalPractice);\r\n  const dispatch = useDispatch();\r\n  const pageName = \"Edit agricultural practice\";\r\n  const breadCrumbs = [\r\n    {\r\n      name: \"Dashboard\",\r\n      link: \"/dashboard\",\r\n    },\r\n    {\r\n      name: \"Agricultural Practices\",\r\n      link: \"/agricultural-practices\",\r\n    },\r\n    {\r\n      name: \"Edit\",\r\n      link: \"\",\r\n    },\r\n  ];\r\n\r\n  const _addNewRawMaterial = (material, e) => {\r\n    dispatch(addNewRawMaterial(material));\r\n  };\r\n\r\n  const _removeRawMaterial = (index, e) => {\r\n    dispatch(removeRawMaterial(index));\r\n  };\r\n\r\n  const _fetchAllRawMaterials = (keyword = \"\", unit = \"cc\") => {\r\n    dispatch(\r\n      fetchAllRawMaterials({ ...store.rawMaterialsFormData, keyword, unit })\r\n    );\r\n  };\r\n\r\n  const _handleOnChange = (e, customPath) => {\r\n    let keyName = e.currentTarget.name;\r\n    if (Array.isArray(customPath) && customPath.length > 0)\r\n      keyName = [...customPath, e.currentTarget.name];\r\n\r\n    dispatch(\r\n      handleFormDataChange({ key: keyName, value: e.currentTarget.value })\r\n    );\r\n  };\r\n\r\n  const _handleFormValidation = (key, value) => {\r\n    dispatch(\r\n      handleFormValidation({\r\n        key,\r\n        value,\r\n      })\r\n    );\r\n  };\r\n\r\n  const _handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updateData({ id: params.id, ...store.formData }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = `${process.env.REACT_APP_NAME} | ${pageName}`;\r\n    dispatch(\r\n      initFormData({\r\n        id: defaultFolialDrencheId,\r\n        actionType: \"loadDefaultFolialDrenche\",\r\n      })\r\n    );\r\n    _fetchAllRawMaterials();\r\n    dispatch(readData({ id: params.id }));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (store.formData.formulationName !== \"\" && firstLoad) {\r\n      _fetchAllRawMaterials(\r\n        \"\",\r\n        parseInt(store.formData.method) === 1 ? \"g\" : \"cc\"\r\n      );\r\n      setFirstLoad(false);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n      <div className=\"col-12 p-0 content-wrapper\">\r\n        <div className=\"content-header\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row mb-2\">\r\n              <div className=\"col-sm-6\">\r\n                <h1 className=\"m-0\">{pageName}</h1>\r\n              </div>\r\n              <div className=\"col-sm-6\">\r\n                <Breadcrumb breadCrumbs={breadCrumbs} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <section className=\"content\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <div className=\"card\">\r\n                  <div className=\"card-header border-transparent\">\r\n                    <div className={\"row\"}>&nbsp;</div>\r\n                  </div>\r\n\r\n                  <form name={`${pageName}Create`} onSubmit={_handleFormSubmit}>\r\n                    <div className=\"card-body\">\r\n                      <AgriculturalPracticeForm\r\n                        formData={store.formData}\r\n                        rawMaterialList={store.rawMaterials}\r\n                        _handleOnChange={_handleOnChange}\r\n                        _addNewRawMaterial={_addNewRawMaterial}\r\n                        _removeRawMaterial={_removeRawMaterial}\r\n                        _fetchAllRawMaterials={_fetchAllRawMaterials}\r\n                        defaultFolialDrencheData={store.defaultFolialDrenche}\r\n                        formValidationData={store.formValidation}\r\n                        _handleFormValidation={_handleFormValidation}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"card-footer clearfix\">\r\n                      <button\r\n                        className=\"btn btn-sm btn-app float-end\"\r\n                        disabled={\r\n                          Object.keys(store.formValidation).length > 0 ||\r\n                          store.loading === true\r\n                        }\r\n                      >\r\n                        {store.loading === true && (\r\n                          <span\r\n                            className=\"spinner-border spinner-border-sm\"\r\n                            role=\"status\"\r\n                            aria-hidden=\"true\"\r\n                          ></span>\r\n                        )}{\" \"}\r\n                        Save\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AgriculturalPracticeEdit;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Breadcrumb.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Breadcrumb({ breadCrumbs }) {\r\n  return (\r\n    <nav className=\"float-sm-end\" aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        {breadCrumbs.map((value, index) => {\r\n          const activeLink = value.link && value.link !== \"\";\r\n          return (\r\n            <li\r\n              className={`breadcrumb-item ${activeLink ? \"active\" : \"\"}`}\r\n              key={index}\r\n            >\r\n              {activeLink ? (\r\n                <Link to={value.link}>{value.name}</Link>\r\n              ) : (\r\n                value.name\r\n              )}\r\n            </li>\r\n          );\r\n        })}\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n\r\nBreadcrumb.propTypes = {\r\n  breadCrumbs: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      link: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n\r\nBreadcrumb.defaultProps = {\r\n  breadCrumbs: [\r\n    {\r\n      name: \"Dashboard\",\r\n      link: \"/dashboard\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport default Breadcrumb;\r\n","import moment from \"moment\";\r\n\r\nexport const utcToLocalTime = (\r\n  dateTimeString,\r\n  format = \"MM-DD-YYYY h:mm A\"\r\n) => {\r\n  return (dateTimeString ? moment(dateTimeString) : moment()).format(format);\r\n};\r\n\r\nexport const localToUtcTime = (\r\n  dateTimeString,\r\n  format = \"MM-DD-YYYY h:mm A\"\r\n) => {\r\n  return (dateTimeString ? moment(dateTimeString) : moment()).utc().format(format);\r\n};\r\n"],"sourceRoot":""}