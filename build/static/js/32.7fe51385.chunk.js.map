{"version":3,"sources":["components/common/inputLabel/InputLabel.js","utils/validationHelper.js","components/common/textInput/TextInput.js","components/pageSpecific/persons/form/Form.js","pages/persons/edit/Edit.js","components/common/breadcrumb/Breadcrumb.js"],"names":["InputLabel","props","htmlFor","inputId","className","labelText","isRequired","defaultProps","validatorRule","value","validationKeyword","validation","status","message","test","validator","isEmpty","ignore_whitespace","isFloat","isEmail","isAlpha","ignore","isAlphanumeric","isNumeric","valData","split","equals","validate","inputvalue","validationRules","validationResult","forEach","validationRule","runningValidation","trim","TextInput","_validate","validationData","validations","_handleFormValidation","name","useEffect","id","labelClassName","placeholder","type","inputClassName","formValidationData","rows","onChange","onBlur","e","currentTarget","indexOf","PersonForm","formData","_handleOnChange","firstName","lastName","email","phone","address","role","Object","keys","personRoles","map","personRole","index","password","confirmPassword","parseInt","statuses","PersonEdit","params","useParams","store","useSelector","selectPerson","dispatch","useDispatch","pageName","document","title","process","initFormData","readData","breadCrumbs","link","onSubmit","preventDefault","updateData","handleFormDataChange","key","formValidation","handleFormValidation","disabled","length","loading","Breadcrumb","activeLink","to"],"mappings":"uGAAA,uBAIA,SAASA,EAAWC,GAClB,OACE,wBAAOC,QAASD,EAAME,QAASC,UAAWH,EAAMG,UAAhD,UACGH,EAAMI,UAAW,IACjBJ,EAAMK,YAAc,sBAAMF,UAAU,cAAhB,kBAY3BJ,EAAWO,aAAe,CACxBH,UAAW,aACXE,YAAY,EACZD,UAAW,IAGEL,O,iCC1Bf,wDAEMQ,EAAgB,SAACC,EAAOC,GAC5B,IAAIC,EAAa,CAAEC,QAAQ,EAAMC,QAAS,IAC1C,QAAQ,GACN,IAAK,YAAYC,KAAKJ,GACpBC,EAAWC,QAAUG,IAAUC,QAAQP,EAAO,CAC5CQ,mBAAmB,IAErBN,EAAWE,SACa,IAAtBF,EAAWC,OAAmB,yBAA2B,GAC3D,MACF,IAAK,SAASE,KAAKJ,GACH,KAAVD,IACFE,EAAWC,OAASG,IAAUG,QAAQT,GACtCE,EAAWE,SACa,IAAtBF,EAAWC,OAAmB,iCAAmC,IAErE,MACF,IAAK,SAASE,KAAKJ,GACH,KAAVD,IACFE,EAAWC,OAASG,IAAUI,QAAQV,GACtCE,EAAWE,SACa,IAAtBF,EAAWC,OAAmB,kCAAoC,IAEtE,MACF,IAAK,SAASE,KAAKJ,GACH,KAAVD,IACFE,EAAWC,OAASG,IAAUK,QAAQX,EAAO,QAAS,CAAEY,OAAQ,MAChEV,EAAWE,SACa,IAAtBF,EAAWC,OACP,yCACA,IAER,MACF,IAAK,gBAAgBE,KAAKJ,GACV,KAAVD,IACFE,EAAWC,OAASG,IAAUO,eAAeb,EAAO,QAAS,CAC3DY,OAAQ,MAEVV,EAAWE,SACa,IAAtBF,EAAWC,OACP,sCACA,IAER,MACF,IAAK,WAAWE,KAAKJ,GACL,KAAVD,IACFE,EAAWC,OAASG,IAAUQ,UAAUd,GACxCE,EAAWE,SACa,IAAtBF,EAAWC,OACP,sCACA,IAER,MACF,IAAK,YAAYE,KAAKJ,GACpB,GAAc,KAAVD,EAAc,CAChB,IAAMe,EAAUd,EAAkBe,MAAM,KACxCd,EAAWC,OAASG,IAAUW,OAAOjB,EAAOe,EAAQ,IACpDb,EAAWE,SACa,IAAtBF,EAAWC,OAAX,wCACqCY,EAAQ,GAD7C,KAEI,GAER,MACF,QACEb,EAAWC,QAAS,EACpBD,EAAWE,QAAU,GAGzB,OAAOF,GAGIgB,EAAW,SAACC,GAAsC,IAA1BC,EAAyB,uDAAP,GAC/CC,EAAmB,CACvBlB,QAAQ,EACRC,QAAS,IASX,OAPAgB,EAAgBE,SAAQ,SAACC,GACvB,IAAMC,EAAoBzB,EAAcoB,EAAYI,GACpDF,EAAiBlB,OACfkB,EAAiBlB,QAAUqB,EAAkBrB,OAC/CkB,EAAiBjB,SAAW,IAAMoB,EAAkBpB,QACpDiB,EAAiBjB,QAAUiB,EAAiBjB,QAAQqB,UAE/CJ,I,uDCrFT,6CAMA,SAASK,EAAUlC,GACjB,IAAMmC,EAAY,SAAC3B,GACjB,IAAM4B,EAAiBV,YAASlB,GAAS,GAAIR,EAAMqC,cACrB,IAA1BD,EAAezB,OACjBX,EAAMsC,sBAAsBtC,EAAMuC,KAAMH,GAExCpC,EAAMsC,sBAAsBtC,EAAMuC,KAAM,OAS5C,OAJAC,qBAAU,WACRL,MACC,IAGD,sBAAKhC,UAAU,MAAf,UACE,cAAC,IAAD,CACED,QAASF,EAAMyC,GACftC,UAAWH,EAAM0C,eACjBtC,UAAWJ,EAAM2C,YACjBtC,WAAYL,EAAMK,aAEJ,aAAfL,EAAM4C,MACL,0BACEH,GAAIzC,EAAMyC,GACVtC,UAAS,UAAKH,EAAM6C,eAAX,YACP7C,EAAM8C,mBAAmB9C,EAAMuC,QACiB,IAAhDvC,EAAM8C,mBAAmB9C,EAAMuC,MAAM5B,QACrC,cAEFoC,KAAK,IACLJ,YAAa3C,EAAM2C,YACnBJ,KAAMvC,EAAMuC,KACZ/B,MAAOR,EAAMQ,MACbwC,SAAUhD,EAAMgD,SAChBC,OAAQ,SAACC,GAAD,OAAOf,EAAUe,EAAEC,cAAc3C,WAIN,IAAtC,CAAC,YAAY4C,QAAQpD,EAAM4C,OAC1B,uBACEH,GAAIzC,EAAMyC,GACVtC,UAAS,UAAKH,EAAM6C,eAAX,YACP7C,EAAM8C,mBAAmB9C,EAAMuC,QACiB,IAAhDvC,EAAM8C,mBAAmB9C,EAAMuC,MAAM5B,QACrC,cAEFiC,KAAM5C,EAAM4C,KACZD,YAAa3C,EAAM2C,YACnBJ,KAAMvC,EAAMuC,KACZ/B,MAAOR,EAAMQ,MACbwC,SAAUhD,EAAMgD,SAChBC,OAAQ,SAACC,GAAD,OAAOf,EAAUe,EAAEC,cAAc3C,UAI5CR,EAAM8C,mBAAmB9C,EAAMuC,QACkB,IAAhDvC,EAAM8C,mBAAmB9C,EAAMuC,MAAM5B,QACnC,qBAAKR,UAAU,mBAAf,SACGH,EAAM8C,mBAAmB9C,EAAMuC,MAAM3B,aAoBlDsB,EAAU5B,aAAe,CACvBoC,eAAgB,aAChBG,eAAgB,eAChBxC,YAAY,EACZgC,YAAa,GACb7B,MAAO,GACPwC,SAAU,cAGGd,O,uDC/Ff,iCA2KemB,IAvKf,YAKI,IAJFC,EAIC,EAJDA,SACAC,EAGC,EAHDA,gBACAT,EAEC,EAFDA,mBACAR,EACC,EADDA,sBAEA,OACE,qCACGgB,EAASb,GAAK,uBAAOG,KAAK,SAASpC,MAAO8C,EAASb,KAAS,GAE7D,sBAAKtC,UAAU,WAAf,UACE,qBAAKA,UAAU,qBAAf,SACE,cAAC,IAAD,CACEsC,GAAG,SACHG,KAAK,OACLD,YAAY,aACZJ,KAAK,YACLlC,YAAY,EACZG,MAAO8C,EAASE,UAChBR,SAAUO,EACVlB,YAAa,CAAC,YACdS,mBAAoBA,EACpBR,sBAAuBA,MAG3B,qBAAKnC,UAAU,qBAAf,SACE,cAAC,IAAD,CACEsC,GAAG,SACHG,KAAK,OACLD,YAAY,YACZJ,KAAK,WACLlC,YAAY,EACZG,MAAO8C,EAASG,SAChBT,SAAUO,EACVlB,YAAa,CAAC,YACdS,mBAAoBA,EACpBR,sBAAuBA,SAK7B,sBAAKnC,UAAU,WAAf,UACE,qBAAKA,UAAU,qBAAf,SACE,cAAC,IAAD,CACEsC,GAAG,SACHG,KAAK,QACLD,YAAY,QACZJ,KAAK,QACLlC,YAAY,EACZG,MAAO8C,EAASI,MAChBV,SAAUO,EACVlB,YAAa,CAAC,WAAY,SAC1BS,mBAAoBA,EACpBR,sBAAuBA,MAG3B,qBAAKnC,UAAU,qBAAf,SACE,cAAC,IAAD,CACEsC,GAAG,SACHG,KAAK,MACLD,YAAY,QACZJ,KAAK,QACLlC,YAAY,EACZG,MAAO8C,EAASK,MAChBX,SAAUO,EACVlB,YAAa,CAAC,YACdS,mBAAoBA,EACpBR,sBAAuBA,SAK7B,qBAAKnC,UAAU,WAAf,SACE,qBAAKA,UAAU,SAAf,SACE,cAAC,IAAD,CACEsC,GAAG,SACHG,KAAK,WACLD,YAAY,UACZJ,KAAK,UACLlC,YAAY,EACZG,MAAO8C,EAASM,QAChBZ,SAAUO,EACVlB,YAAa,CAAC,YACdS,mBAAoBA,EACpBR,sBAAuBA,QAK7B,qBAAKnC,UAAU,WAAf,SACE,sBAAKA,UAAU,SAAf,UACE,wBAAOF,QAAQ,SAASE,UAAU,aAAlC,kBACO,sBAAMA,UAAU,cAAhB,kBAEP,wBACEsC,GAAG,SACHtC,UAAU,cACVoC,KAAK,OACLS,SAAUO,EACV/C,MAAO8C,EAASO,KALlB,SAOGC,OAAOC,KAAKC,KAAaC,KAAI,SAACC,EAAYC,GAAb,OAC5B,wBAAoB3D,MAAO0D,EAA3B,SACGF,IAAYE,IADFC,aAQrB,sBAAKhE,UAAU,WAAf,UACE,qBAAKA,UAAU,qBAAf,SACE,cAAC,IAAD,CACEsC,GAAG,SACHG,KAAK,WACLD,YAAY,WACZJ,KAAK,WACLlC,YAAY,EACZG,MAAO8C,EAASc,SAChBpB,SAAUO,EACVlB,YAAa,CAAC,YACdS,mBAAoBA,EACpBR,sBAAuBA,MAGzBgB,EAASb,GAgBT,GAfA,qBAAKtC,UAAU,qBAAf,SACE,cAAC,IAAD,CACEsC,GAAG,SACHG,KAAK,WACLD,YAAY,mBACZJ,KAAK,kBACLlC,YAAY,EACZG,MAAO8C,EAASe,gBAChBrB,SAAUO,EACVlB,YAAa,CAAC,WAAD,0BAAgCiB,EAASc,WACtDtB,mBAAoBA,EACpBR,sBAAuBA,SAQ/B,sBAAKnC,UAAU,OAAf,UACE,wBAAOF,QAAQ,SAASE,UAAU,aAAlC,oBACS,sBAAMA,UAAU,cAAhB,kBAET,wBACEsC,GAAG,SACHtC,UAAU,cACVoC,KAAK,SACLS,SAAUO,EACV/C,MAAO8D,SAAShB,EAAS3C,QAL3B,SAOGmD,OAAOC,KAAKQ,KAAUN,KAAI,SAACtD,EAAQwD,GAAT,OACzB,wBAAoB3D,MAAOG,EAA3B,SACG4D,IAAS5D,IADCwD,gB,yICjCVK,UAjHf,WACE,IAAMC,EAASC,cACTC,EAAQC,YAAYC,KACpBC,EAAWC,cACXC,EAAW,cA6CjB,OANAxC,qBAAU,WACRyC,SAASC,MAAT,UAAoBC,iBAApB,cAAoDH,GACpDF,EAASM,eACTN,EAASO,YAAS,CAAE5C,GAAIgC,EAAOhC,QAC9B,IAGD,qBAAKtC,UAAU,0GAAf,SACE,sBAAKA,UAAU,6BAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,WAAf,SACE,oBAAIA,UAAU,MAAd,SAAqB6E,MAEvB,qBAAK7E,UAAU,WAAf,SACE,cAAC,IAAD,CAAYmF,YAtDN,CAClB,CACE/C,KAAM,YACNgD,KAAM,cAER,CACEhD,KAAM,UACNgD,KAAM,YAER,CACEhD,KAAM,OACNgD,KAAM,gBAiDJ,yBAASpF,UAAU,UAAnB,SACE,qBAAKA,UAAU,kBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,iCAAf,SACE,qBAAKA,UAAW,MAAhB,oBAGF,uBAAMoC,KAAI,UAAKyC,EAAL,UAAuBQ,SApCvB,SAACtC,GACzBA,EAAEuC,iBACFX,EAASY,YAAW,aAAEjD,GAAIgC,EAAOhC,IAAOkC,EAAMrB,aAkChC,UACE,qBAAKnD,UAAU,YAAf,SACE,cAAC,IAAD,CACEmD,SAAUqB,EAAMrB,SAChBC,gBA1DE,SAACL,GACvB4B,EACEa,YAAqB,CACnBC,IAAK1C,EAAEC,cAAcZ,KACrB/B,MAAO0C,EAAEC,cAAc3C,UAuDPsC,mBAAoB6B,EAAMkB,eAC1BvD,sBAnDQ,SAACsD,EAAKpF,GAClCsE,EACEgB,YAAqB,CACnBF,MACApF,gBAmDY,qBAAKL,UAAU,uBAAf,SACE,yBACEA,UAAU,+BACV4F,SACEjC,OAAOC,KAAKY,EAAMkB,gBAAgBG,OAAS,IACzB,IAAlBrB,EAAMsB,QAJV,WAOqB,IAAlBtB,EAAMsB,SACL,sBACE9F,UAAU,mCACV0D,KAAK,SACL,cAAY,SAEb,IAbL,iC,gCCpGtB,8BAKA,SAASqC,EAAT,GAAsC,IAAhBZ,EAAe,EAAfA,YACpB,OACE,qBAAKnF,UAAU,eAAe,aAAW,aAAzC,SACE,oBAAIA,UAAU,aAAd,SACGmF,EAAYrB,KAAI,SAACzD,EAAO2D,GACvB,IAAMgC,EAAa3F,EAAM+E,MAAuB,KAAf/E,EAAM+E,KACvC,OACE,oBACEpF,UAAS,0BAAqBgG,EAAa,SAAW,IADxD,SAIGA,EACC,cAAC,IAAD,CAAMC,GAAI5F,EAAM+E,KAAhB,SAAuB/E,EAAM+B,OAE7B/B,EAAM+B,MALH4B,UAwBnB+B,EAAW5F,aAAe,CACxBgF,YAAa,CACX,CACE/C,KAAM,YACNgD,KAAM,gBAKGW,O","file":"static/js/32.7fe51385.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./InputLabel.scss\";\n\nfunction InputLabel(props) {\n  return (\n    <label htmlFor={props.inputId} className={props.className}>\n      {props.labelText}{\" \"}\n      {props.isRequired && <span className=\"text-danger\">*</span>}\n    </label>\n  );\n}\n\nInputLabel.propTypes = {\n  inputId: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  labelText: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool.isRequired\n};\n\nInputLabel.defaultProps = {\n  className: \"form-label\",\n  isRequired: false,\n  labelText: \"\",\n};\n\nexport default InputLabel;\n","import validator from \"validator\";\r\n\r\nconst validatorRule = (value, validationKeyword) => {\r\n  let validation = { status: true, message: \"\" };\r\n  switch (true) {\r\n    case /required/i.test(validationKeyword):\r\n      validation.status = !validator.isEmpty(value, {\r\n        ignore_whitespace: true,\r\n      });\r\n      validation.message =\r\n        validation.status === false ? \"The value is required!\" : \"\";\r\n      break;\r\n    case /float/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isFloat(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be a float!\" : \"\";\r\n      }\r\n      break;\r\n    case /email/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isEmail(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be an Email!\" : \"\";\r\n      }\r\n      break;\r\n    case /alpha/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlpha(value, \"en-US\", { ignore: \" \" });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Alphabetic!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /alphanumeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlphanumeric(value, \"en-US\", {\r\n          ignore: \" \",\r\n        });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be AlphaNumeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /numeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isNumeric(value);\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Numeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /equals:*/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        const valData = validationKeyword.split(\":\");\r\n        validation.status = validator.equals(value, valData[2]);\r\n        validation.message =\r\n          validation.status === false\r\n            ? `The value needs to be same as ${valData[1]}!`\r\n            : \"\";\r\n      }\r\n      break;\r\n    default:\r\n      validation.status = true;\r\n      validation.message = \"\";\r\n      break;\r\n  }\r\n  return validation;\r\n};\r\n\r\nexport const validate = (inputvalue, validationRules = []) => {\r\n  const validationResult = {\r\n    status: true,\r\n    message: \"\",\r\n  };\r\n  validationRules.forEach((validationRule) => {\r\n    const runningValidation = validatorRule(inputvalue, validationRule);\r\n    validationResult.status =\r\n      validationResult.status && runningValidation.status;\r\n    validationResult.message += \" \" + runningValidation.message;\r\n    validationResult.message = validationResult.message.trim();\r\n  });\r\n  return validationResult;\r\n};\r\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./TextInput.scss\";\nimport InputLabel from \"../inputLabel/InputLabel\";\nimport { validate } from \"../../../utils/validationHelper\";\n\nfunction TextInput(props) {\n  const _validate = (value) => {\n    const validationData = validate(value || \"\", props.validations);\n    if (validationData.status === false) {\n      props._handleFormValidation(props.name, validationData);\n    } else {\n      props._handleFormValidation(props.name, null);\n    }\n  };\n\n  // Remove if Validation causes issue\n  useEffect(() => {\n    _validate();\n  }, []);\n\n  return (\n    <div className=\"m-2\">\n      <InputLabel\n        inputId={props.id}\n        className={props.labelClassName}\n        labelText={props.placeholder}\n        isRequired={props.isRequired}\n      />\n      {props.type === \"textarea\" && (\n        <textarea\n          id={props.id}\n          className={`${props.inputClassName} ${\n            props.formValidationData[props.name] &&\n            props.formValidationData[props.name].status === false &&\n            \"is-invalid\"\n          }`}\n          rows=\"3\"\n          placeholder={props.placeholder}\n          name={props.name}\n          value={props.value}\n          onChange={props.onChange}\n          onBlur={(e) => _validate(e.currentTarget.value)}\n        />\n      )}\n\n      {[\"textarea\"].indexOf(props.type) === -1 && (\n        <input\n          id={props.id}\n          className={`${props.inputClassName} ${\n            props.formValidationData[props.name] &&\n            props.formValidationData[props.name].status === false &&\n            \"is-invalid\"\n          }`}\n          type={props.type}\n          placeholder={props.placeholder}\n          name={props.name}\n          value={props.value}\n          onChange={props.onChange}\n          onBlur={(e) => _validate(e.currentTarget.value)}\n        />\n      )}\n\n      {props.formValidationData[props.name] &&\n        props.formValidationData[props.name].status === false && (\n          <div className=\"invalid-feedback\">\n            {props.formValidationData[props.name].message}\n          </div>\n        )}\n    </div>\n  );\n}\n\nTextInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  labelClassName: PropTypes.string.isRequired,\n  inputClassName: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  validations: PropTypes.array,\n  onChange: PropTypes.func.isRequired,\n};\n\nTextInput.defaultProps = {\n  labelClassName: \"form-label\",\n  inputClassName: \"form-control\",\n  isRequired: false,\n  validations: [],\n  value: \"\",\n  onChange: () => {},\n};\n\nexport default TextInput;\n","import React from \"react\";\nimport { personRoles, statuses } from \"../../../../utils/appConstants\";\nimport TextInput from \"../../../common/textInput/TextInput\";\n\nfunction PersonForm({\n  formData,\n  _handleOnChange,\n  formValidationData,\n  _handleFormValidation,\n}) {\n  return (\n    <>\n      {formData.id ? <input type=\"hidden\" value={formData.id} /> : \"\"}\n\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12 col-md-6\">\n          <TextInput\n            id=\"input1\"\n            type=\"text\"\n            placeholder=\"First Name\"\n            name=\"firstName\"\n            isRequired={true}\n            value={formData.firstName}\n            onChange={_handleOnChange}\n            validations={[\"required\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n        <div className=\"col-sm-12 col-md-6\">\n          <TextInput\n            id=\"input2\"\n            type=\"text\"\n            placeholder=\"Last Name\"\n            name=\"lastName\"\n            isRequired={true}\n            value={formData.lastName}\n            onChange={_handleOnChange}\n            validations={[\"required\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n      </div>\n\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12 col-md-6\">\n          <TextInput\n            id=\"input3\"\n            type=\"email\"\n            placeholder=\"Email\"\n            name=\"email\"\n            isRequired={true}\n            value={formData.email}\n            onChange={_handleOnChange}\n            validations={[\"required\", \"email\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n        <div className=\"col-sm-12 col-md-6\">\n          <TextInput\n            id=\"input4\"\n            type=\"tel\"\n            placeholder=\"Phone\"\n            name=\"phone\"\n            isRequired={true}\n            value={formData.phone}\n            onChange={_handleOnChange}\n            validations={[\"required\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n      </div>\n\n      <div className=\"row mb-3\">\n        <div className=\"col-12\">\n          <TextInput\n            id=\"input5\"\n            type=\"textarea\"\n            placeholder=\"Address\"\n            name=\"address\"\n            isRequired={true}\n            value={formData.address}\n            onChange={_handleOnChange}\n            validations={[\"required\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n      </div>\n\n      <div className=\"row mb-3\">\n        <div className=\"col-12\">\n          <label htmlFor=\"input6\" className=\"form-label\">\n            Role <span className=\"text-danger\">*</span>\n          </label>\n          <select\n            id=\"input6\"\n            className=\"form-select\"\n            name=\"role\"\n            onChange={_handleOnChange}\n            value={formData.role}\n          >\n            {Object.keys(personRoles).map((personRole, index) => (\n              <option key={index} value={personRole}>\n                {personRoles[personRole]}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12 col-md-6\">\n          <TextInput\n            id=\"input7\"\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            isRequired={true}\n            value={formData.password}\n            onChange={_handleOnChange}\n            validations={[\"required\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n        {!formData.id ? (\n          <div className=\"col-sm-12 col-md-6\">\n            <TextInput\n              id=\"input8\"\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              name=\"confirmPassword\"\n              isRequired={true}\n              value={formData.confirmPassword}\n              onChange={_handleOnChange}\n              validations={[\"required\", `equals:Password:${formData.password}`]}\n              formValidationData={formValidationData}\n              _handleFormValidation={_handleFormValidation}\n            />\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"input9\" className=\"form-label\">\n          Status <span className=\"text-danger\">*</span>\n        </label>\n        <select\n          id=\"input9\"\n          className=\"form-select\"\n          name=\"status\"\n          onChange={_handleOnChange}\n          value={parseInt(formData.status)}\n        >\n          {Object.keys(statuses).map((status, index) => (\n            <option key={index} value={status}>\n              {statuses[status]}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  );\n}\n\nexport default PersonForm;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./Edit.scss\";\nimport Breadcrumb from \"../../../components/common/breadcrumb/Breadcrumb\";\nimport {\n  handleFormDataChange,\n  handleFormValidation,\n  initFormData,\n  readData,\n  selectPerson,\n  updateData,\n} from \"../../../store/redux/Page/Person\";\nimport PersonForm from \"../../../components/pageSpecific/persons/form/Form\";\nimport { useParams } from \"react-router-dom\";\n\nfunction PersonEdit() {\n  const params = useParams();\n  const store = useSelector(selectPerson);\n  const dispatch = useDispatch();\n  const pageName = \"Edit person\";\n  const breadCrumbs = [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n    {\n      name: \"Persons\",\n      link: \"/persons\",\n    },\n    {\n      name: \"Edit\",\n      link: \"\",\n    },\n  ];\n\n  const _handleOnChange = (e) => {\n    dispatch(\n      handleFormDataChange({\n        key: e.currentTarget.name,\n        value: e.currentTarget.value,\n      })\n    );\n  };\n\n  const _handleFormValidation = (key, value) => {\n    dispatch(\n      handleFormValidation({\n        key,\n        value,\n      })\n    );\n  };\n\n  const _handleFormSubmit = (e) => {\n    e.preventDefault();\n    dispatch(updateData({ id: params.id, ...store.formData }));\n  };\n\n  useEffect(() => {\n    document.title = `${process.env.REACT_APP_NAME} | ${pageName}`;\n    dispatch(initFormData());\n    dispatch(readData({ id: params.id }));\n  }, []);\n\n  return (\n    <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n      <div className=\"col-12 p-0 content-wrapper\">\n        <div className=\"content-header\">\n          <div className=\"container-fluid\">\n            <div className=\"row mb-2\">\n              <div className=\"col-sm-6\">\n                <h1 className=\"m-0\">{pageName}</h1>\n              </div>\n              <div className=\"col-sm-6\">\n                <Breadcrumb breadCrumbs={breadCrumbs} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <section className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n                  <div className=\"card-header border-transparent\">\n                    <div className={\"row\"}>&nbsp;</div>\n                  </div>\n\n                  <form name={`${pageName}Create`} onSubmit={_handleFormSubmit}>\n                    <div className=\"card-body\">\n                      <PersonForm\n                        formData={store.formData}\n                        _handleOnChange={_handleOnChange}\n                        formValidationData={store.formValidation}\n                        _handleFormValidation={_handleFormValidation}\n                      />\n                    </div>\n\n                    <div className=\"card-footer clearfix\">\n                      <button\n                        className=\"btn btn-sm btn-app float-end\"\n                        disabled={\n                          Object.keys(store.formValidation).length > 0 ||\n                          store.loading === true\n                        }\n                      >\n                        {store.loading === true && (\n                          <span\n                            className=\"spinner-border spinner-border-sm\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                          ></span>\n                        )}{\" \"}\n                        Save\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default PersonEdit;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Breadcrumb.scss\";\nimport { Link } from \"react-router-dom\";\n\nfunction Breadcrumb({ breadCrumbs }) {\n  return (\n    <nav className=\"float-sm-end\" aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        {breadCrumbs.map((value, index) => {\n          const activeLink = value.link && value.link !== \"\";\n          return (\n            <li\n              className={`breadcrumb-item ${activeLink ? \"active\" : \"\"}`}\n              key={index}\n            >\n              {activeLink ? (\n                <Link to={value.link}>{value.name}</Link>\n              ) : (\n                value.name\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n}\n\nBreadcrumb.propTypes = {\n  breadCrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      link: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nBreadcrumb.defaultProps = {\n  breadCrumbs: [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n  ],\n};\n\nexport default Breadcrumb;\n"],"sourceRoot":""}