{"version":3,"sources":["components/common/inputLabel/InputLabel.js","utils/validationHelper.js","components/common/textInput/TextInput.js","components/common/pagination/Pagination.js","components/pageSpecific/sectors/form/Form.js","pages/sectors/edit/Edit.js","components/common/breadcrumb/Breadcrumb.js"],"names":["InputLabel","props","htmlFor","inputId","className","labelText","isRequired","defaultProps","validatorRule","value","validationKeyword","validation","status","message","test","validator","isEmpty","ignore_whitespace","isFloat","isEmail","isAlpha","ignore","isAlphanumeric","isNumeric","valData","split","equals","validate","inputvalue","validationRules","validationResult","forEach","validationRule","runningValidation","trim","TextInput","_validate","validationData","validations","_handleFormValidation","name","useEffect","id","labelClassName","placeholder","type","inputClassName","formValidationData","rows","onChange","onBlur","e","currentTarget","indexOf","Pagination","totalCount","currentPage","onPageChange","onClick","tabIndex","icon","faArrowLeft","Math","ceil","perPage","faArrowRight","SectorForm","formData","_handleOnChange","_fetchAllTrees","trees","illnesses","_fetchAllIllnesses","store","useSelector","selectTree","dispatch","useDispatch","_addSelection","tree","treeIds","treeData","_removeSelection","treeId","index","updatedTreeIds","splice","updatedTreeData","_handlePageChange","page","handleListFormDataChange","key","fetchList","listFormData","parseInt","Object","keys","statuses","map","checked","createBy","style","minHeight","textAlign","listCount","list","filter","scanId","length","faPlus","preventDefault","illness","SectorEdit","params","useParams","selectSector","pageName","keyword","fetchAllTrees","treesFormData","fetchAllIllnesses","illnessesFormData","document","title","process","initFormData","readData","breadCrumbs","link","onSubmit","updateData","customPath","keyName","Array","isArray","handleFormDataChange","formValidation","handleFormValidation","disabled","loading","role","Breadcrumb","activeLink","to"],"mappings":"uGAAA,uBAIA,SAASA,EAAWC,GAClB,OACE,wBAAOC,QAASD,EAAME,QAASC,UAAWH,EAAMG,UAAhD,UACGH,EAAMI,UAAW,IACjBJ,EAAMK,YAAc,sBAAMF,UAAU,cAAhB,kBAY3BJ,EAAWO,aAAe,CACxBH,UAAW,aACXE,YAAY,EACZD,UAAW,IAGEL,O,iCC1Bf,wDAEMQ,EAAgB,SAACC,EAAOC,GAC5B,IAAIC,EAAa,CAAEC,QAAQ,EAAMC,QAAS,IAC1C,QAAQ,GACN,IAAK,YAAYC,KAAKJ,GACpBC,EAAWC,QAAUG,IAAUC,QAAQP,EAAO,CAC5CQ,mBAAmB,IAErBN,EAAWE,SACa,IAAtBF,EAAWC,OAAmB,yBAA2B,GAC3D,MACF,IAAK,SAASE,KAAKJ,GACH,KAAVD,IACFE,EAAWC,OAASG,IAAUG,QAAQT,GACtCE,EAAWE,SACa,IAAtBF,EAAWC,OAAmB,iCAAmC,IAErE,MACF,IAAK,SAASE,KAAKJ,GACH,KAAVD,IACFE,EAAWC,OAASG,IAAUI,QAAQV,GACtCE,EAAWE,SACa,IAAtBF,EAAWC,OAAmB,kCAAoC,IAEtE,MACF,IAAK,SAASE,KAAKJ,GACH,KAAVD,IACFE,EAAWC,OAASG,IAAUK,QAAQX,EAAO,QAAS,CAAEY,OAAQ,MAChEV,EAAWE,SACa,IAAtBF,EAAWC,OACP,yCACA,IAER,MACF,IAAK,gBAAgBE,KAAKJ,GACV,KAAVD,IACFE,EAAWC,OAASG,IAAUO,eAAeb,EAAO,QAAS,CAC3DY,OAAQ,MAEVV,EAAWE,SACa,IAAtBF,EAAWC,OACP,sCACA,IAER,MACF,IAAK,WAAWE,KAAKJ,GACL,KAAVD,IACFE,EAAWC,OAASG,IAAUQ,UAAUd,GACxCE,EAAWE,SACa,IAAtBF,EAAWC,OACP,sCACA,IAER,MACF,IAAK,YAAYE,KAAKJ,GACpB,GAAc,KAAVD,EAAc,CAChB,IAAMe,EAAUd,EAAkBe,MAAM,KACxCd,EAAWC,OAASG,IAAUW,OAAOjB,EAAOe,EAAQ,IACpDb,EAAWE,SACa,IAAtBF,EAAWC,OAAX,wCACqCY,EAAQ,GAD7C,KAEI,GAER,MACF,QACEb,EAAWC,QAAS,EACpBD,EAAWE,QAAU,GAGzB,OAAOF,GAGIgB,EAAW,SAACC,GAAsC,IAA1BC,EAAyB,uDAAP,GAC/CC,EAAmB,CACvBlB,QAAQ,EACRC,QAAS,IASX,OAPAgB,EAAgBE,SAAQ,SAACC,GACvB,IAAMC,EAAoBzB,EAAcoB,EAAYI,GACpDF,EAAiBlB,OACfkB,EAAiBlB,QAAUqB,EAAkBrB,OAC/CkB,EAAiBjB,SAAW,IAAMoB,EAAkBpB,QACpDiB,EAAiBjB,QAAUiB,EAAiBjB,QAAQqB,UAE/CJ,I,uDCrFT,6CAMA,SAASK,EAAUlC,GACjB,IAAMmC,EAAY,SAAC3B,GACjB,IAAM4B,EAAiBV,YAASlB,GAAS,GAAIR,EAAMqC,cACrB,IAA1BD,EAAezB,OACjBX,EAAMsC,sBAAsBtC,EAAMuC,KAAMH,GAExCpC,EAAMsC,sBAAsBtC,EAAMuC,KAAM,OAS5C,OAJAC,qBAAU,WACRL,MACC,IAGD,sBAAKhC,UAAU,MAAf,UACE,cAAC,IAAD,CACED,QAASF,EAAMyC,GACftC,UAAWH,EAAM0C,eACjBtC,UAAWJ,EAAM2C,YACjBtC,WAAYL,EAAMK,aAEJ,aAAfL,EAAM4C,MACL,0BACEH,GAAIzC,EAAMyC,GACVtC,UAAS,UAAKH,EAAM6C,eAAX,YACP7C,EAAM8C,mBAAmB9C,EAAMuC,QACiB,IAAhDvC,EAAM8C,mBAAmB9C,EAAMuC,MAAM5B,QACrC,cAEFoC,KAAK,IACLJ,YAAa3C,EAAM2C,YACnBJ,KAAMvC,EAAMuC,KACZ/B,MAAOR,EAAMQ,MACbwC,SAAUhD,EAAMgD,SAChBC,OAAQ,SAACC,GAAD,OAAOf,EAAUe,EAAEC,cAAc3C,WAIN,IAAtC,CAAC,YAAY4C,QAAQpD,EAAM4C,OAC1B,uBACEH,GAAIzC,EAAMyC,GACVtC,UAAS,UAAKH,EAAM6C,eAAX,YACP7C,EAAM8C,mBAAmB9C,EAAMuC,QACiB,IAAhDvC,EAAM8C,mBAAmB9C,EAAMuC,MAAM5B,QACrC,cAEFiC,KAAM5C,EAAM4C,KACZD,YAAa3C,EAAM2C,YACnBJ,KAAMvC,EAAMuC,KACZ/B,MAAOR,EAAMQ,MACbwC,SAAUhD,EAAMgD,SAChBC,OAAQ,SAACC,GAAD,OAAOf,EAAUe,EAAEC,cAAc3C,UAI5CR,EAAM8C,mBAAmB9C,EAAMuC,QACkB,IAAhDvC,EAAM8C,mBAAmB9C,EAAMuC,MAAM5B,QACnC,qBAAKR,UAAU,mBAAf,SACGH,EAAM8C,mBAAmB9C,EAAMuC,MAAM3B,aAoBlDsB,EAAU5B,aAAe,CACvBoC,eAAgB,aAChBG,eAAgB,eAChBxC,YAAY,EACZgC,YAAa,GACb7B,MAAO,GACPwC,SAAU,cAGGd,O,uDC/Ff,+CAgBA,SAASmB,EAAT,GAAgE,IAA1CC,EAAyC,EAAzCA,WAAYC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAS7C,OACE,qBAAK,aAAW,kBAAhB,SACE,qBAAIrD,UAAU,iCAAd,UACE,oBAAIA,UAAS,oBAA+B,IAAhBoD,GAAqB,YAAjD,SACE,wBACEX,KAAK,SACLzC,UAAS,YACTsD,QAXS,WACjBD,EAAaD,EAAc,IAWnBG,SAAS,KACT,gBAAc,OALhB,SAOE,cAAC,IAAD,CAAiBC,KAAMC,UAG3B,oBACEzD,UAAS,oBACPoD,IAAgBM,KAAKC,KAAKR,EAAaS,MAAY,YAFvD,SAKE,wBAAQnB,KAAK,SAASzC,UAAS,YAAesD,QA3BvC,WACbD,EAAaD,EAAc,IA0BrB,SACA,cAAC,IAAD,CAAiBI,KAAMK,eAcjCX,EAAW/C,aAAe,CACxBgD,WAAY,EACZC,YAAa,GAGAF,O,kJC6UAY,IA9Xf,YASI,IARFC,EAQC,EARDA,SACAC,EAOC,EAPDA,gBAEAC,GAKC,EANDC,MAMC,EALDD,gBACAE,EAIC,EAJDA,UACAC,EAGC,EAHDA,mBACAzB,EAEC,EAFDA,mBACAR,EACC,EADDA,sBAEMkC,EAAQC,YAAYC,KACpBC,EAAWC,cAKXC,EAAgB,SAACC,GACrBX,EAAgB,CACdhB,cAAe,CACbZ,KAAM,UACN/B,MAAM,GAAD,mBAAM0D,EAASa,SAAf,CAAwBD,EAAKrC,QAGtC0B,EAAgB,CACdhB,cAAe,CACbZ,KAAM,WACN/B,MAAM,GAAD,mBAAM0D,EAASc,UAAf,CAAyBF,QAK9BG,EAAmB,SAACC,EAAQC,GAChC,IAAIC,EAAc,YAAOlB,EAASa,SAClCK,EAAeC,OAAOD,EAAehC,QAAQ8B,GAAS,GACtDf,EAAgB,CACdhB,cAAe,CACbZ,KAAM,UACN/B,MAAO4E,KAGX,IAAIE,EAAe,YAAOpB,EAASc,UACnCM,EAAgBD,OAAOF,EAAO,GAC9BhB,EAAgB,CACdhB,cAAe,CACbZ,KAAM,WACN/B,MAAO8E,MAKPC,EAAoB,WAAe,IAAdC,EAAa,uDAAN,EAChCb,EACEc,YAAyB,CACvBC,IAAK,OACLlF,MAAOgF,KAGXb,EAASgB,YAAU,2BAAKnB,EAAMoB,cAAZ,IAA0BJ,YAG9C,OACE,qCACGtB,EAASzB,GAAK,uBAAOG,KAAK,SAASpC,MAAO0D,EAASzB,KAAS,GAC7D,qBAAKtC,UAAU,WAAf,SAeE,qBAAKA,UAAU,SAAf,SACE,cAAC,IAAD,CACEsC,GAAG,SACHG,KAAK,OACLD,YAAY,OACZJ,KAAK,OACLlC,YAAY,EACZG,MAAO0D,EAAS3B,KAChBS,SAAUmB,EACV9B,YAAa,CAAC,YACdS,mBAAoBA,EACpBR,sBAAuBA,QAK7B,sBAAKnC,UAAU,OAAf,UACE,wBAAOF,QAAQ,SAASE,UAAU,aAAlC,oBACS,sBAAMA,UAAU,cAAhB,kBAET,wBACEsC,GAAG,SACHtC,UAAU,cACVoC,KAAK,SACLS,SAAUmB,EACV3D,MAAOqF,SAAS3B,EAASvD,QAL3B,SAOGmF,OAAOC,KAAKC,KAAUC,KAAI,SAACtF,EAAQwE,GAAT,OACzB,wBAAoB3E,MAAOG,EAA3B,SACGqF,IAASrF,IADCwE,WAOnB,sBAAKhF,UAAU,OAAf,UACE,wBAAOF,QAAQ,SAASE,UAAU,aAAlC,uBACY,sBAAMA,UAAU,cAAhB,kBAEZ,sBAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,+BAAf,UACE,uBACEA,UAAU,mBACVyC,KAAK,QACLL,KAAK,WACLE,GAAG,kBACHjC,MAAM,KACN0F,QAA+B,OAAtBhC,EAASiC,SAClBnD,SAAUmB,IAEZ,uBAAOhE,UAAU,mBAAmBF,QAAQ,kBAA5C,mBAIF,sBAAKE,UAAU,+BAAf,UACE,uBACEA,UAAU,mBACVyC,KAAK,QACLL,KAAK,WACLE,GAAG,uBACHjC,MAAM,UACN0F,QAA+B,YAAtBhC,EAASiC,SAClBnD,SAAUmB,IAEZ,uBAAOhE,UAAU,mBAAmBF,QAAQ,uBAA5C,8BAOiB,OAAtBiE,EAASiC,UACR,sBAAKhG,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,uCACA,uBACEA,UAAU,eACVyC,KAAK,OACLD,YAAY,UACZK,SAAU,SAACE,GAAD,OAAOkB,EAAelB,EAAEC,cAAc3C,aAQpD,sBAAKL,UAAU,YAAYiG,MAAO,CAAEC,UAAW,IAAKC,UAAW,UAA/D,UAEE,qBAAKnG,UAAU,uBAAf,SACE,cAAC,IAAD,CACEmD,WAAYuC,SAASrB,EAAM+B,WAC3BhD,YAAasC,SAASrB,EAAMoB,aAAaJ,MACzChC,aAAc+B,MAKlB,qBAAKpF,UAAU,aAAaiG,MAAO,CAAEE,UAAW,UAAhD,SACG9B,EAAMgC,KACJC,QAAO,SAAC3B,GAAD,OAAiD,IAAvCZ,EAASa,QAAQ3B,QAAQ0B,EAAKrC,OAC/CwD,KAAI,SAACnB,EAAMK,GAAP,OACH,qBACEhF,UAAU,yCAAyCiG,MAAO,CAAEE,UAAW,UAEvE7C,QAAS,SAACP,GACR2B,EAAcC,IAJlB,SAOE,qBAAK3E,UAAU,uCAAuCiG,MAAO,CAAEE,UAAW,UAA1E,SACE,mBAAGnG,UAAU,OAAb,SAAqB2E,EAAK4B,YANvBvB,QAgBb,qBAAKhF,UAAU,uBAAf,SACE,cAAC,IAAD,CACEmD,WAAYuC,SAASrB,EAAM+B,WAC3BhD,YAAasC,SAASrB,EAAMoB,aAAaJ,MACzChC,aAAc+B,cAUxB,qBAAKpF,UAAU,SAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,kDAEF,qBAAKA,UAAU,YAAYiG,MAAO,CAAEC,UAAW,KAA/C,SACE,qBAAKlG,UAAU,iBAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,sBAAKA,UAAU,YAAf,UAC+B,IAA5B+D,EAASa,QAAQ4B,QAChB,qBACExG,UAAU,qCACViG,MAAO,CAAEC,UAAW,KAFtB,SAIE,sBAAKlG,UAAU,YAAf,UACE,cAAC,IAAD,CAAiBwD,KAAMiD,MACvB,gFAIL1C,EAASc,SAAS2B,OAAS,GAC1B,qBAAKxG,UAAU,MAAMiG,MAAO,CAAEC,UAAW,KAAzC,SACGnC,EAASc,SAASiB,KAAI,SAACnB,EAAMK,GAAP,OACrB,qBAAKhF,UAAU,MAAf,SACE,wBACEA,UAAU,4BACVyC,KAAK,SACLa,QAAS,SAACP,GACRA,EAAE2D,iBACF5B,EAAiBH,EAAKrC,GAAI0C,IAL9B,SAQGL,EAAK4B,UATgBvB,yBAwBzB,YAAtBjB,EAASiC,UACR,sBAAKhG,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,2CACA,uBACEA,UAAU,eACVyC,KAAK,OACLD,YAAY,UACZK,SAAU,SAACE,GAAD,OAAOqB,EAAmBrB,EAAEC,cAAc3C,aAGxD,qBAAKL,UAAU,YAAf,SACE,qBACEsC,GAAG,mBACHtC,UAAU,4BACViG,MAAO,CAAEC,UAAW,KAHtB,SAKG/B,EAAU2B,KAAI,SAACa,EAAS3B,GAAV,OACb,sBAAKhF,UAAU,iBAAf,UACE,oBACEA,UAAU,mBACVsC,GAAE,+BAA0B0C,GAF9B,SAIE,wBACEhF,UAAU,6BACVyC,KAAK,SACL,iBAAe,WACf,kDAA0CuC,GAC1C,gBAAc,QACd,iDAAyCA,GAN3C,SAQG2B,EAAQvE,SAGb,qBACEE,GAAE,gCAA2B0C,GAC7BhF,UAAU,8BACV,iDAAyCgF,GACzC,iBAAe,oBAJjB,SAME,qBAAKhF,UAAU,iBAAf,SACE,qBAAKA,UAAU,aAAf,SACG2G,EAAQ9B,SACNyB,QACC,SAAC3B,GAAD,OACyC,IAAvCZ,EAASa,QAAQ3B,QAAQ0B,EAAKrC,OAEjCwD,KAAI,SAACnB,EAAMK,GAAP,OACH,qBACEhF,UAAU,yCAEVsD,QAAS,SAACP,GACR2B,EAAcC,IAJlB,SAOE,qBAAK3E,UAAU,uCAAf,SACE,mBAAGA,UAAU,OAAb,SAAqB2E,EAAK4B,YANvBvB,cAhCkBA,eAmD/C,qBAAKhF,UAAU,QAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,kDAEF,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,aAAaiG,MAAO,CAAEC,UAAW,KAAhD,SACE,qBAAKlG,UAAU,kBAAf,SACE,sBAAKA,UAAU,YAAf,UAC+B,IAA5B+D,EAASa,QAAQ4B,QAChB,qBACExG,UAAU,qCACViG,MAAO,CAAEC,UAAW,KAFtB,SAIE,sBAAKlG,UAAU,YAAf,UACE,cAAC,IAAD,CAAiBwD,KAAMiD,MACvB,yEAIL1C,EAASa,QAAQ4B,OAAS,GACzB,qBAAKxG,UAAU,MAAMiG,MAAO,CAAEC,UAAW,KAAzC,SACGnC,EAASc,SAASiB,KAAI,SAACnB,EAAMK,GAAP,OACrB,qBAAKhF,UAAU,MAAf,SACE,wBACEA,UAAU,4BACVyC,KAAK,SACLa,QAAS,SAACP,GACRA,EAAE2D,iBACF5B,EAAiBH,EAAKrC,GAAI0C,IAL9B,SAQGL,EAAK4B,UATgBvB,8B,iJChOvC4B,UAjIf,WACE,IAAMC,EAASC,cACTzC,EAAQC,YAAYyC,KACpBvC,EAAWC,cACXuC,EAAW,cAmCX/C,EAAiB,WAAmB,IAAlBgD,EAAiB,uDAAP,GAChCzC,EAAS0C,YAAc,2BAAK7C,EAAM8C,eAAZ,IAA2BF,eAG7C7C,EAAqB,WAAmB,IAAlB6C,EAAiB,uDAAP,GACpCzC,EAAS4C,YAAkB,2BAAK/C,EAAMgD,mBAAZ,IAA+BJ,eAgB3D,OARA5E,qBAAU,WACRiF,SAASC,MAAT,UAAoBC,iBAApB,cAAoDR,GACpDxC,EAASiD,eACTxD,IACAG,IACAI,EAASkD,YAAS,CAAEpF,GAAIuE,EAAOvE,QAC9B,IAGD,qBAAKtC,UAAU,0GAAf,SACE,sBAAKA,UAAU,6BAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,WAAf,SACE,oBAAIA,UAAU,MAAd,SAAqBgH,MAEvB,qBAAKhH,UAAU,WAAf,SACE,cAAC,IAAD,CAAY2H,YAjEN,CAClB,CACEvF,KAAM,YACNwF,KAAM,cAER,CACExF,KAAM,UACNwF,KAAM,YAER,CACExF,KAAM,OACNwF,KAAM,gBA4DJ,yBAAS5H,UAAU,UAAnB,SACE,qBAAKA,UAAU,kBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,iCAAf,SACE,qBAAKA,UAAW,MAAhB,oBAGF,uBAAMoC,KAAI,UAAK4E,EAAL,UAAuBa,SAtCvB,SAAC9E,GACzBA,EAAE2D,iBACFlC,EAASsD,YAAW,aAAExF,GAAIuE,EAAOvE,IAAO+B,EAAMN,aAoChC,UACE,qBAAK/D,UAAU,YAAf,SACE,cAAC,IAAD,CACE+D,SAAUM,EAAMN,SAChBC,gBArEE,SAACjB,EAAGgF,GAC1B,IAAIC,EAAUjF,EAAEC,cAAcZ,KAC1B6F,MAAMC,QAAQH,IAAeA,EAAWvB,OAAS,IACnDwB,EAAO,sBAAOD,GAAP,CAAmBhF,EAAEC,cAAcZ,QAE5CoC,EACE2D,YAAqB,CAAE5C,IAAKyC,EAAS3H,MAAO0C,EAAEC,cAAc3C,UAgE1C6D,MAAOG,EAAMH,MACbD,eAAgBA,EAChBE,UAAWE,EAAMF,UACjBC,mBAAoBA,EACpBzB,mBAAoB0B,EAAM+D,eAC1BjG,sBAjEQ,SAACoD,EAAKlF,GAClCmE,EACE6D,YAAqB,CACnB9C,MACAlF,gBAiEY,qBAAKL,UAAU,uBAAf,SACE,yBACEA,UAAU,+BACVsI,SACE3C,OAAOC,KAAKvB,EAAM+D,gBAAgB5B,OAAS,IACzB,IAAlBnC,EAAMkE,SAC2B,GAAjClE,EAAMN,SAASa,QAAQ4B,OAL3B,WAQqB,IAAlBnC,EAAMkE,SACL,sBACEvI,UAAU,mCACVwI,KAAK,SACL,cAAY,SAEb,IAdL,iC,gCCrHtB,8BAKA,SAASC,EAAT,GAAsC,IAAhBd,EAAe,EAAfA,YACpB,OACE,qBAAK3H,UAAU,eAAe,aAAW,aAAzC,SACE,oBAAIA,UAAU,aAAd,SACG2H,EAAY7B,KAAI,SAACzF,EAAO2E,GACvB,IAAM0D,EAAarI,EAAMuH,MAAuB,KAAfvH,EAAMuH,KACvC,OACE,oBACE5H,UAAS,0BAAqB0I,EAAa,SAAW,IADxD,SAIGA,EACC,cAAC,IAAD,CAAMC,GAAItI,EAAMuH,KAAhB,SAAuBvH,EAAM+B,OAE7B/B,EAAM+B,MALH4C,UAwBnByD,EAAWtI,aAAe,CACxBwH,YAAa,CACX,CACEvF,KAAM,YACNwF,KAAM,gBAKGa,O","file":"static/js/25.522d7100.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./InputLabel.scss\";\n\nfunction InputLabel(props) {\n  return (\n    <label htmlFor={props.inputId} className={props.className}>\n      {props.labelText}{\" \"}\n      {props.isRequired && <span className=\"text-danger\">*</span>}\n    </label>\n  );\n}\n\nInputLabel.propTypes = {\n  inputId: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  labelText: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool.isRequired\n};\n\nInputLabel.defaultProps = {\n  className: \"form-label\",\n  isRequired: false,\n  labelText: \"\",\n};\n\nexport default InputLabel;\n","import validator from \"validator\";\r\n\r\nconst validatorRule = (value, validationKeyword) => {\r\n  let validation = { status: true, message: \"\" };\r\n  switch (true) {\r\n    case /required/i.test(validationKeyword):\r\n      validation.status = !validator.isEmpty(value, {\r\n        ignore_whitespace: true,\r\n      });\r\n      validation.message =\r\n        validation.status === false ? \"The value is required!\" : \"\";\r\n      break;\r\n    case /float/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isFloat(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be a float!\" : \"\";\r\n      }\r\n      break;\r\n    case /email/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isEmail(value);\r\n        validation.message =\r\n          validation.status === false ? \"The value needs to be an Email!\" : \"\";\r\n      }\r\n      break;\r\n    case /alpha/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlpha(value, \"en-US\", { ignore: \" \" });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Alphabetic!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /alphanumeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isAlphanumeric(value, \"en-US\", {\r\n          ignore: \" \",\r\n        });\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be AlphaNumeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /numeric/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        validation.status = validator.isNumeric(value);\r\n        validation.message =\r\n          validation.status === false\r\n            ? \"The value needs to be only Numeric!\"\r\n            : \"\";\r\n      }\r\n      break;\r\n    case /equals:*/i.test(validationKeyword):\r\n      if (value !== \"\") {\r\n        const valData = validationKeyword.split(\":\");\r\n        validation.status = validator.equals(value, valData[2]);\r\n        validation.message =\r\n          validation.status === false\r\n            ? `The value needs to be same as ${valData[1]}!`\r\n            : \"\";\r\n      }\r\n      break;\r\n    default:\r\n      validation.status = true;\r\n      validation.message = \"\";\r\n      break;\r\n  }\r\n  return validation;\r\n};\r\n\r\nexport const validate = (inputvalue, validationRules = []) => {\r\n  const validationResult = {\r\n    status: true,\r\n    message: \"\",\r\n  };\r\n  validationRules.forEach((validationRule) => {\r\n    const runningValidation = validatorRule(inputvalue, validationRule);\r\n    validationResult.status =\r\n      validationResult.status && runningValidation.status;\r\n    validationResult.message += \" \" + runningValidation.message;\r\n    validationResult.message = validationResult.message.trim();\r\n  });\r\n  return validationResult;\r\n};\r\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./TextInput.scss\";\nimport InputLabel from \"../inputLabel/InputLabel\";\nimport { validate } from \"../../../utils/validationHelper\";\n\nfunction TextInput(props) {\n  const _validate = (value) => {\n    const validationData = validate(value || \"\", props.validations);\n    if (validationData.status === false) {\n      props._handleFormValidation(props.name, validationData);\n    } else {\n      props._handleFormValidation(props.name, null);\n    }\n  };\n\n  // Remove if Validation causes issue\n  useEffect(() => {\n    _validate();\n  }, []);\n\n  return (\n    <div className=\"m-2\">\n      <InputLabel\n        inputId={props.id}\n        className={props.labelClassName}\n        labelText={props.placeholder}\n        isRequired={props.isRequired}\n      />\n      {props.type === \"textarea\" && (\n        <textarea\n          id={props.id}\n          className={`${props.inputClassName} ${\n            props.formValidationData[props.name] &&\n            props.formValidationData[props.name].status === false &&\n            \"is-invalid\"\n          }`}\n          rows=\"3\"\n          placeholder={props.placeholder}\n          name={props.name}\n          value={props.value}\n          onChange={props.onChange}\n          onBlur={(e) => _validate(e.currentTarget.value)}\n        />\n      )}\n\n      {[\"textarea\"].indexOf(props.type) === -1 && (\n        <input\n          id={props.id}\n          className={`${props.inputClassName} ${\n            props.formValidationData[props.name] &&\n            props.formValidationData[props.name].status === false &&\n            \"is-invalid\"\n          }`}\n          type={props.type}\n          placeholder={props.placeholder}\n          name={props.name}\n          value={props.value}\n          onChange={props.onChange}\n          onBlur={(e) => _validate(e.currentTarget.value)}\n        />\n      )}\n\n      {props.formValidationData[props.name] &&\n        props.formValidationData[props.name].status === false && (\n          <div className=\"invalid-feedback\">\n            {props.formValidationData[props.name].message}\n          </div>\n        )}\n    </div>\n  );\n}\n\nTextInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  labelClassName: PropTypes.string.isRequired,\n  inputClassName: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  validations: PropTypes.array,\n  onChange: PropTypes.func.isRequired,\n};\n\nTextInput.defaultProps = {\n  labelClassName: \"form-label\",\n  inputClassName: \"form-control\",\n  isRequired: false,\n  validations: [],\n  value: \"\",\n  onChange: () => {},\n};\n\nexport default TextInput;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Pagination.scss\";\nimport { perPage } from \"../../../utils/appConstants\";\nimport {\n  faEdit,\n  faEye,\n  faRedo,\n  faSearch,\n  faTrash,\n  faArrowAltCircleLeft,\n  faArrowLeft,\n  faArrowRight\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction Pagination({ totalCount, currentPage, onPageChange }) {\n  const onNext = () => {\n    onPageChange(currentPage + 1);\n  };\n\n  const onPrevious = () => {\n    onPageChange(currentPage - 1);\n  };\n\n  return (\n    <nav aria-label=\"Page navigation\">\n      <ul className=\"pagination justify-content-end\">\n        <li className={`page-item ${currentPage === 1 && \"disabled\"}`}>\n          <button\n            type=\"button\"\n            className={`page-link`}\n            onClick={onPrevious}\n            tabIndex=\"-1\"\n            aria-disabled=\"true\"\n          >\n            <FontAwesomeIcon icon={faArrowLeft} />\n          </button>\n        </li>\n        <li\n          className={`page-item ${\n            currentPage === Math.ceil(totalCount / perPage) && \"disabled\"\n          }`}\n        >\n          <button type=\"button\" className={`page-link`} onClick={onNext}>\n          <FontAwesomeIcon icon={faArrowRight} />\n          </button>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nPagination.propTypes = {\n  totalCount: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nPagination.defaultProps = {\n  totalCount: 0,\n  currentPage: 1,\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { statuses } from \"../../../../utils/appConstants\";\nimport TextInput from \"../../../common/textInput/TextInput\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  initFormData,\n  deleteData,\n  fetchList,\n  handleListFormDataChange,\n  selectTree,\n} from \"../../../../store/redux/Page/Tree\";\nimport Pagination from \"../../../../components/common/pagination/Pagination\";\n\nfunction SectorForm({\n  formData,\n  _handleOnChange,\n  trees,\n  _fetchAllTrees,\n  illnesses,\n  _fetchAllIllnesses,\n  formValidationData,\n  _handleFormValidation,\n}) {\n  const store = useSelector(selectTree);\n  const dispatch = useDispatch();\n  const page = {\n    current: 1\n  };\n\n  const _addSelection = (tree) => {\n    _handleOnChange({\n      currentTarget: {\n        name: \"treeIds\",\n        value: [...formData.treeIds, tree.id],\n      },\n    });\n    _handleOnChange({\n      currentTarget: {\n        name: \"treeData\",\n        value: [...formData.treeData, tree],\n      },\n    });\n  };\n\n  const _removeSelection = (treeId, index) => {\n    let updatedTreeIds = [...formData.treeIds];\n    updatedTreeIds.splice(updatedTreeIds.indexOf(treeId), 1);\n    _handleOnChange({\n      currentTarget: {\n        name: \"treeIds\",\n        value: updatedTreeIds,\n      },\n    });\n    let updatedTreeData = [...formData.treeData];\n    updatedTreeData.splice(index, 1);\n    _handleOnChange({\n      currentTarget: {\n        name: \"treeData\",\n        value: updatedTreeData,\n      },\n    });\n  };\n\n  const _handlePageChange = (page = 1) => {\n    dispatch(\n      handleListFormDataChange({\n        key: \"page\",\n        value: page,\n      })\n    );\n    dispatch(fetchList({ ...store.listFormData, page }));\n  };\n\n  return (\n    <>\n      {formData.id ? <input type=\"hidden\" value={formData.id} /> : \"\"}\n      <div className=\"row mb-3\">\n        {/* <div className=\"col-sm-12 col-md-6\">\n          <TextInput\n            id=\"input1\"\n            type=\"text\"\n            placeholder=\"Scan Id\"\n            name=\"scanId\"\n            isRequired={true}\n            value={formData.scanId}\n            onChange={_handleOnChange}\n            validations={[\"required\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div> */}\n        <div className=\"col-12\">\n          <TextInput\n            id=\"input1\"\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            isRequired={true}\n            value={formData.name}\n            onChange={_handleOnChange}\n            validations={[\"required\"]}\n            formValidationData={formValidationData}\n            _handleFormValidation={_handleFormValidation}\n          />\n        </div>\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"input2\" className=\"form-label\">\n          Status <span className=\"text-danger\">*</span>\n        </label>\n        <select\n          id=\"input2\"\n          className=\"form-select\"\n          name=\"status\"\n          onChange={_handleOnChange}\n          value={parseInt(formData.status)}\n        >\n          {Object.keys(statuses).map((status, index) => (\n            <option key={index} value={status}>\n              {statuses[status]}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"input3\" className=\"form-label\">\n          Create By <span className=\"text-danger\">*</span>\n        </label>\n        <div className=\"form-control\">\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"createBy\"\n              id=\"radioCreateById\"\n              value=\"id\"\n              checked={formData.createBy === \"id\"}\n              onChange={_handleOnChange}\n            />\n            <label className=\"form-check-label\" htmlFor=\"radioCreateById\">\n              Id\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"createBy\"\n              id=\"radioCreateByIllness\"\n              value=\"illness\"\n              checked={formData.createBy === \"illness\"}\n              onChange={_handleOnChange}\n            />\n            <label className=\"form-check-label\" htmlFor=\"radioCreateByIllness\">\n              Illness\n            </label>\n          </div>\n        </div>\n      </div>\n\n      {formData.createBy === \"id\" && (\n        <div className=\"row\">\n          <div className=\"col-2\">\n            <div className=\"card\">\n              <div className=\"card-header\">\n                <h4>Trees</h4>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Keyword\"\n                  onChange={(e) => _fetchAllTrees(e.currentTarget.value)}\n                />\n              </div>\n\n\n\n\n\n              <div className=\"card-body\" style={{ minHeight: 300, textAlign: \"center\" }}>\n\n                <div className=\"card-footer clearfix\">\n                  <Pagination\n                    totalCount={parseInt(store.listCount)}\n                    currentPage={parseInt(store.listFormData.page)}\n                    onPageChange={_handlePageChange}\n                  />\n                </div>\n\n\n                <div className=\"list-group\" style={{ textAlign: \"center\" }}>\n                  {store.list\n                    .filter((tree) => formData.treeIds.indexOf(tree.id) === -1)\n                    .map((tree, index) => (\n                      <div\n                        className=\"list-group-item list-group-item-action\" style={{ textAlign: \"center\" }}\n                        key={index}\n                        onClick={(e) => {\n                          _addSelection(tree);\n                        }}\n                      >\n                        <div className=\"d-flex w-200 justify-content-between\" style={{ textAlign: \"center\" }}>\n                          <p className=\"mb-1\">{tree.scanId}</p>\n                        </div>\n                      </div>\n                    ))}\n                </div>\n\n\n\n\n\n                <div className=\"card-footer clearfix\">\n                  <Pagination\n                    totalCount={parseInt(store.listCount)}\n                    currentPage={parseInt(store.listFormData.page)}\n                    onPageChange={_handlePageChange}\n                  />\n                </div>\n\n\n\n\n              </div>\n            </div>\n          </div>\n          <div className=\"col-10\">\n            <div className=\"card\">\n              <div className=\"card-header\">\n                <h4>Selected Trees</h4>\n              </div>\n              <div className=\"card-body\" style={{ minHeight: 300 }}>\n                <div className=\"row list-group\">\n                  <div className=\"col-12 list-group-item\">\n                    <div className=\"container\">\n                      {formData.treeIds.length === 0 && (\n                        <div\n                          className=\"row align-items-center text-center\"\n                          style={{ minHeight: 300 }}\n                        >\n                          <div className=\"col-md-12\">\n                            <FontAwesomeIcon icon={faPlus} />\n                            <h5>Click on the trees to add to the selector</h5>\n                          </div>\n                        </div>\n                      )}\n                      {formData.treeData.length > 0 && (\n                        <div className=\"row\" style={{ minHeight: 300 }}>\n                          {formData.treeData.map((tree, index) => (\n                            <div className=\"col\" key={index}>\n                              <button\n                                className=\"btn btn-outline-secondary\"\n                                type=\"button\"\n                                onClick={(e) => {\n                                  e.preventDefault();\n                                  _removeSelection(tree.id, index);\n                                }}\n                              >\n                                {tree.scanId}\n                              </button>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {formData.createBy === \"illness\" && (\n        <div className=\"row\">\n          <div className=\"col-5\">\n            <div className=\"card\">\n              <div className=\"card-header\">\n                <h4>Illnesses</h4>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Keyword\"\n                  onChange={(e) => _fetchAllIllnesses(e.currentTarget.value)}\n                />\n              </div>\n              <div className=\"card-body\">\n                <div\n                  id=\"illnessAccordion\"\n                  className=\"accordion accordion-flush\"\n                  style={{ minHeight: 300 }}\n                >\n                  {illnesses.map((illness, index) => (\n                    <div className=\"accordion-item\" key={index}>\n                      <h2\n                        className=\"accordion-header\"\n                        id={`illness-flush-heading${index}`}\n                      >\n                        <button\n                          className=\"accordion-button collapsed\"\n                          type=\"button\"\n                          data-bs-toggle=\"collapse\"\n                          data-bs-target={`#illness-flush-collapse${index}`}\n                          aria-expanded=\"false\"\n                          aria-controls={`#illness-flush-collapse${index}`}\n                        >\n                          {illness.name}\n                        </button>\n                      </h2>\n                      <div\n                        id={`illness-flush-collapse${index}`}\n                        className=\"accordion-collapse collapse\"\n                        aria-labelledby={`illness-flush-heading${index}`}\n                        data-bs-parent=\"#illnessAccordion\"\n                      >\n                        <div className=\"accordion-body\">\n                          <div className=\"list-group\">\n                            {illness.treeData\n                              .filter(\n                                (tree) =>\n                                  formData.treeIds.indexOf(tree.id) === -1\n                              )\n                              .map((tree, index) => (\n                                <div\n                                  className=\"list-group-item list-group-item-action\"\n                                  key={index}\n                                  onClick={(e) => {\n                                    _addSelection(tree);\n                                  }}\n                                >\n                                  <div className=\"d-flex w-100 justify-content-between\">\n                                    <p className=\"mb-1\">{tree.scanId}</p>\n                                  </div>\n                                </div>\n                              ))}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-7\">\n            <div className=\"card\">\n              <div className=\"card-header\">\n                <h4>Selected Trees</h4>\n              </div>\n              <div className=\"card-body\">\n                <div className=\"list-group\" style={{ minHeight: 300 }}>\n                  <div className=\"list-group-item\">\n                    <div className=\"container\">\n                      {formData.treeIds.length === 0 && (\n                        <div\n                          className=\"row align-items-center text-center\"\n                          style={{ minHeight: 300 }}\n                        >\n                          <div className=\"col-md-12\">\n                            <FontAwesomeIcon icon={faPlus} />\n                            <h5>Click trees to add to the selector</h5>\n                          </div>\n                        </div>\n                      )}\n                      {formData.treeIds.length > 0 && (\n                        <div className=\"row\" style={{ minHeight: 300 }}>\n                          {formData.treeData.map((tree, index) => (\n                            <div className=\"col\" key={index}>\n                              <button\n                                className=\"btn btn-outline-secondary\"\n                                type=\"button\"\n                                onClick={(e) => {\n                                  e.preventDefault();\n                                  _removeSelection(tree.id, index);\n                                }}\n                              >\n                                {tree.scanId}\n                              </button>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default SectorForm;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./Edit.scss\";\nimport Breadcrumb from \"../../../components/common/breadcrumb/Breadcrumb\";\nimport {\n  handleFormDataChange,\n  handleFormValidation,\n  initFormData,\n  readData,\n  selectSector,\n  updateData,\n  fetchAllTrees,\n  fetchAllIllnesses,\n} from \"../../../store/redux/Page/Sector\";\nimport SectorForm from \"../../../components/pageSpecific/sectors/form/Form\";\nimport { useParams } from \"react-router-dom\";\n\nfunction SectorEdit() {\n  const params = useParams();\n  const store = useSelector(selectSector);\n  const dispatch = useDispatch();\n  const pageName = \"Edit sector\";\n  const breadCrumbs = [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n    {\n      name: \"Sectors\",\n      link: \"/sectors\",\n    },\n    {\n      name: \"Edit\",\n      link: \"\",\n    },\n  ];\n\n  const _handleOnChange = (e, customPath) => {\n    let keyName = e.currentTarget.name;\n    if (Array.isArray(customPath) && customPath.length > 0)\n      keyName = [...customPath, e.currentTarget.name];\n\n    dispatch(\n      handleFormDataChange({ key: keyName, value: e.currentTarget.value })\n    );\n  };\n\n  const _handleFormValidation = (key, value) => {\n    dispatch(\n      handleFormValidation({\n        key,\n        value,\n      })\n    );\n  };\n\n  const _fetchAllTrees = (keyword = \"\") => {\n    dispatch(fetchAllTrees({ ...store.treesFormData, keyword }));\n  };\n\n  const _fetchAllIllnesses = (keyword = \"\") => {\n    dispatch(fetchAllIllnesses({ ...store.illnessesFormData, keyword }));\n  };\n\n  const _handleFormSubmit = (e) => {\n    e.preventDefault();\n    dispatch(updateData({ id: params.id, ...store.formData }));\n  };\n\n  useEffect(() => {\n    document.title = `${process.env.REACT_APP_NAME} | ${pageName}`;\n    dispatch(initFormData());\n    _fetchAllTrees();\n    _fetchAllIllnesses();\n    dispatch(readData({ id: params.id }));\n  }, []);\n\n  return (\n    <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n      <div className=\"col-12 p-0 content-wrapper\">\n        <div className=\"content-header\">\n          <div className=\"container-fluid\">\n            <div className=\"row mb-2\">\n              <div className=\"col-sm-6\">\n                <h1 className=\"m-0\">{pageName}</h1>\n              </div>\n              <div className=\"col-sm-6\">\n                <Breadcrumb breadCrumbs={breadCrumbs} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <section className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n                  <div className=\"card-header border-transparent\">\n                    <div className={\"row\"}>&nbsp;</div>\n                  </div>\n\n                  <form name={`${pageName}Create`} onSubmit={_handleFormSubmit}>\n                    <div className=\"card-body\">\n                      <SectorForm\n                        formData={store.formData}\n                        _handleOnChange={_handleOnChange}\n                        trees={store.trees}\n                        _fetchAllTrees={_fetchAllTrees}\n                        illnesses={store.illnesses}\n                        _fetchAllIllnesses={_fetchAllIllnesses}\n                        formValidationData={store.formValidation}\n                        _handleFormValidation={_handleFormValidation}\n                      />\n                    </div>\n\n                    <div className=\"card-footer clearfix\">\n                      <button\n                        className=\"btn btn-sm btn-app float-end\"\n                        disabled={\n                          Object.keys(store.formValidation).length > 0 ||\n                          store.loading === true ||\n                          store.formData.treeIds.length == 0\n                        }\n                      >\n                        {store.loading === true && (\n                          <span\n                            className=\"spinner-border spinner-border-sm\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                          ></span>\n                        )}{\" \"}\n                        Save\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default SectorEdit;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Breadcrumb.scss\";\nimport { Link } from \"react-router-dom\";\n\nfunction Breadcrumb({ breadCrumbs }) {\n  return (\n    <nav className=\"float-sm-end\" aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        {breadCrumbs.map((value, index) => {\n          const activeLink = value.link && value.link !== \"\";\n          return (\n            <li\n              className={`breadcrumb-item ${activeLink ? \"active\" : \"\"}`}\n              key={index}\n            >\n              {activeLink ? (\n                <Link to={value.link}>{value.name}</Link>\n              ) : (\n                value.name\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n}\n\nBreadcrumb.propTypes = {\n  breadCrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      link: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nBreadcrumb.defaultProps = {\n  breadCrumbs: [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n  ],\n};\n\nexport default Breadcrumb;\n"],"sourceRoot":""}