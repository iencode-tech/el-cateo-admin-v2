{"version":3,"sources":["utils/timeHelper.js","components/pageSpecific/zones/linked/soils/view/View.js","components/pageSpecific/zones/view/View.js","pages/zones/view/View.js","components/common/breadcrumb/Breadcrumb.js"],"names":["utcToLocalTime","dateTimeString","format","moment","SoilView","formData","_handleOnChange","_handleRemoveBtnClick","className","htmlFor","id","soilType","date","ph","clay","sand","calcium","magnesium","potassium","sodium","aluminum","silt","observation","ZoneView","_addNewSoil","_removeSoil","name","latitude","longitude","statuses","parseInt","status","soils","map","value","index","params","useParams","store","useSelector","selectZone","dispatch","useDispatch","pageName","useEffect","document","title","process","initFormData","readData","Breadcrumb","breadCrumbs","link","activeLink","to","defaultProps"],"mappings":"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","file":"static/js/46.946e8283.chunk.js","sourcesContent":["import moment from \"moment\";\n\nexport const utcToLocalTime = (\n  dateTimeString,\n  format = \"MM-DD-YYYY h:mm A\"\n) => {\n  return (dateTimeString ? moment(dateTimeString) : moment()).format(format);\n};\n\nexport const localToUtcTime = (\n  dateTimeString,\n  format = \"MM-DD-YYYY h:mm A\"\n) => {\n  return (dateTimeString ? moment(dateTimeString) : moment()).utc().format(format);\n};\n","import React from \"react\";\nimport { utcToLocalTime } from \"../../../../../../utils/timeHelper\";\n\nfunction SoilView({ formData, _handleOnChange, _handleRemoveBtnClick }) {\n  return (\n    <div className=\"card mb-3\">\n      <div className=\"card-header border-transparent\"></div>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col-6 mb-3\">\n            <label htmlFor=\"sfInput1\" className=\"form-label\">\n              Soil Type\n            </label>\n            <span id=\"sfInput1\" className=\"form-control\">\n              {formData.soilType}\n            </span>\n          </div>\n          <div className=\"col-6 mb-3\">\n            <label htmlFor=\"sfInput2\" className=\"form-label\">\n              Date\n            </label>\n            <span id=\"sfInput2\" className=\"form-control\">\n              {utcToLocalTime(formData.date, \"YYYY-MM-DD\")}\n            </span>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-4 col-sm-12 mb-3\">\n            <label htmlFor=\"sfInput3\" className=\"form-label\">\n              PH\n            </label>\n            <span id=\"sfInput3\" className=\"form-control\">\n              {formData.ph}\n            </span>\n          </div>\n          <div className=\"col-md-4 col-sm-12 mb-3\">\n            <label htmlFor=\"sfInput4\" className=\"form-label\">\n              Clay\n            </label>\n            <span id=\"sfInput4\" className=\"form-control\">\n              {formData.clay}\n            </span>\n          </div>\n          <div className=\"col-md-4 col-sm-12 mb-3\">\n            <label htmlFor=\"sfInput5\" className=\"form-label\">\n              Sand\n            </label>\n            <span id=\"sfInput5\" className=\"form-control\">\n              {formData.sand}\n            </span>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-4 col-sm-12 mb-3\">\n            <label htmlFor=\"sfInput6\" className=\"form-label\">\n              Calcium\n            </label>\n            <span id=\"sfInput6\" className=\"form-control\">\n              {formData.calcium}\n            </span>\n          </div>\n          <div className=\"col-md-4 col-sm-12 mb-3\">\n            <label htmlFor=\"sfInput7\" className=\"form-label\">\n              Magnesium\n            </label>\n            <span id=\"sfInput7\" className=\"form-control\">\n              {formData.magnesium}\n            </span>\n          </div>\n          <div className=\"col-md-4 col-sm-12 mb-3\">\n            <label htmlFor=\"sfInput8\" className=\"form-label\">\n              Potassium\n            </label>\n            <span id=\"sfInput8\" className=\"form-control\">\n              {formData.potassium}\n            </span>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-4 col-sm-12 mb-3\">\n            <label htmlFor=\"sfInput9\" className=\"form-label\">\n              Sodium\n            </label>\n            <span id=\"sfInput9\" className=\"form-control\">\n              {formData.sodium}\n            </span>\n          </div>\n          <div className=\"col-md-4 col-sm-12 mb-3\">\n            <label htmlFor=\"sfInput10\" className=\"form-label\">\n              Aluminum\n            </label>\n            <span id=\"sfInput10\" className=\"form-control\">\n              {formData.aluminum}\n            </span>\n          </div>\n          <div className=\"col-md-4 col-sm-12 mb-3\">\n            <label htmlFor=\"sfInput11\" className=\"form-label\">\n              Silt\n            </label>\n            <span id=\"sfInput11\" className=\"form-control\">\n              {formData.silt}\n            </span>\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"sfInput12\" className=\"form-label\">\n            Observation\n          </label>\n          <span id=\"sfInput12\" className=\"form-control\">\n            {formData.observation}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SoilView;\n","import React from \"react\";\nimport { statuses } from \"../../../../utils/appConstants\";\nimport SoilView from \"../linked/soils/view/View\";\n\nfunction ZoneView({ formData, _handleOnChange, _addNewSoil, _removeSoil }) {\n  return (\n    <>\n      <div className=\"mb-3\">\n        <label htmlFor=\"input1\" className=\"form-label\">\n          Name\n        </label>\n        <span id=\"input1\" className=\"form-control\">\n          {formData.name}\n        </span>\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"input2\" className=\"form-label\">\n          Latitude\n        </label>\n        <span id=\"input2\" className=\"form-control\">\n          {formData.latitude}\n        </span>\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"input3\" className=\"form-label\">\n          Longitude\n        </label>\n        <span id=\"input3\" className=\"form-control\">\n          {formData.longitude}\n        </span>\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"input4\" className=\"form-label\">\n          Status\n        </label>\n        <span id=\"input4\" className=\"form-control\">\n          {statuses[parseInt(formData.status)]}\n        </span>\n      </div>\n\n      <div className=\"mb-3\">\n        <div className=\"card\">\n          <div className=\"card-header border-transparent\">\n            <h4 className=\"m-0\">Soil</h4>\n          </div>\n          <div className=\"card-body\">\n            {formData.soils.map((value, index) => (\n              <SoilView key={index} formData={value} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default ZoneView;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./View.scss\";\nimport Breadcrumb from \"../../../components/common/breadcrumb/Breadcrumb\";\nimport {\n  initFormData,\n  readData,\n  selectZone,\n} from \"../../../store/redux/Page/Zone\";\nimport ZoneViewComponent from \"../../../components/pageSpecific/zones/view/View\";\nimport { useParams } from \"react-router-dom\";\n\nfunction ZoneView() {\n  const params = useParams();\n  const store = useSelector(selectZone);\n  const dispatch = useDispatch();\n  const pageName = \"View zone\";\n  const breadCrumbs = [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n    {\n      name: \"Zones\",\n      link: \"/zones\",\n    },\n    {\n      name: \"View\",\n      link: \"\",\n    },\n  ];\n\n  useEffect(() => {\n    document.title = `${process.env.REACT_APP_NAME} | ${pageName}`;\n    dispatch(initFormData());\n    dispatch(readData({ id: params.id }));\n  }, []);\n\n  return (\n    <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n      <div className=\"col-12 p-0 content-wrapper\">\n        <div className=\"content-header\">\n          <div className=\"container-fluid\">\n            <div className=\"row mb-2\">\n              <div className=\"col-sm-6\">\n                <h1 className=\"m-0\">{pageName}</h1>\n              </div>\n              <div className=\"col-sm-6\">\n                <Breadcrumb breadCrumbs={breadCrumbs} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <section className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n                  <div className=\"card-header border-transparent\">\n                    <div className={\"row\"}>&nbsp;</div>\n                  </div>\n\n                  <div className=\"card-body\">\n                    <ZoneViewComponent formData={store.formData} />\n                  </div>\n\n                  <div className=\"card-footer clearfix\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default ZoneView;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Breadcrumb.scss\";\nimport { Link } from \"react-router-dom\";\n\nfunction Breadcrumb({ breadCrumbs }) {\n  return (\n    <nav className=\"float-sm-end\" aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        {breadCrumbs.map((value, index) => {\n          const activeLink = value.link && value.link !== \"\";\n          return (\n            <li\n              className={`breadcrumb-item ${activeLink ? \"active\" : \"\"}`}\n              key={index}\n            >\n              {activeLink ? (\n                <Link to={value.link}>{value.name}</Link>\n              ) : (\n                value.name\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n}\n\nBreadcrumb.propTypes = {\n  breadCrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      link: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nBreadcrumb.defaultProps = {\n  breadCrumbs: [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n  ],\n};\n\nexport default Breadcrumb;\n"],"sourceRoot":""}