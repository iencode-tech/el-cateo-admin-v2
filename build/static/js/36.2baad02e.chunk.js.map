{"version":3,"sources":["components/common/table/Table.js","components/pageSpecific/workPlans/linked/rawMaterial/view/View.js","components/pageSpecific/workPlans/view/View.js","pages/workPlans/view/View.js","components/common/breadcrumb/Breadcrumb.js"],"names":["Table","header","data","className","length","map","element","i","colSpan","Object","keys","subElement","subI","RawMaterialView","formData","_checkFolialDrenche","_checkManual","rawMaterials","rawMaterial","index","name","quantity","unitMetric","unit","quantityAvailable","totalMethodBased","workPlanMethods","parseInt","methodId","value","totalunit","totalTree","id","totalTrees","zone","treeCount","changedQuantity","totalQ","forEach","parseFloat","Math","floor","_calculateTotalBasedOnMethod","actualName","amountPerTree","WorkPlanDataView","indexOf","agriculturalPractice","method","type","htmlFor","collaborator","selectRegion","sector","formulationName","methods","trees","tree","scanId","treeData","observation","scannedOn","WorkPlanView","params","useParams","store","useSelector","selectWorkPlan","dispatch","useDispatch","pageName","useEffect","document","title","process","initFormData","readData","Breadcrumb","breadCrumbs","link","activeLink","to","defaultProps"],"mappings":"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","file":"static/js/36.2baad02e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Table.scss\";\r\n\r\nfunction Table({ header, data }) {\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <table className=\"table m-0\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"text-center\">#</th>\r\n            {header.length > 0\r\n              ? header.map((element, i) => <th className=\"text-center\" key={i}>{element}</th>)\r\n              : \"\"}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.length === 0 ? (\r\n            <tr>\r\n              <td colSpan={1 + header.length} className=\"text-center\">\r\n                No Record found\r\n              </td>\r\n            </tr>\r\n          ) : (\r\n            data.map((element, i) => (\r\n              <tr key={i}>\r\n                <td className=\"text-center\">{i + 1}</td>\r\n                {Object.keys(element).map((subElement, subI) => (\r\n                  <td className=\"text-center\" key={subI}>{element[subElement]}</td>\r\n                ))}\r\n              </tr>\r\n            ))\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nTable.propTypes = {\r\n  header: PropTypes.array.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport Table from \"../../../../../common/table/Table\";\r\nimport {\r\n  workPlanMethods,\r\n  unitMetric,\r\n} from \"../../../../../../utils/appConstants\";\r\n\r\nfunction RawMaterialView({ formData, _checkFolialDrenche, _checkManual }) {\r\n  // const _getAmountPerTree = () => {\r\n  //   let amountPerTree = 1;\r\n  //   if (formData.amountPerTree && formData.amountPerTree !== 0) {\r\n  //     amountPerTree = parseFloat(formData.amountPerTree);\r\n  //   }\r\n  //   return amountPerTree;\r\n  // };\r\n\r\n  const _calculateTotalBasedOnMethod = () => {\r\n    let totalQ = 0;\r\n    formData.rawMaterials.forEach((rawMaterial) => {\r\n      totalQ +=\r\n        (parseFloat(rawMaterial.quantity) / 1000) *\r\n        (parseFloat(workPlanMethods[parseInt(formData.methodId)].value) / 1000);\r\n    });\r\n\r\n    return totalQ === 0 ? 0 : Math.floor(totalQ);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <div className=\"row\">\r\n        <div className=\"border border-2 rounded\">\r\n          <Table\r\n            data={[\r\n              ...formData.rawMaterials.map((rawMaterial, index) => ({\r\n                name: rawMaterial.rawMaterial.name,\r\n                quantity: `${rawMaterial.quantity} ${\r\n                  unitMetric[rawMaterial.unit]\r\n                }`,\r\n                quantityAvailable: `${\r\n                  rawMaterial.rawMaterial.quantityAvailable\r\n                } ${unitMetric[rawMaterial.unit]}`,\r\n                ...(_checkFolialDrenche()\r\n                  ? {\r\n                      totalMethodBased: `${\r\n                        (rawMaterial.quantity / 1000) *\r\n                        (workPlanMethods[parseInt(formData.methodId)].value / 1000)\r\n                      }` + ' ' + workPlanMethods[parseInt(formData.methodId)].totalunit,\r\n                    }\r\n                  : {}),\r\n                ...(_checkManual()\r\n                  ? {\r\n                      totalTree: `${\r\n                        rawMaterial.quantity *\r\n                        (formData.id\r\n                          ? formData.totalTrees\r\n                          : formData.zone.treeCount)\r\n                      } ${unitMetric[rawMaterial.unit]}`,\r\n                    }\r\n                  : {}),\r\n                changedQuantity: rawMaterial.changedQuantity,\r\n              })),\r\n              ...(_checkFolialDrenche()\r\n                ? [\r\n                    {\r\n                      name: \"\",\r\n                      quantity: \"\",\r\n                      quantityAvailable: \"Total:\",\r\n                      totalMethodBased: `${_calculateTotalBasedOnMethod()} ${\r\n                        unitMetric[\"totalunit\"]\r\n                      }`,\r\n                      changedQuantity: \"\",\r\n                    },\r\n                  ]\r\n                : []),\r\n            ]}\r\n            header={[\r\n              \"Material\",\r\n              \"Quantity\",\r\n              \"Quantity Available\",\r\n              ...(_checkFolialDrenche()\r\n                ? [\r\n                    `Total X ${\r\n                      workPlanMethods[parseInt(formData.methodId)].actualName\r\n                    }`,\r\n                  ]\r\n                : []),\r\n              ...(_checkManual() ? [\"Total\"] : []),\r\n              \"Change Quantity\",\r\n            ]}\r\n          />\r\n\r\n          {_checkFolialDrenche() && (\r\n            <>\r\n            <h4 className=\"text-secondary text-center pt-2\">\r\n              You will need to prepare{\" \"}\r\n              {(\r\n                (formData.totalTrees * formData.amountPerTree) /\r\n                  (workPlanMethods[parseInt(formData.methodId)].value / 1000)\r\n              )}{\" \"}\r\n              {workPlanMethods[parseInt(formData.methodId)].actualName} of{\" \"}\r\n              {workPlanMethods[parseInt(formData.methodId)].value / 1000} Lts\r\n              to cover{\" \"}\r\n              {formData.id ? formData.totalTrees : formData.zone.treeCount}{\" \"}\r\n              trees\r\n            </h4>\r\n\r\n            <h6 className=\"text-secondary text-center pt-2\">\r\n              ({formData.totalTrees} trees * {formData.amountPerTree} Lts ) / {workPlanMethods[parseInt(formData.methodId)].value / 1000} Lts  = {(formData.totalTrees * formData.amountPerTree) / (workPlanMethods[parseInt(formData.methodId)].value / 1000)} {workPlanMethods[parseInt(formData.methodId)].actualName}\r\n            </h6>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RawMaterialView;\r\n","import React from \"react\";\r\nimport Table from \"../../../common/table/Table\";\r\nimport { methods, workPlanMethods } from \"../../../../utils/appConstants\";\r\nimport RawMaterialView from \"../linked/rawMaterial/view/View\";\r\n\r\nfunction WorkPlanDataView({ formData }) {\r\n  const _checkFolialDrenche = () =>\r\n    [0, 2].indexOf(parseInt(formData.agriculturalPractice.method)) > -1;\r\n\r\n  const _checkManual = () =>\r\n    parseInt(formData.agriculturalPractice.method) === 1;\r\n\r\n  return (\r\n    <>\r\n      {formData.id ? <input type=\"hidden\" value={formData.id} /> : \"\"}\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"input2\" className=\"form-label\">\r\n          Collaborator <span className=\"text-danger\">*</span>\r\n        </label>\r\n        <span id=\"input2\" className=\"form-control\">\r\n          {formData.collaborator.name}\r\n        </span>\r\n      </div>\r\n\r\n      {formData.selectRegion === \"Z\" && (\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"input3\" className=\"form-label\">\r\n            Zone <span className=\"text-danger\">*</span>\r\n          </label>\r\n          <span id=\"input3\" className=\"form-control\">\r\n            {formData.zone.name}\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      {formData.selectRegion === \"S\" && (\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"input4\" className=\"form-label\">\r\n            Sector <span className=\"text-danger\">*</span>\r\n          </label>\r\n          <span id=\"input4\" className=\"form-control\">\r\n            {formData.sector.name}\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"input5\" className=\"form-label\">\r\n          Agricultural Practice <span className=\"text-danger\">*</span>\r\n        </label>\r\n        <span id=\"input5\" className=\"form-control\">\r\n          {formData.agriculturalPractice.formulationName}\r\n        </span>\r\n      </div>\r\n\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"input9\" className=\"form-label\">\r\n          Method <span className=\"text-danger\">*</span>\r\n        </label>\r\n        <span id=\"input9\" className=\"form-control\">\r\n          {workPlanMethods[parseInt(formData.methodId)].name}\r\n        </span>\r\n      </div>\r\n\r\n      {_checkFolialDrenche() && (\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col\">\r\n            <label htmlFor=\"input9\" className=\"form-label\">\r\n              Method <span className=\"text-danger\">*</span>\r\n            </label>\r\n            <span id=\"input9\" className=\"form-control\">\r\n              {workPlanMethods[parseInt(formData.methodId)].name}\r\n            </span>\r\n          </div>\r\n          <div className=\"col\">\r\n            <label htmlFor=\"input10\" className=\"form-label\">\r\n              Amount Per Tree <span className=\"text-danger\">*</span>\r\n            </label>\r\n            <div className=\"input-group\">\r\n              <span id=\"input10\" className=\"form-control\">\r\n                {formData.amountPerTree}\r\n              </span>\r\n              <div className=\"input-group-append\">\r\n                <span className=\"input-group-text\">Lts.</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"mb-3 card\">\r\n        <div className=\"card-header\">\r\n          <h6 className=\"fw-bold\">\r\n            DOSAGE :: {formData.agriculturalPractice.formulationName}\r\n          </h6>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <div className=\"row mb-3 text-center\">\r\n            <div className=\"col-4\">\r\n              <span className=\"fw-bold\">Total Trees: </span>\r\n              {formData.id ? formData.totalTrees : formData.zone.treeCount}\r\n            </div>\r\n            <div className=\"col-4\">\r\n              <span className=\"fw-bold\">Method: </span>\r\n              {methods[parseInt(formData.agriculturalPractice.method)]}\r\n            </div>\r\n            {_checkFolialDrenche() && (\r\n              <div className=\"col-4\">\r\n                <span className=\"fw-bold\">&nbsp;</span>\r\n                {`${workPlanMethods[parseInt(formData.methodId)].name}`}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {formData.rawMaterials && (\r\n            <RawMaterialView\r\n              formData={formData}\r\n              _checkFolialDrenche={_checkFolialDrenche}\r\n              _checkManual={_checkManual}\r\n            />\r\n          )}\r\n\r\n          {formData.trees &&\r\n            formData.trees.length > 0 &&\r\n            Object.keys(formData.trees[0]).length > 0 && (\r\n              <div className=\"mb-3\">\r\n                <div className=\"row\">\r\n                  <div className=\"border border-2 rounded\">\r\n                    <Table\r\n                      data={formData.trees.map((tree, index) => ({\r\n                        scanId: tree.treeData.scanId,\r\n                        observation: tree.observation,\r\n                        scannedOn: tree.scannedOn,\r\n                      }))}\r\n                      header={[\"Tree Scan Id\", \"Observation\", \"Scanned On\"]}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default WorkPlanDataView;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./View.scss\";\r\nimport Breadcrumb from \"../../../components/common/breadcrumb/Breadcrumb\";\r\nimport {\r\n  initFormData,\r\n  readData,\r\n  selectWorkPlan,\r\n} from \"../../../store/redux/Page/WorkPlan\";\r\nimport WorkPlanDataView from \"../../../components/pageSpecific/workPlans/view/View\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction WorkPlanView() {\r\n  const params = useParams();\r\n  const store = useSelector(selectWorkPlan);\r\n  const dispatch = useDispatch();\r\n  const pageName = \"View work plan\";\r\n  const breadCrumbs = [\r\n    {\r\n      name: \"Dashboard\",\r\n      link: \"/dashboard\",\r\n    },\r\n    {\r\n      name: \"Work Plans\",\r\n      link: \"/work-plans\",\r\n    },\r\n    {\r\n      name: \"View\",\r\n      link: \"\",\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    document.title = `${process.env.REACT_APP_NAME} | ${pageName}`;\r\n    dispatch(initFormData());\r\n    dispatch(readData({ id: params.id }));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n      <div className=\"col-12 p-0 content-wrapper\">\r\n        <div className=\"content-header\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row mb-2\">\r\n              <div className=\"col-sm-6\">\r\n                <h1 className=\"m-0\">{pageName}</h1>\r\n              </div>\r\n              <div className=\"col-sm-6\">\r\n                <Breadcrumb breadCrumbs={breadCrumbs} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <section className=\"content\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <div className=\"card\">\r\n                  <div className=\"card-header border-transparent\">\r\n                    <div className={\"row\"}>&nbsp;</div>\r\n                  </div>\r\n\r\n                  <div className=\"card-body\">\r\n                    <WorkPlanDataView formData={store.formData} />\r\n                  </div>\r\n\r\n                  <div className=\"card-footer clearfix\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorkPlanView;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Breadcrumb.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Breadcrumb({ breadCrumbs }) {\r\n  return (\r\n    <nav className=\"float-sm-end\" aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        {breadCrumbs.map((value, index) => {\r\n          const activeLink = value.link && value.link !== \"\";\r\n          return (\r\n            <li\r\n              className={`breadcrumb-item ${activeLink ? \"active\" : \"\"}`}\r\n              key={index}\r\n            >\r\n              {activeLink ? (\r\n                <Link to={value.link}>{value.name}</Link>\r\n              ) : (\r\n                value.name\r\n              )}\r\n            </li>\r\n          );\r\n        })}\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n\r\nBreadcrumb.propTypes = {\r\n  breadCrumbs: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      link: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n\r\nBreadcrumb.defaultProps = {\r\n  breadCrumbs: [\r\n    {\r\n      name: \"Dashboard\",\r\n      link: \"/dashboard\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport default Breadcrumb;\r\n"],"sourceRoot":""}