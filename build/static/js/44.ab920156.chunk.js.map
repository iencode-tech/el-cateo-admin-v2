{"version":3,"sources":["components/common/table/Table.js","components/pageSpecific/workPlans/linked/rawMaterial/view/View.js","components/pageSpecific/workPlans/view/View.js","pages/workPlans/view/View.js","components/common/breadcrumb/Breadcrumb.js"],"names":["Table","header","data","className","length","map","element","i","colSpan","Object","keys","subElement","subI","RawMaterialView","formData","_checkFolialDrenche","_checkManual","rawMaterials","rawMaterial","index","name","quantity","unitMetric","unit","quantityAvailable","totalMethodBased","workPlanMethods","parseInt","methodId","value","totalunit","totalTree","id","totalTrees","zone","treeCount","changedQuantity","totalQ","forEach","parseFloat","Math","floor","_calculateTotalBasedOnMethod","actualName","amountPerTree","WorkPlanDataView","indexOf","agriculturalPractice","method","type","htmlFor","collaborator","selectRegion","sector","formulationName","methods","trees","tree","scanId","treeData","observation","scannedOn","WorkPlanView","params","useParams","store","useSelector","selectWorkPlan","dispatch","useDispatch","pageName","useEffect","document","title","process","initFormData","readData","Breadcrumb","breadCrumbs","link","activeLink","to","defaultProps"],"mappings":"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","file":"static/js/44.ab920156.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Table.scss\";\n\nfunction Table({ header, data }) {\n  return (\n    <div className=\"table-responsive\">\n      <table className=\"table m-0\">\n        <thead>\n          <tr>\n            <th className=\"text-center\">#</th>\n            {header.length > 0\n              ? header.map((element, i) => <th className=\"text-center\" key={i}>{element}</th>)\n              : \"\"}\n          </tr>\n        </thead>\n        <tbody>\n          {data.length === 0 ? (\n            <tr>\n              <td colSpan={1 + header.length} className=\"text-center\">\n                No Record found\n              </td>\n            </tr>\n          ) : (\n            data.map((element, i) => (\n              <tr key={i}>\n                <td className=\"text-center\">{i + 1}</td>\n                {Object.keys(element).map((subElement, subI) => (\n                  <td className=\"text-center\" key={subI}>{element[subElement]}</td>\n                ))}\n              </tr>\n            ))\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nTable.propTypes = {\n  header: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n};\n\nexport default Table;\n","import React from \"react\";\nimport Table from \"../../../../../common/table/Table\";\nimport {\n  workPlanMethods,\n  unitMetric,\n} from \"../../../../../../utils/appConstants\";\n\nfunction RawMaterialView({ formData, _checkFolialDrenche, _checkManual }) {\n  const _getAmountPerTree = () => {\n    let amountPerTree = 1;\n    if (formData.amountPerTree && formData.amountPerTree !== 0) {\n      amountPerTree = parseFloat(formData.amountPerTree);\n    }\n    return amountPerTree;\n  };\n\n  const _calculateTotalBasedOnMethod = () => {\n    let totalQ = 0;\n    formData.rawMaterials.forEach((rawMaterial) => {\n      totalQ +=\n        (parseFloat(rawMaterial.quantity) / 1000) *\n        (parseFloat(workPlanMethods[parseInt(formData.methodId)].value) / 1000);\n    });\n\n    return totalQ === 0 ? 0 : Math.floor(totalQ);\n  };\n\n  return (\n    <div className=\"mb-3\">\n      <div className=\"row\">\n        <div className=\"border border-2 rounded\">\n          <Table\n            data={[\n              ...formData.rawMaterials.map((rawMaterial, index) => ({\n                name: rawMaterial.rawMaterial.name,\n                quantity: `${rawMaterial.quantity} ${\n                  unitMetric[rawMaterial.unit]\n                }`,\n                quantityAvailable: `${\n                  rawMaterial.rawMaterial.quantityAvailable\n                } ${unitMetric[rawMaterial.unit]}`,\n                ...(_checkFolialDrenche()\n                  ? {\n                      totalMethodBased: `${\n                        (rawMaterial.quantity / 1000) *\n                        (workPlanMethods[parseInt(formData.methodId)].value / 1000)\n                      }` + ' ' + workPlanMethods[parseInt(formData.methodId)].totalunit,\n                    }\n                  : {}),\n                ...(_checkManual()\n                  ? {\n                      totalTree: `${\n                        rawMaterial.quantity *\n                        (formData.id\n                          ? formData.totalTrees\n                          : formData.zone.treeCount)\n                      } ${unitMetric[rawMaterial.unit]}`,\n                    }\n                  : {}),\n                changedQuantity: rawMaterial.changedQuantity,\n              })),\n              ...(_checkFolialDrenche()\n                ? [\n                    {\n                      name: \"\",\n                      quantity: \"\",\n                      quantityAvailable: \"Total:\",\n                      totalMethodBased: `${_calculateTotalBasedOnMethod()} ${\n                        unitMetric[\"totalunit\"]\n                      }`,\n                      changedQuantity: \"\",\n                    },\n                  ]\n                : []),\n            ]}\n            header={[\n              \"Material\",\n              \"Quantity\",\n              \"Quantity Available\",\n              ...(_checkFolialDrenche()\n                ? [\n                    `Total X ${\n                      workPlanMethods[parseInt(formData.methodId)].actualName\n                    }`,\n                  ]\n                : []),\n              ...(_checkManual() ? [\"Total\"] : []),\n              \"Change Quantity\",\n            ]}\n          />\n\n          {_checkFolialDrenche() && (\n            <>\n            <h4 className=\"text-secondary text-center pt-2\">\n              You will need to prepare{\" \"}\n              {(\n                (formData.totalTrees * formData.amountPerTree) /\n                  (workPlanMethods[parseInt(formData.methodId)].value / 1000)\n              )}{\" \"}\n              {workPlanMethods[parseInt(formData.methodId)].actualName} of{\" \"}\n              {workPlanMethods[parseInt(formData.methodId)].value / 1000} Lts\n              to cover{\" \"}\n              {formData.id ? formData.totalTrees : formData.zone.treeCount}{\" \"}\n              trees\n            </h4>\n\n            <h6 className=\"text-secondary text-center pt-2\">\n              ({formData.totalTrees} trees * {formData.amountPerTree} Lts ) / {workPlanMethods[parseInt(formData.methodId)].value / 1000} Lts  = {(formData.totalTrees * formData.amountPerTree) / (workPlanMethods[parseInt(formData.methodId)].value / 1000)} {workPlanMethods[parseInt(formData.methodId)].actualName}\n            </h6>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RawMaterialView;\n","import React from \"react\";\nimport Table from \"../../../common/table/Table\";\nimport { methods, workPlanMethods } from \"../../../../utils/appConstants\";\nimport RawMaterialView from \"../linked/rawMaterial/view/View\";\n\nfunction WorkPlanDataView({ formData }) {\n  const _checkFolialDrenche = () =>\n    [0, 2].indexOf(parseInt(formData.agriculturalPractice.method)) > -1;\n\n  const _checkManual = () =>\n    parseInt(formData.agriculturalPractice.method) === 1;\n\n  return (\n    <>\n      {formData.id ? <input type=\"hidden\" value={formData.id} /> : \"\"}\n      <div className=\"mb-3\">\n        <label htmlFor=\"input2\" className=\"form-label\">\n          Collaborator <span className=\"text-danger\">*</span>\n        </label>\n        <span id=\"input2\" className=\"form-control\">\n          {formData.collaborator.name}\n        </span>\n      </div>\n\n      {formData.selectRegion === \"Z\" && (\n        <div className=\"mb-3\">\n          <label htmlFor=\"input3\" className=\"form-label\">\n            Zone <span className=\"text-danger\">*</span>\n          </label>\n          <span id=\"input3\" className=\"form-control\">\n            {formData.zone.name}\n          </span>\n        </div>\n      )}\n\n      {formData.selectRegion === \"S\" && (\n        <div className=\"mb-3\">\n          <label htmlFor=\"input4\" className=\"form-label\">\n            Sector <span className=\"text-danger\">*</span>\n          </label>\n          <span id=\"input4\" className=\"form-control\">\n            {formData.sector.name}\n          </span>\n        </div>\n      )}\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"input5\" className=\"form-label\">\n          Agricultural Practice <span className=\"text-danger\">*</span>\n        </label>\n        <span id=\"input5\" className=\"form-control\">\n          {formData.agriculturalPractice.formulationName}\n        </span>\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"input9\" className=\"form-label\">\n          Method <span className=\"text-danger\">*</span>\n        </label>\n        <span id=\"input9\" className=\"form-control\">\n          {workPlanMethods[parseInt(formData.methodId)].name}\n        </span>\n      </div>\n\n      {_checkFolialDrenche() && (\n        <div className=\"row mb-3\">\n          <div className=\"col\">\n            <label htmlFor=\"input9\" className=\"form-label\">\n              Method <span className=\"text-danger\">*</span>\n            </label>\n            <span id=\"input9\" className=\"form-control\">\n              {workPlanMethods[parseInt(formData.methodId)].name}\n            </span>\n          </div>\n          <div className=\"col\">\n            <label htmlFor=\"input10\" className=\"form-label\">\n              Amount Per Tree <span className=\"text-danger\">*</span>\n            </label>\n            <div className=\"input-group\">\n              <span id=\"input10\" className=\"form-control\">\n                {formData.amountPerTree}\n              </span>\n              <div className=\"input-group-append\">\n                <span className=\"input-group-text\">Lts.</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"mb-3 card\">\n        <div className=\"card-header\">\n          <h6 className=\"fw-bold\">\n            DOSAGE :: {formData.agriculturalPractice.formulationName}\n          </h6>\n        </div>\n        <div className=\"card-body\">\n          <div className=\"row mb-3 text-center\">\n            <div className=\"col-4\">\n              <span className=\"fw-bold\">Total Trees: </span>\n              {formData.id ? formData.totalTrees : formData.zone.treeCount}\n            </div>\n            <div className=\"col-4\">\n              <span className=\"fw-bold\">Method: </span>\n              {methods[parseInt(formData.agriculturalPractice.method)]}\n            </div>\n            {_checkFolialDrenche() && (\n              <div className=\"col-4\">\n                <span className=\"fw-bold\">&nbsp;</span>\n                {`${workPlanMethods[parseInt(formData.methodId)].name}`}\n              </div>\n            )}\n          </div>\n\n          {formData.rawMaterials && (\n            <RawMaterialView\n              formData={formData}\n              _checkFolialDrenche={_checkFolialDrenche}\n              _checkManual={_checkManual}\n            />\n          )}\n\n          {formData.trees &&\n            formData.trees.length > 0 &&\n            Object.keys(formData.trees[0]).length > 0 && (\n              <div className=\"mb-3\">\n                <div className=\"row\">\n                  <div className=\"border border-2 rounded\">\n                    <Table\n                      data={formData.trees.map((tree, index) => ({\n                        scanId: tree.treeData.scanId,\n                        observation: tree.observation,\n                        scannedOn: tree.scannedOn,\n                      }))}\n                      header={[\"Tree Scan Id\", \"Observation\", \"Scanned On\"]}\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default WorkPlanDataView;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./View.scss\";\nimport Breadcrumb from \"../../../components/common/breadcrumb/Breadcrumb\";\nimport {\n  initFormData,\n  readData,\n  selectWorkPlan,\n} from \"../../../store/redux/Page/WorkPlan\";\nimport WorkPlanDataView from \"../../../components/pageSpecific/workPlans/view/View\";\nimport { useParams } from \"react-router-dom\";\n\nfunction WorkPlanView() {\n  const params = useParams();\n  const store = useSelector(selectWorkPlan);\n  const dispatch = useDispatch();\n  const pageName = \"View work plan\";\n  const breadCrumbs = [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n    {\n      name: \"Work Plans\",\n      link: \"/work-plans\",\n    },\n    {\n      name: \"View\",\n      link: \"\",\n    },\n  ];\n\n  useEffect(() => {\n    document.title = `${process.env.REACT_APP_NAME} | ${pageName}`;\n    dispatch(initFormData());\n    dispatch(readData({ id: params.id }));\n  }, []);\n\n  return (\n    <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n      <div className=\"col-12 p-0 content-wrapper\">\n        <div className=\"content-header\">\n          <div className=\"container-fluid\">\n            <div className=\"row mb-2\">\n              <div className=\"col-sm-6\">\n                <h1 className=\"m-0\">{pageName}</h1>\n              </div>\n              <div className=\"col-sm-6\">\n                <Breadcrumb breadCrumbs={breadCrumbs} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <section className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n                  <div className=\"card-header border-transparent\">\n                    <div className={\"row\"}>&nbsp;</div>\n                  </div>\n\n                  <div className=\"card-body\">\n                    <WorkPlanDataView formData={store.formData} />\n                  </div>\n\n                  <div className=\"card-footer clearfix\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default WorkPlanView;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Breadcrumb.scss\";\nimport { Link } from \"react-router-dom\";\n\nfunction Breadcrumb({ breadCrumbs }) {\n  return (\n    <nav className=\"float-sm-end\" aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        {breadCrumbs.map((value, index) => {\n          const activeLink = value.link && value.link !== \"\";\n          return (\n            <li\n              className={`breadcrumb-item ${activeLink ? \"active\" : \"\"}`}\n              key={index}\n            >\n              {activeLink ? (\n                <Link to={value.link}>{value.name}</Link>\n              ) : (\n                value.name\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n}\n\nBreadcrumb.propTypes = {\n  breadCrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      link: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nBreadcrumb.defaultProps = {\n  breadCrumbs: [\n    {\n      name: \"Dashboard\",\n      link: \"/dashboard\",\n    },\n  ],\n};\n\nexport default Breadcrumb;\n"],"sourceRoot":""}